; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-n8:16:32:64"
target triple = "spir64-unknown-unknown"

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(none)
declare !dbg !9 spir_func i16 @_Z27__spirv_ConvertFToBF16INTELf(float) local_unnamed_addr #0

; Function Attrs: convergent mustprogress nounwind willreturn
declare !dbg !12 spir_func float @_Z27__spirv_GroupNonUniformFAddiifj(i32, i32, float, i32) local_unnamed_addr #1

; Function Attrs: convergent mustprogress nounwind willreturn
declare !dbg !13 spir_func void @_Z7barrierj(i32) local_unnamed_addr #1

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(none)
declare !dbg !14 spir_func i64 @_Z12get_local_idj(i32) local_unnamed_addr #0

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(none)
declare !dbg !15 spir_func i64 @_Z12get_group_idj(i32) local_unnamed_addr #0

; Function Attrs: mustprogress nounwind willreturn
define spir_kernel void @triton_per_fused__to_copy_add_cat_cos_mul_neg_sin_unsqueeze_7(ptr addrspace(1) readonly captures(none) %0, ptr addrspace(1) readonly captures(none) %1, ptr addrspace(1) readonly captures(none) %2, ptr addrspace(1) readonly captures(none) %3, ptr addrspace(1) writeonly captures(none) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7, ptr addrspace(3) captures(none) %8) local_unnamed_addr #2 !dbg !16 !intel_reqd_sub_group_size !17 !max_work_group_size !18 {
  %10 = tail call spir_func i64 @_Z12get_group_idj(i32 0) #5, !dbg !19
  %11 = trunc i64 %10 to i32, !dbg !19
  %12 = shl i32 %11, 7, !dbg !20
  %13 = tail call spir_func i64 @_Z12get_local_idj(i32 0) #5, !dbg !21
  %14 = trunc i64 %13 to i32, !dbg !21
  %15 = shl i32 %14, 2, !dbg !21
  %16 = and i32 %15, 124, !dbg !21
  %17 = and i32 %14, 127, !dbg !21
  %18 = lshr i32 %14, 4, !dbg !21
  %19 = and i32 %18, 15, !dbg !21
  %20 = or disjoint i32 %16, %12, !dbg !22
  %21 = or disjoint i32 %17, %12, !dbg !22
  %22 = or disjoint i32 %19, %12, !dbg !22
  %23 = or disjoint i32 %22, 16, !dbg !22
  %24 = or disjoint i32 %22, 32, !dbg !22
  %25 = or disjoint i32 %22, 48, !dbg !22
  %26 = or disjoint i32 %22, 64, !dbg !22
  %27 = or disjoint i32 %22, 80, !dbg !22
  %28 = or disjoint i32 %22, 96, !dbg !22
  %29 = or disjoint i32 %22, 112, !dbg !22
  %30 = lshr i32 %14, 5, !dbg !23
  %31 = and i32 %30, 7, !dbg !23
  %32 = or disjoint i32 %31, 8, !dbg !23
  %33 = and i32 %14, 15, !dbg !23
  %34 = icmp samesign ult i32 %32, 14, !dbg !24
  %35 = icmp samesign ult i32 %33, 14, !dbg !24
  %36 = sdiv i32 %21, 128, !dbg !25
  %37 = sdiv i32 %22, 128, !dbg !25
  %38 = sdiv i32 %23, 128, !dbg !25
  %39 = sdiv i32 %24, 128, !dbg !25
  %40 = sdiv i32 %25, 128, !dbg !25
  %41 = sdiv i32 %26, 128, !dbg !25
  %42 = sdiv i32 %27, 128, !dbg !25
  %43 = sdiv i32 %28, 128, !dbg !25
  %44 = sdiv i32 %29, 128, !dbg !25
  %45 = shl nuw nsw i32 %31, 12, !dbg !26
  %46 = add i32 %20, %45, !dbg !27
  %47 = sext i32 %46 to i64, !dbg !28
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !28
  %49 = load <4 x float>, ptr addrspace(1) %48, align 16, !dbg !29
  br i1 %34, label %50, label %56, !dbg !29

50:                                               ; preds = %9
  %51 = shl nuw nsw i32 %32, 12, !dbg !26
  %52 = add i32 %51, %20, !dbg !27
  %53 = sext i32 %52 to i64, !dbg !28
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !28
  %55 = load <4 x float>, ptr addrspace(1) %54, align 16, !dbg !29
  br label %56, !dbg !29

56:                                               ; preds = %50, %9
  %bc7 = phi <4 x float> [ %55, %50 ], [ zeroinitializer, %9 ], !dbg !29
  %57 = and i32 %14, 128, !dbg !29
  %58 = icmp eq i32 %57, 0, !dbg !29
  %59 = and i32 %15, 1020, !dbg !29
  %60 = shl i32 %14, 7, !dbg !29
  %61 = and i32 %60, 1920, !dbg !29
  %62 = and i32 %18, 7, !dbg !29
  %63 = or disjoint i32 %61, %62, !dbg !29
  %64 = lshr exact i32 %57, 4, !dbg !29
  %65 = or disjoint i32 %63, %64, !dbg !29
  %66 = lshr i32 %59, 7, !dbg !29
  %67 = add nuw nsw i32 %66, %59, !dbg !29
  %68 = zext nneg i32 %67 to i64, !dbg !29
  %69 = getelementptr inbounds nuw float, ptr addrspace(3) %8, i64 %68, !dbg !29
  %70 = shufflevector <4 x float> %49, <4 x float> poison, <1 x i32> zeroinitializer, !dbg !29
  store <1 x float> %70, ptr addrspace(3) %69, align 4, !dbg !29
  %71 = or disjoint i32 %59, 1, !dbg !29
  %72 = add nuw nsw i32 %71, %66, !dbg !29
  %73 = zext nneg i32 %72 to i64, !dbg !29
  %74 = getelementptr inbounds nuw float, ptr addrspace(3) %8, i64 %73, !dbg !29
  %75 = shufflevector <4 x float> %49, <4 x float> poison, <1 x i32> <i32 1>, !dbg !29
  store <1 x float> %75, ptr addrspace(3) %74, align 4, !dbg !29
  %76 = or disjoint i32 %59, 2, !dbg !29
  %77 = add nuw nsw i32 %76, %66, !dbg !29
  %78 = zext nneg i32 %77 to i64, !dbg !29
  %79 = getelementptr inbounds nuw float, ptr addrspace(3) %8, i64 %78, !dbg !29
  %80 = shufflevector <4 x float> %49, <4 x float> poison, <1 x i32> <i32 2>, !dbg !29
  store <1 x float> %80, ptr addrspace(3) %79, align 4, !dbg !29
  %81 = or disjoint i32 %59, 3, !dbg !29
  %82 = add nuw nsw i32 %81, %66, !dbg !29
  %83 = zext nneg i32 %82 to i64, !dbg !29
  %84 = getelementptr inbounds nuw float, ptr addrspace(3) %8, i64 %83, !dbg !29
  %85 = shufflevector <4 x float> %49, <4 x float> poison, <1 x i32> <i32 3>, !dbg !29
  store <1 x float> %85, ptr addrspace(3) %84, align 4, !dbg !29
  %86 = or disjoint i32 %59, 1024, !dbg !29
  %87 = lshr i32 %86, 7, !dbg !29
  %88 = add nuw nsw i32 %87, %86, !dbg !29
  %89 = zext nneg i32 %88 to i64, !dbg !29
  %90 = getelementptr inbounds nuw float, ptr addrspace(3) %8, i64 %89, !dbg !29
  %91 = shufflevector <4 x float> %bc7, <4 x float> poison, <1 x i32> zeroinitializer, !dbg !29
  store <1 x float> %91, ptr addrspace(3) %90, align 4, !dbg !29
  %92 = or disjoint i32 %59, 1025, !dbg !29
  %93 = lshr i32 %92, 7, !dbg !29
  %94 = add nuw nsw i32 %93, %92, !dbg !29
  %95 = zext nneg i32 %94 to i64, !dbg !29
  %96 = getelementptr inbounds nuw float, ptr addrspace(3) %8, i64 %95, !dbg !29
  %97 = shufflevector <4 x float> %bc7, <4 x float> poison, <1 x i32> <i32 1>, !dbg !29
  store <1 x float> %97, ptr addrspace(3) %96, align 4, !dbg !29
  %98 = or disjoint i32 %59, 1026, !dbg !29
  %99 = lshr i32 %98, 7, !dbg !29
  %100 = add nuw nsw i32 %99, %98, !dbg !29
  %101 = zext nneg i32 %100 to i64, !dbg !29
  %102 = getelementptr inbounds nuw float, ptr addrspace(3) %8, i64 %101, !dbg !29
  %103 = shufflevector <4 x float> %bc7, <4 x float> poison, <1 x i32> <i32 2>, !dbg !29
  store <1 x float> %103, ptr addrspace(3) %102, align 4, !dbg !29
  %104 = or disjoint i32 %59, 1027, !dbg !29
  %105 = lshr i32 %104, 7, !dbg !29
  %106 = add nuw nsw i32 %105, %104, !dbg !29
  %107 = zext nneg i32 %106 to i64, !dbg !29
  %108 = getelementptr inbounds nuw float, ptr addrspace(3) %8, i64 %107, !dbg !29
  %109 = shufflevector <4 x float> %bc7, <4 x float> poison, <1 x i32> <i32 3>, !dbg !29
  store <1 x float> %109, ptr addrspace(3) %108, align 4, !dbg !29
  tail call spir_func void @_Z7barrierj(i32 1) #6, !dbg !29
  %110 = lshr exact i32 %61, 7, !dbg !29
  %111 = add nuw nsw i32 %65, %110, !dbg !29
  %112 = zext nneg i32 %111 to i64, !dbg !29
  %113 = getelementptr inbounds nuw float, ptr addrspace(3) %8, i64 %112, !dbg !29
  %114 = load float, ptr addrspace(3) %113, align 4, !dbg !29
  %115 = or disjoint i32 %110, 16, !dbg !29
  %116 = add nuw nsw i32 %115, %65, !dbg !29
  %117 = zext nneg i32 %116 to i64, !dbg !29
  %118 = getelementptr inbounds nuw float, ptr addrspace(3) %8, i64 %117, !dbg !29
  %119 = load float, ptr addrspace(3) %118, align 4, !dbg !29
  %120 = or disjoint i32 %110, 32, !dbg !29
  %121 = add nuw nsw i32 %120, %65, !dbg !29
  %122 = zext nneg i32 %121 to i64, !dbg !29
  %123 = getelementptr inbounds nuw float, ptr addrspace(3) %8, i64 %122, !dbg !29
  %124 = load float, ptr addrspace(3) %123, align 4, !dbg !29
  %125 = or disjoint i32 %110, 48, !dbg !29
  %126 = add nuw nsw i32 %125, %65, !dbg !29
  %127 = zext nneg i32 %126 to i64, !dbg !29
  %128 = getelementptr inbounds nuw float, ptr addrspace(3) %8, i64 %127, !dbg !29
  %129 = load float, ptr addrspace(3) %128, align 4, !dbg !29
  %130 = or disjoint i32 %110, 64, !dbg !29
  %131 = add nuw nsw i32 %130, %65, !dbg !29
  %132 = zext nneg i32 %131 to i64, !dbg !29
  %133 = getelementptr inbounds nuw float, ptr addrspace(3) %8, i64 %132, !dbg !29
  %134 = load float, ptr addrspace(3) %133, align 4, !dbg !29
  %135 = or disjoint i32 %110, 80, !dbg !29
  %136 = add nuw nsw i32 %135, %65, !dbg !29
  %137 = zext nneg i32 %136 to i64, !dbg !29
  %138 = getelementptr inbounds nuw float, ptr addrspace(3) %8, i64 %137, !dbg !29
  %139 = load float, ptr addrspace(3) %138, align 4, !dbg !29
  %140 = or disjoint i32 %110, 96, !dbg !29
  %141 = add nuw nsw i32 %140, %65, !dbg !29
  %142 = zext nneg i32 %141 to i64, !dbg !29
  %143 = getelementptr inbounds nuw float, ptr addrspace(3) %8, i64 %142, !dbg !29
  %144 = load float, ptr addrspace(3) %143, align 4, !dbg !29
  %145 = or disjoint i32 %110, 112, !dbg !29
  %146 = add nuw nsw i32 %145, %65, !dbg !29
  %147 = zext nneg i32 %146 to i64, !dbg !29
  %148 = getelementptr inbounds nuw float, ptr addrspace(3) %8, i64 %147, !dbg !29
  %149 = load float, ptr addrspace(3) %148, align 4, !dbg !29
  %150 = sext i32 %36 to i64, !dbg !30
  %151 = getelementptr float, ptr addrspace(1) %1, i64 %150, !dbg !30
  %152 = sext i32 %37 to i64, !dbg !30
  %153 = getelementptr float, ptr addrspace(1) %1, i64 %152, !dbg !30
  %154 = sext i32 %38 to i64, !dbg !30
  %155 = getelementptr float, ptr addrspace(1) %1, i64 %154, !dbg !30
  %156 = sext i32 %39 to i64, !dbg !30
  %157 = getelementptr float, ptr addrspace(1) %1, i64 %156, !dbg !30
  %158 = sext i32 %40 to i64, !dbg !30
  %159 = getelementptr float, ptr addrspace(1) %1, i64 %158, !dbg !30
  %160 = sext i32 %41 to i64, !dbg !30
  %161 = getelementptr float, ptr addrspace(1) %1, i64 %160, !dbg !30
  %162 = sext i32 %42 to i64, !dbg !30
  %163 = getelementptr float, ptr addrspace(1) %1, i64 %162, !dbg !30
  %164 = sext i32 %43 to i64, !dbg !30
  %165 = getelementptr float, ptr addrspace(1) %1, i64 %164, !dbg !30
  %166 = sext i32 %44 to i64, !dbg !30
  %167 = getelementptr float, ptr addrspace(1) %1, i64 %166, !dbg !30
  %168 = load float, ptr addrspace(1) %151, align 4, !dbg !31
  %169 = load float, ptr addrspace(1) %153, align 4, !dbg !31
  %170 = load float, ptr addrspace(1) %155, align 4, !dbg !31
  %171 = load float, ptr addrspace(1) %157, align 4, !dbg !31
  %172 = load float, ptr addrspace(1) %159, align 4, !dbg !31
  %173 = load float, ptr addrspace(1) %161, align 4, !dbg !31
  %174 = load float, ptr addrspace(1) %163, align 4, !dbg !31
  %175 = load float, ptr addrspace(1) %165, align 4, !dbg !31
  %176 = load float, ptr addrspace(1) %167, align 4, !dbg !31
  br i1 %35, label %177, label %211, !dbg !32

177:                                              ; preds = %56
  %178 = shl nuw nsw i32 %33, 5, !dbg !33
  %179 = add nsw i32 %44, %178, !dbg !34
  %180 = sext i32 %179 to i64, !dbg !35
  %181 = getelementptr float, ptr addrspace(1) %2, i64 %180, !dbg !35
  %182 = add nsw i32 %43, %178, !dbg !34
  %183 = sext i32 %182 to i64, !dbg !35
  %184 = getelementptr float, ptr addrspace(1) %2, i64 %183, !dbg !35
  %185 = add nsw i32 %42, %178, !dbg !34
  %186 = sext i32 %185 to i64, !dbg !35
  %187 = getelementptr float, ptr addrspace(1) %2, i64 %186, !dbg !35
  %188 = add nsw i32 %41, %178, !dbg !34
  %189 = sext i32 %188 to i64, !dbg !35
  %190 = getelementptr float, ptr addrspace(1) %2, i64 %189, !dbg !35
  %191 = add nsw i32 %40, %178, !dbg !34
  %192 = sext i32 %191 to i64, !dbg !35
  %193 = getelementptr float, ptr addrspace(1) %2, i64 %192, !dbg !35
  %194 = add nsw i32 %39, %178, !dbg !34
  %195 = sext i32 %194 to i64, !dbg !35
  %196 = getelementptr float, ptr addrspace(1) %2, i64 %195, !dbg !35
  %197 = add nsw i32 %38, %178, !dbg !34
  %198 = sext i32 %197 to i64, !dbg !35
  %199 = getelementptr float, ptr addrspace(1) %2, i64 %198, !dbg !35
  %200 = add nsw i32 %37, %178, !dbg !34
  %201 = sext i32 %200 to i64, !dbg !35
  %202 = getelementptr float, ptr addrspace(1) %2, i64 %201, !dbg !35
  %203 = load float, ptr addrspace(1) %202, align 4, !dbg !32
  %204 = load float, ptr addrspace(1) %199, align 4, !dbg !32
  %205 = load float, ptr addrspace(1) %196, align 4, !dbg !32
  %206 = load float, ptr addrspace(1) %193, align 4, !dbg !32
  %207 = load float, ptr addrspace(1) %190, align 4, !dbg !32
  %208 = load float, ptr addrspace(1) %187, align 4, !dbg !32
  %209 = load float, ptr addrspace(1) %184, align 4, !dbg !32
  %210 = load <1 x float>, ptr addrspace(1) %181, align 4, !dbg !32
  br label %211, !dbg !32

211:                                              ; preds = %56, %177
  %212 = phi float [ %209, %177 ], [ 0.000000e+00, %56 ]
  %213 = phi float [ %207, %177 ], [ 0.000000e+00, %56 ]
  %214 = phi float [ %205, %177 ], [ 0.000000e+00, %56 ]
  %215 = phi float [ %203, %177 ], [ 0.000000e+00, %56 ]
  %216 = phi float [ %204, %177 ], [ 0.000000e+00, %56 ]
  %217 = phi float [ %206, %177 ], [ 0.000000e+00, %56 ]
  %218 = phi float [ %208, %177 ], [ 0.000000e+00, %56 ]
  %219 = phi <1 x float> [ %210, %177 ], [ zeroinitializer, %56 ], !dbg !32
  %220 = extractelement <1 x float> %219, i64 0, !dbg !32
  %221 = getelementptr float, ptr addrspace(1) %3, i64 %150, !dbg !36
  %222 = load <1 x float>, ptr addrspace(1) %221, align 4, !dbg !37
  %223 = fcmp oeq float %169, 0xFFF0000000000000, !dbg !38
  %224 = fcmp oeq float %170, 0xFFF0000000000000, !dbg !38
  %225 = fcmp oeq float %171, 0xFFF0000000000000, !dbg !38
  %226 = fcmp oeq float %172, 0xFFF0000000000000, !dbg !38
  %227 = fcmp oeq float %173, 0xFFF0000000000000, !dbg !38
  %228 = fcmp oeq float %174, 0xFFF0000000000000, !dbg !38
  %229 = fcmp oeq float %175, 0xFFF0000000000000, !dbg !38
  %230 = fcmp oeq float %176, 0xFFF0000000000000, !dbg !38
  %231 = fsub float %215, %169, !dbg !39
  %232 = fsub float %216, %170, !dbg !39
  %233 = fsub float %214, %171, !dbg !39
  %234 = fsub float %217, %172, !dbg !39
  %235 = fsub float %213, %173, !dbg !39
  %236 = fsub float %218, %174, !dbg !39
  %237 = fsub float %212, %175, !dbg !39
  %238 = fsub float %220, %176, !dbg !39
  %239 = select i1 %223, float 0.000000e+00, float %231, !dbg !40
  %240 = select i1 %224, float 0.000000e+00, float %232, !dbg !40
  %241 = select i1 %225, float 0.000000e+00, float %233, !dbg !40
  %242 = select i1 %226, float 0.000000e+00, float %234, !dbg !40
  %243 = select i1 %227, float 0.000000e+00, float %235, !dbg !40
  %244 = select i1 %228, float 0.000000e+00, float %236, !dbg !40
  %245 = select i1 %229, float 0.000000e+00, float %237, !dbg !40
  %246 = select i1 %230, float 0.000000e+00, float %238, !dbg !40
  %247 = tail call spir_func noundef float @_Z16__spirv_ocl_rintf(float noundef %239) #7, !dbg !41
  %248 = fsub float %239, %247, !dbg !41
  %249 = fptosi float %247 to i32, !dbg !41
  %250 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef 0x3F24499000000000, float noundef %248, float noundef 0x3F55F48C60000000) #7, !dbg !41
  %251 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %248, float noundef 5.000000e-01, float noundef 1.000000e+00) #7, !dbg !41
  %252 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %250, float noundef %248, float noundef 0x3F83B29960000000) #7, !dbg !41
  %253 = fadd float %251, -1.000000e+00, !dbg !41
  %254 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %252, float noundef %248, float noundef 0x3FAC6AECC0000000) #7, !dbg !41
  %255 = fneg float %253, !dbg !41
  %256 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %248, float noundef 5.000000e-01, float noundef %255) #7, !dbg !41
  %257 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %254, float noundef %248, float noundef 0x3FCEBFBE20000000) #7, !dbg !41
  %258 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %257, float noundef %248, float noundef 0x3FC8B90C40000000) #7, !dbg !41
  %259 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %258, float noundef %248, float noundef %256) #7, !dbg !41
  %260 = fadd float %251, %259, !dbg !41
  %261 = add i32 %249, -127, !dbg !41
  %262 = icmp ult i32 %261, -252, !dbg !41
  br i1 %262, label %268, label %263, !dbg !41

263:                                              ; preds = %211
  %264 = bitcast float %260 to i32, !dbg !41
  %265 = shl nsw i32 %249, 23, !dbg !41
  %266 = add i32 %265, %264, !dbg !41
  %267 = bitcast i32 %266 to float, !dbg !41
  br label %__devicelib_imf_exp2f.exit14, !dbg !41

268:                                              ; preds = %211
  %269 = tail call float @llvm.fabs.f32(float %239), !dbg !41
  %270 = bitcast float %269 to i32, !dbg !41
  %271 = icmp samesign ugt i32 %270, 2139095039, !dbg !41
  br i1 %271, label %272, label %276, !dbg !41

272:                                              ; preds = %268
  %273 = fcmp oeq float %239, 0xFFF0000000000000, !dbg !41
  %274 = fadd float %239, %239, !dbg !41
  %275 = select i1 %273, float 0.000000e+00, float %274, !dbg !41
  br label %__devicelib_imf_exp2f.exit14, !dbg !41

276:                                              ; preds = %268
  %277 = tail call spir_func noundef float @_Z16__spirv_ocl_fminff(float noundef %239, float noundef 1.920000e+02) #7, !dbg !41
  %278 = tail call spir_func noundef float @_Z16__spirv_ocl_fmaxff(float noundef %277, float noundef -1.920000e+02) #7, !dbg !41
  %279 = tail call spir_func noundef float @_Z16__spirv_ocl_rintf(float noundef %278) #7, !dbg !41
  %280 = fptosi float %279 to i32, !dbg !41
  %281 = ashr i32 %280, 1, !dbg !41
  %282 = sub nsw i32 %280, %281, !dbg !41
  %283 = shl i32 %282, 23, !dbg !41
  %284 = add i32 %283, 1065353216, !dbg !41
  %285 = shl i32 %281, 23, !dbg !41
  %286 = add i32 %285, 1065353216, !dbg !41
  %287 = bitcast i32 %284 to float, !dbg !41
  %288 = fmul float %260, %287, !dbg !41
  %289 = bitcast i32 %286 to float, !dbg !41
  %290 = fmul float %288, %289, !dbg !41
  br label %__devicelib_imf_exp2f.exit14, !dbg !41

__devicelib_imf_exp2f.exit14:                     ; preds = %263, %272, %276
  %291 = phi float [ %290, %276 ], [ %267, %263 ], [ %275, %272 ], !dbg !41
  %292 = tail call spir_func noundef float @_Z16__spirv_ocl_rintf(float noundef %240) #7, !dbg !41
  %293 = fsub float %240, %292, !dbg !41
  %294 = fptosi float %292 to i32, !dbg !41
  %295 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef 0x3F24499000000000, float noundef %293, float noundef 0x3F55F48C60000000) #7, !dbg !41
  %296 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %293, float noundef 5.000000e-01, float noundef 1.000000e+00) #7, !dbg !41
  %297 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %295, float noundef %293, float noundef 0x3F83B29960000000) #7, !dbg !41
  %298 = fadd float %296, -1.000000e+00, !dbg !41
  %299 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %297, float noundef %293, float noundef 0x3FAC6AECC0000000) #7, !dbg !41
  %300 = fneg float %298, !dbg !41
  %301 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %293, float noundef 5.000000e-01, float noundef %300) #7, !dbg !41
  %302 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %299, float noundef %293, float noundef 0x3FCEBFBE20000000) #7, !dbg !41
  %303 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %302, float noundef %293, float noundef 0x3FC8B90C40000000) #7, !dbg !41
  %304 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %303, float noundef %293, float noundef %301) #7, !dbg !41
  %305 = fadd float %296, %304, !dbg !41
  %306 = add i32 %294, -127, !dbg !41
  %307 = icmp ult i32 %306, -252, !dbg !41
  br i1 %307, label %313, label %308, !dbg !41

308:                                              ; preds = %__devicelib_imf_exp2f.exit14
  %309 = bitcast float %305 to i32, !dbg !41
  %310 = shl nsw i32 %294, 23, !dbg !41
  %311 = add i32 %310, %309, !dbg !41
  %312 = bitcast i32 %311 to float, !dbg !41
  br label %__devicelib_imf_exp2f.exit13, !dbg !41

313:                                              ; preds = %__devicelib_imf_exp2f.exit14
  %314 = tail call float @llvm.fabs.f32(float %240), !dbg !41
  %315 = bitcast float %314 to i32, !dbg !41
  %316 = icmp samesign ugt i32 %315, 2139095039, !dbg !41
  br i1 %316, label %317, label %321, !dbg !41

317:                                              ; preds = %313
  %318 = fcmp oeq float %240, 0xFFF0000000000000, !dbg !41
  %319 = fadd float %240, %240, !dbg !41
  %320 = select i1 %318, float 0.000000e+00, float %319, !dbg !41
  br label %__devicelib_imf_exp2f.exit13, !dbg !41

321:                                              ; preds = %313
  %322 = tail call spir_func noundef float @_Z16__spirv_ocl_fminff(float noundef %240, float noundef 1.920000e+02) #7, !dbg !41
  %323 = tail call spir_func noundef float @_Z16__spirv_ocl_fmaxff(float noundef %322, float noundef -1.920000e+02) #7, !dbg !41
  %324 = tail call spir_func noundef float @_Z16__spirv_ocl_rintf(float noundef %323) #7, !dbg !41
  %325 = fptosi float %324 to i32, !dbg !41
  %326 = ashr i32 %325, 1, !dbg !41
  %327 = sub nsw i32 %325, %326, !dbg !41
  %328 = shl i32 %327, 23, !dbg !41
  %329 = add i32 %328, 1065353216, !dbg !41
  %330 = shl i32 %326, 23, !dbg !41
  %331 = add i32 %330, 1065353216, !dbg !41
  %332 = bitcast i32 %329 to float, !dbg !41
  %333 = fmul float %305, %332, !dbg !41
  %334 = bitcast i32 %331 to float, !dbg !41
  %335 = fmul float %333, %334, !dbg !41
  br label %__devicelib_imf_exp2f.exit13, !dbg !41

__devicelib_imf_exp2f.exit13:                     ; preds = %308, %317, %321
  %336 = phi float [ %335, %321 ], [ %312, %308 ], [ %320, %317 ], !dbg !41
  %337 = tail call spir_func noundef float @_Z16__spirv_ocl_rintf(float noundef %241) #7, !dbg !41
  %338 = fsub float %241, %337, !dbg !41
  %339 = fptosi float %337 to i32, !dbg !41
  %340 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef 0x3F24499000000000, float noundef %338, float noundef 0x3F55F48C60000000) #7, !dbg !41
  %341 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %338, float noundef 5.000000e-01, float noundef 1.000000e+00) #7, !dbg !41
  %342 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %340, float noundef %338, float noundef 0x3F83B29960000000) #7, !dbg !41
  %343 = fadd float %341, -1.000000e+00, !dbg !41
  %344 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %342, float noundef %338, float noundef 0x3FAC6AECC0000000) #7, !dbg !41
  %345 = fneg float %343, !dbg !41
  %346 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %338, float noundef 5.000000e-01, float noundef %345) #7, !dbg !41
  %347 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %344, float noundef %338, float noundef 0x3FCEBFBE20000000) #7, !dbg !41
  %348 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %347, float noundef %338, float noundef 0x3FC8B90C40000000) #7, !dbg !41
  %349 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %348, float noundef %338, float noundef %346) #7, !dbg !41
  %350 = fadd float %341, %349, !dbg !41
  %351 = add i32 %339, -127, !dbg !41
  %352 = icmp ult i32 %351, -252, !dbg !41
  br i1 %352, label %358, label %353, !dbg !41

353:                                              ; preds = %__devicelib_imf_exp2f.exit13
  %354 = bitcast float %350 to i32, !dbg !41
  %355 = shl nsw i32 %339, 23, !dbg !41
  %356 = add i32 %355, %354, !dbg !41
  %357 = bitcast i32 %356 to float, !dbg !41
  br label %__devicelib_imf_exp2f.exit12, !dbg !41

358:                                              ; preds = %__devicelib_imf_exp2f.exit13
  %359 = tail call float @llvm.fabs.f32(float %241), !dbg !41
  %360 = bitcast float %359 to i32, !dbg !41
  %361 = icmp samesign ugt i32 %360, 2139095039, !dbg !41
  br i1 %361, label %362, label %366, !dbg !41

362:                                              ; preds = %358
  %363 = fcmp oeq float %241, 0xFFF0000000000000, !dbg !41
  %364 = fadd float %241, %241, !dbg !41
  %365 = select i1 %363, float 0.000000e+00, float %364, !dbg !41
  br label %__devicelib_imf_exp2f.exit12, !dbg !41

366:                                              ; preds = %358
  %367 = tail call spir_func noundef float @_Z16__spirv_ocl_fminff(float noundef %241, float noundef 1.920000e+02) #7, !dbg !41
  %368 = tail call spir_func noundef float @_Z16__spirv_ocl_fmaxff(float noundef %367, float noundef -1.920000e+02) #7, !dbg !41
  %369 = tail call spir_func noundef float @_Z16__spirv_ocl_rintf(float noundef %368) #7, !dbg !41
  %370 = fptosi float %369 to i32, !dbg !41
  %371 = ashr i32 %370, 1, !dbg !41
  %372 = sub nsw i32 %370, %371, !dbg !41
  %373 = shl i32 %372, 23, !dbg !41
  %374 = add i32 %373, 1065353216, !dbg !41
  %375 = shl i32 %371, 23, !dbg !41
  %376 = add i32 %375, 1065353216, !dbg !41
  %377 = bitcast i32 %374 to float, !dbg !41
  %378 = fmul float %350, %377, !dbg !41
  %379 = bitcast i32 %376 to float, !dbg !41
  %380 = fmul float %378, %379, !dbg !41
  br label %__devicelib_imf_exp2f.exit12, !dbg !41

__devicelib_imf_exp2f.exit12:                     ; preds = %353, %362, %366
  %381 = phi float [ %380, %366 ], [ %357, %353 ], [ %365, %362 ], !dbg !41
  %382 = tail call spir_func noundef float @_Z16__spirv_ocl_rintf(float noundef %242) #7, !dbg !41
  %383 = fsub float %242, %382, !dbg !41
  %384 = fptosi float %382 to i32, !dbg !41
  %385 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef 0x3F24499000000000, float noundef %383, float noundef 0x3F55F48C60000000) #7, !dbg !41
  %386 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %383, float noundef 5.000000e-01, float noundef 1.000000e+00) #7, !dbg !41
  %387 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %385, float noundef %383, float noundef 0x3F83B29960000000) #7, !dbg !41
  %388 = fadd float %386, -1.000000e+00, !dbg !41
  %389 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %387, float noundef %383, float noundef 0x3FAC6AECC0000000) #7, !dbg !41
  %390 = fneg float %388, !dbg !41
  %391 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %383, float noundef 5.000000e-01, float noundef %390) #7, !dbg !41
  %392 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %389, float noundef %383, float noundef 0x3FCEBFBE20000000) #7, !dbg !41
  %393 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %392, float noundef %383, float noundef 0x3FC8B90C40000000) #7, !dbg !41
  %394 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %393, float noundef %383, float noundef %391) #7, !dbg !41
  %395 = fadd float %386, %394, !dbg !41
  %396 = add i32 %384, -127, !dbg !41
  %397 = icmp ult i32 %396, -252, !dbg !41
  br i1 %397, label %403, label %398, !dbg !41

398:                                              ; preds = %__devicelib_imf_exp2f.exit12
  %399 = bitcast float %395 to i32, !dbg !41
  %400 = shl nsw i32 %384, 23, !dbg !41
  %401 = add i32 %400, %399, !dbg !41
  %402 = bitcast i32 %401 to float, !dbg !41
  br label %__devicelib_imf_exp2f.exit11, !dbg !41

403:                                              ; preds = %__devicelib_imf_exp2f.exit12
  %404 = tail call float @llvm.fabs.f32(float %242), !dbg !41
  %405 = bitcast float %404 to i32, !dbg !41
  %406 = icmp samesign ugt i32 %405, 2139095039, !dbg !41
  br i1 %406, label %407, label %411, !dbg !41

407:                                              ; preds = %403
  %408 = fcmp oeq float %242, 0xFFF0000000000000, !dbg !41
  %409 = fadd float %242, %242, !dbg !41
  %410 = select i1 %408, float 0.000000e+00, float %409, !dbg !41
  br label %__devicelib_imf_exp2f.exit11, !dbg !41

411:                                              ; preds = %403
  %412 = tail call spir_func noundef float @_Z16__spirv_ocl_fminff(float noundef %242, float noundef 1.920000e+02) #7, !dbg !41
  %413 = tail call spir_func noundef float @_Z16__spirv_ocl_fmaxff(float noundef %412, float noundef -1.920000e+02) #7, !dbg !41
  %414 = tail call spir_func noundef float @_Z16__spirv_ocl_rintf(float noundef %413) #7, !dbg !41
  %415 = fptosi float %414 to i32, !dbg !41
  %416 = ashr i32 %415, 1, !dbg !41
  %417 = sub nsw i32 %415, %416, !dbg !41
  %418 = shl i32 %417, 23, !dbg !41
  %419 = add i32 %418, 1065353216, !dbg !41
  %420 = shl i32 %416, 23, !dbg !41
  %421 = add i32 %420, 1065353216, !dbg !41
  %422 = bitcast i32 %419 to float, !dbg !41
  %423 = fmul float %395, %422, !dbg !41
  %424 = bitcast i32 %421 to float, !dbg !41
  %425 = fmul float %423, %424, !dbg !41
  br label %__devicelib_imf_exp2f.exit11, !dbg !41

__devicelib_imf_exp2f.exit11:                     ; preds = %398, %407, %411
  %426 = phi float [ %425, %411 ], [ %402, %398 ], [ %410, %407 ], !dbg !41
  %427 = tail call spir_func noundef float @_Z16__spirv_ocl_rintf(float noundef %243) #7, !dbg !41
  %428 = fsub float %243, %427, !dbg !41
  %429 = fptosi float %427 to i32, !dbg !41
  %430 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef 0x3F24499000000000, float noundef %428, float noundef 0x3F55F48C60000000) #7, !dbg !41
  %431 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %428, float noundef 5.000000e-01, float noundef 1.000000e+00) #7, !dbg !41
  %432 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %430, float noundef %428, float noundef 0x3F83B29960000000) #7, !dbg !41
  %433 = fadd float %431, -1.000000e+00, !dbg !41
  %434 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %432, float noundef %428, float noundef 0x3FAC6AECC0000000) #7, !dbg !41
  %435 = fneg float %433, !dbg !41
  %436 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %428, float noundef 5.000000e-01, float noundef %435) #7, !dbg !41
  %437 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %434, float noundef %428, float noundef 0x3FCEBFBE20000000) #7, !dbg !41
  %438 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %437, float noundef %428, float noundef 0x3FC8B90C40000000) #7, !dbg !41
  %439 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %438, float noundef %428, float noundef %436) #7, !dbg !41
  %440 = fadd float %431, %439, !dbg !41
  %441 = add i32 %429, -127, !dbg !41
  %442 = icmp ult i32 %441, -252, !dbg !41
  br i1 %442, label %448, label %443, !dbg !41

443:                                              ; preds = %__devicelib_imf_exp2f.exit11
  %444 = bitcast float %440 to i32, !dbg !41
  %445 = shl nsw i32 %429, 23, !dbg !41
  %446 = add i32 %445, %444, !dbg !41
  %447 = bitcast i32 %446 to float, !dbg !41
  br label %__devicelib_imf_exp2f.exit10, !dbg !41

448:                                              ; preds = %__devicelib_imf_exp2f.exit11
  %449 = tail call float @llvm.fabs.f32(float %243), !dbg !41
  %450 = bitcast float %449 to i32, !dbg !41
  %451 = icmp samesign ugt i32 %450, 2139095039, !dbg !41
  br i1 %451, label %452, label %456, !dbg !41

452:                                              ; preds = %448
  %453 = fcmp oeq float %243, 0xFFF0000000000000, !dbg !41
  %454 = fadd float %243, %243, !dbg !41
  %455 = select i1 %453, float 0.000000e+00, float %454, !dbg !41
  br label %__devicelib_imf_exp2f.exit10, !dbg !41

456:                                              ; preds = %448
  %457 = tail call spir_func noundef float @_Z16__spirv_ocl_fminff(float noundef %243, float noundef 1.920000e+02) #7, !dbg !41
  %458 = tail call spir_func noundef float @_Z16__spirv_ocl_fmaxff(float noundef %457, float noundef -1.920000e+02) #7, !dbg !41
  %459 = tail call spir_func noundef float @_Z16__spirv_ocl_rintf(float noundef %458) #7, !dbg !41
  %460 = fptosi float %459 to i32, !dbg !41
  %461 = ashr i32 %460, 1, !dbg !41
  %462 = sub nsw i32 %460, %461, !dbg !41
  %463 = shl i32 %462, 23, !dbg !41
  %464 = add i32 %463, 1065353216, !dbg !41
  %465 = shl i32 %461, 23, !dbg !41
  %466 = add i32 %465, 1065353216, !dbg !41
  %467 = bitcast i32 %464 to float, !dbg !41
  %468 = fmul float %440, %467, !dbg !41
  %469 = bitcast i32 %466 to float, !dbg !41
  %470 = fmul float %468, %469, !dbg !41
  br label %__devicelib_imf_exp2f.exit10, !dbg !41

__devicelib_imf_exp2f.exit10:                     ; preds = %443, %452, %456
  %471 = phi float [ %470, %456 ], [ %447, %443 ], [ %455, %452 ], !dbg !41
  %472 = tail call spir_func noundef float @_Z16__spirv_ocl_rintf(float noundef %244) #7, !dbg !41
  %473 = fsub float %244, %472, !dbg !41
  %474 = fptosi float %472 to i32, !dbg !41
  %475 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef 0x3F24499000000000, float noundef %473, float noundef 0x3F55F48C60000000) #7, !dbg !41
  %476 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %473, float noundef 5.000000e-01, float noundef 1.000000e+00) #7, !dbg !41
  %477 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %475, float noundef %473, float noundef 0x3F83B29960000000) #7, !dbg !41
  %478 = fadd float %476, -1.000000e+00, !dbg !41
  %479 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %477, float noundef %473, float noundef 0x3FAC6AECC0000000) #7, !dbg !41
  %480 = fneg float %478, !dbg !41
  %481 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %473, float noundef 5.000000e-01, float noundef %480) #7, !dbg !41
  %482 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %479, float noundef %473, float noundef 0x3FCEBFBE20000000) #7, !dbg !41
  %483 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %482, float noundef %473, float noundef 0x3FC8B90C40000000) #7, !dbg !41
  %484 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %483, float noundef %473, float noundef %481) #7, !dbg !41
  %485 = fadd float %476, %484, !dbg !41
  %486 = add i32 %474, -127, !dbg !41
  %487 = icmp ult i32 %486, -252, !dbg !41
  br i1 %487, label %493, label %488, !dbg !41

488:                                              ; preds = %__devicelib_imf_exp2f.exit10
  %489 = bitcast float %485 to i32, !dbg !41
  %490 = shl nsw i32 %474, 23, !dbg !41
  %491 = add i32 %490, %489, !dbg !41
  %492 = bitcast i32 %491 to float, !dbg !41
  br label %__devicelib_imf_exp2f.exit9, !dbg !41

493:                                              ; preds = %__devicelib_imf_exp2f.exit10
  %494 = tail call float @llvm.fabs.f32(float %244), !dbg !41
  %495 = bitcast float %494 to i32, !dbg !41
  %496 = icmp samesign ugt i32 %495, 2139095039, !dbg !41
  br i1 %496, label %497, label %501, !dbg !41

497:                                              ; preds = %493
  %498 = fcmp oeq float %244, 0xFFF0000000000000, !dbg !41
  %499 = fadd float %244, %244, !dbg !41
  %500 = select i1 %498, float 0.000000e+00, float %499, !dbg !41
  br label %__devicelib_imf_exp2f.exit9, !dbg !41

501:                                              ; preds = %493
  %502 = tail call spir_func noundef float @_Z16__spirv_ocl_fminff(float noundef %244, float noundef 1.920000e+02) #7, !dbg !41
  %503 = tail call spir_func noundef float @_Z16__spirv_ocl_fmaxff(float noundef %502, float noundef -1.920000e+02) #7, !dbg !41
  %504 = tail call spir_func noundef float @_Z16__spirv_ocl_rintf(float noundef %503) #7, !dbg !41
  %505 = fptosi float %504 to i32, !dbg !41
  %506 = ashr i32 %505, 1, !dbg !41
  %507 = sub nsw i32 %505, %506, !dbg !41
  %508 = shl i32 %507, 23, !dbg !41
  %509 = add i32 %508, 1065353216, !dbg !41
  %510 = shl i32 %506, 23, !dbg !41
  %511 = add i32 %510, 1065353216, !dbg !41
  %512 = bitcast i32 %509 to float, !dbg !41
  %513 = fmul float %485, %512, !dbg !41
  %514 = bitcast i32 %511 to float, !dbg !41
  %515 = fmul float %513, %514, !dbg !41
  br label %__devicelib_imf_exp2f.exit9, !dbg !41

__devicelib_imf_exp2f.exit9:                      ; preds = %488, %497, %501
  %516 = phi float [ %515, %501 ], [ %492, %488 ], [ %500, %497 ], !dbg !41
  %517 = tail call spir_func noundef float @_Z16__spirv_ocl_rintf(float noundef %245) #7, !dbg !41
  %518 = fsub float %245, %517, !dbg !41
  %519 = fptosi float %517 to i32, !dbg !41
  %520 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef 0x3F24499000000000, float noundef %518, float noundef 0x3F55F48C60000000) #7, !dbg !41
  %521 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %518, float noundef 5.000000e-01, float noundef 1.000000e+00) #7, !dbg !41
  %522 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %520, float noundef %518, float noundef 0x3F83B29960000000) #7, !dbg !41
  %523 = fadd float %521, -1.000000e+00, !dbg !41
  %524 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %522, float noundef %518, float noundef 0x3FAC6AECC0000000) #7, !dbg !41
  %525 = fneg float %523, !dbg !41
  %526 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %518, float noundef 5.000000e-01, float noundef %525) #7, !dbg !41
  %527 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %524, float noundef %518, float noundef 0x3FCEBFBE20000000) #7, !dbg !41
  %528 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %527, float noundef %518, float noundef 0x3FC8B90C40000000) #7, !dbg !41
  %529 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %528, float noundef %518, float noundef %526) #7, !dbg !41
  %530 = fadd float %521, %529, !dbg !41
  %531 = add i32 %519, -127, !dbg !41
  %532 = icmp ult i32 %531, -252, !dbg !41
  br i1 %532, label %538, label %533, !dbg !41

533:                                              ; preds = %__devicelib_imf_exp2f.exit9
  %534 = bitcast float %530 to i32, !dbg !41
  %535 = shl nsw i32 %519, 23, !dbg !41
  %536 = add i32 %535, %534, !dbg !41
  %537 = bitcast i32 %536 to float, !dbg !41
  br label %__devicelib_imf_exp2f.exit8, !dbg !41

538:                                              ; preds = %__devicelib_imf_exp2f.exit9
  %539 = tail call float @llvm.fabs.f32(float %245), !dbg !41
  %540 = bitcast float %539 to i32, !dbg !41
  %541 = icmp samesign ugt i32 %540, 2139095039, !dbg !41
  br i1 %541, label %542, label %546, !dbg !41

542:                                              ; preds = %538
  %543 = fcmp oeq float %245, 0xFFF0000000000000, !dbg !41
  %544 = fadd float %245, %245, !dbg !41
  %545 = select i1 %543, float 0.000000e+00, float %544, !dbg !41
  br label %__devicelib_imf_exp2f.exit8, !dbg !41

546:                                              ; preds = %538
  %547 = tail call spir_func noundef float @_Z16__spirv_ocl_fminff(float noundef %245, float noundef 1.920000e+02) #7, !dbg !41
  %548 = tail call spir_func noundef float @_Z16__spirv_ocl_fmaxff(float noundef %547, float noundef -1.920000e+02) #7, !dbg !41
  %549 = tail call spir_func noundef float @_Z16__spirv_ocl_rintf(float noundef %548) #7, !dbg !41
  %550 = fptosi float %549 to i32, !dbg !41
  %551 = ashr i32 %550, 1, !dbg !41
  %552 = sub nsw i32 %550, %551, !dbg !41
  %553 = shl i32 %552, 23, !dbg !41
  %554 = add i32 %553, 1065353216, !dbg !41
  %555 = shl i32 %551, 23, !dbg !41
  %556 = add i32 %555, 1065353216, !dbg !41
  %557 = bitcast i32 %554 to float, !dbg !41
  %558 = fmul float %530, %557, !dbg !41
  %559 = bitcast i32 %556 to float, !dbg !41
  %560 = fmul float %558, %559, !dbg !41
  br label %__devicelib_imf_exp2f.exit8, !dbg !41

__devicelib_imf_exp2f.exit8:                      ; preds = %533, %542, %546
  %561 = phi float [ %560, %546 ], [ %537, %533 ], [ %545, %542 ], !dbg !41
  %562 = tail call spir_func noundef float @_Z16__spirv_ocl_rintf(float noundef %246) #7, !dbg !41
  %563 = fsub float %246, %562, !dbg !41
  %564 = fptosi float %562 to i32, !dbg !41
  %565 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef 0x3F24499000000000, float noundef %563, float noundef 0x3F55F48C60000000) #7, !dbg !41
  %566 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %563, float noundef 5.000000e-01, float noundef 1.000000e+00) #7, !dbg !41
  %567 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %565, float noundef %563, float noundef 0x3F83B29960000000) #7, !dbg !41
  %568 = fadd float %566, -1.000000e+00, !dbg !41
  %569 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %567, float noundef %563, float noundef 0x3FAC6AECC0000000) #7, !dbg !41
  %570 = fneg float %568, !dbg !41
  %571 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %563, float noundef 5.000000e-01, float noundef %570) #7, !dbg !41
  %572 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %569, float noundef %563, float noundef 0x3FCEBFBE20000000) #7, !dbg !41
  %573 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %572, float noundef %563, float noundef 0x3FC8B90C40000000) #7, !dbg !41
  %574 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %573, float noundef %563, float noundef %571) #7, !dbg !41
  %575 = fadd float %566, %574, !dbg !41
  %576 = add i32 %564, -127, !dbg !41
  %577 = icmp ult i32 %576, -252, !dbg !41
  br i1 %577, label %583, label %578, !dbg !41

578:                                              ; preds = %__devicelib_imf_exp2f.exit8
  %579 = bitcast float %575 to i32, !dbg !41
  %580 = shl nsw i32 %564, 23, !dbg !41
  %581 = add i32 %580, %579, !dbg !41
  %582 = bitcast i32 %581 to float, !dbg !41
  br label %__devicelib_imf_exp2f.exit, !dbg !41

583:                                              ; preds = %__devicelib_imf_exp2f.exit8
  %584 = tail call float @llvm.fabs.f32(float %246), !dbg !41
  %585 = bitcast float %584 to i32, !dbg !41
  %586 = icmp samesign ugt i32 %585, 2139095039, !dbg !41
  br i1 %586, label %587, label %591, !dbg !41

587:                                              ; preds = %583
  %588 = fcmp oeq float %246, 0xFFF0000000000000, !dbg !41
  %589 = fadd float %246, %246, !dbg !41
  %590 = select i1 %588, float 0.000000e+00, float %589, !dbg !41
  br label %__devicelib_imf_exp2f.exit, !dbg !41

591:                                              ; preds = %583
  %592 = tail call spir_func noundef float @_Z16__spirv_ocl_fminff(float noundef %246, float noundef 1.920000e+02) #7, !dbg !41
  %593 = tail call spir_func noundef float @_Z16__spirv_ocl_fmaxff(float noundef %592, float noundef -1.920000e+02) #7, !dbg !41
  %594 = tail call spir_func noundef float @_Z16__spirv_ocl_rintf(float noundef %593) #7, !dbg !41
  %595 = fptosi float %594 to i32, !dbg !41
  %596 = ashr i32 %595, 1, !dbg !41
  %597 = sub nsw i32 %595, %596, !dbg !41
  %598 = shl i32 %597, 23, !dbg !41
  %599 = add i32 %598, 1065353216, !dbg !41
  %600 = shl i32 %596, 23, !dbg !41
  %601 = add i32 %600, 1065353216, !dbg !41
  %602 = bitcast i32 %599 to float, !dbg !41
  %603 = fmul float %575, %602, !dbg !41
  %604 = bitcast i32 %601 to float, !dbg !41
  %605 = fmul float %603, %604, !dbg !41
  br label %__devicelib_imf_exp2f.exit, !dbg !41

__devicelib_imf_exp2f.exit:                       ; preds = %578, %587, %591
  %606 = phi float [ %605, %591 ], [ %582, %578 ], [ %590, %587 ], !dbg !41
  %607 = fmul float %114, %291, !dbg !42
  %608 = fmul float %119, %336, !dbg !42
  %609 = fmul float %124, %381, !dbg !42
  %610 = fmul float %129, %426, !dbg !42
  %611 = fmul float %134, %471, !dbg !42
  %612 = fmul float %139, %516, !dbg !42
  %613 = fmul float %144, %561, !dbg !42
  %614 = fmul float %149, %606, !dbg !42
  %615 = select i1 %35, float %607, float 0.000000e+00, !dbg !43
  %616 = select i1 %35, float %608, float 0.000000e+00, !dbg !43
  %617 = select i1 %35, float %609, float 0.000000e+00, !dbg !43
  %618 = select i1 %35, float %610, float 0.000000e+00, !dbg !43
  %619 = select i1 %35, float %611, float 0.000000e+00, !dbg !43
  %620 = select i1 %35, float %612, float 0.000000e+00, !dbg !43
  %621 = select i1 %35, float %613, float 0.000000e+00, !dbg !43
  %622 = select i1 %35, float %614, float 0.000000e+00, !dbg !43
  %623 = tail call spir_func float @_Z27__spirv_GroupNonUniformFAddiifj(i32 3, i32 3, float %615, i32 16) #6, !dbg !44
  %624 = tail call spir_func float @_Z27__spirv_GroupNonUniformFAddiifj(i32 3, i32 3, float %616, i32 16) #6, !dbg !44
  %625 = tail call spir_func float @_Z27__spirv_GroupNonUniformFAddiifj(i32 3, i32 3, float %617, i32 16) #6, !dbg !44
  %626 = tail call spir_func float @_Z27__spirv_GroupNonUniformFAddiifj(i32 3, i32 3, float %618, i32 16) #6, !dbg !44
  %627 = tail call spir_func float @_Z27__spirv_GroupNonUniformFAddiifj(i32 3, i32 3, float %619, i32 16) #6, !dbg !44
  %628 = tail call spir_func float @_Z27__spirv_GroupNonUniformFAddiifj(i32 3, i32 3, float %620, i32 16) #6, !dbg !44
  %629 = tail call spir_func float @_Z27__spirv_GroupNonUniformFAddiifj(i32 3, i32 3, float %621, i32 16) #6, !dbg !44
  %630 = tail call spir_func float @_Z27__spirv_GroupNonUniformFAddiifj(i32 3, i32 3, float %622, i32 16) #6, !dbg !44
  tail call spir_func void @_Z7barrierj(i32 1) #6, !dbg !48
  %631 = or disjoint i32 %62, %64, !dbg !48
  %632 = zext nneg i32 %631 to i64, !dbg !48
  %633 = getelementptr inbounds nuw float, ptr addrspace(3) %8, i64 %632, !dbg !48
  %634 = insertelement <1 x float> poison, float %623, i64 0, !dbg !48
  store <1 x float> %634, ptr addrspace(3) %633, align 4, !dbg !48
  %635 = getelementptr inbounds nuw i8, ptr addrspace(3) %633, i64 64, !dbg !48
  %636 = insertelement <1 x float> poison, float %624, i64 0, !dbg !48
  store <1 x float> %636, ptr addrspace(3) %635, align 4, !dbg !48
  %637 = getelementptr inbounds nuw i8, ptr addrspace(3) %633, i64 128, !dbg !48
  %638 = insertelement <1 x float> poison, float %625, i64 0, !dbg !48
  store <1 x float> %638, ptr addrspace(3) %637, align 4, !dbg !48
  %639 = getelementptr inbounds nuw i8, ptr addrspace(3) %633, i64 192, !dbg !48
  %640 = insertelement <1 x float> poison, float %626, i64 0, !dbg !48
  store <1 x float> %640, ptr addrspace(3) %639, align 4, !dbg !48
  %641 = getelementptr inbounds nuw i8, ptr addrspace(3) %633, i64 256, !dbg !48
  %642 = insertelement <1 x float> poison, float %627, i64 0, !dbg !48
  store <1 x float> %642, ptr addrspace(3) %641, align 4, !dbg !48
  %643 = getelementptr inbounds nuw i8, ptr addrspace(3) %633, i64 320, !dbg !48
  %644 = insertelement <1 x float> poison, float %628, i64 0, !dbg !48
  store <1 x float> %644, ptr addrspace(3) %643, align 4, !dbg !48
  %645 = getelementptr inbounds nuw i8, ptr addrspace(3) %633, i64 384, !dbg !48
  %646 = insertelement <1 x float> poison, float %629, i64 0, !dbg !48
  store <1 x float> %646, ptr addrspace(3) %645, align 4, !dbg !48
  %647 = getelementptr inbounds nuw i8, ptr addrspace(3) %633, i64 448, !dbg !48
  %648 = insertelement <1 x float> poison, float %630, i64 0, !dbg !48
  store <1 x float> %648, ptr addrspace(3) %647, align 4, !dbg !48
  tail call spir_func void @_Z7barrierj(i32 1) #6, !dbg !48
  br i1 %58, label %649, label %661, !dbg !48

649:                                              ; preds = %__devicelib_imf_exp2f.exit
  %650 = and i64 %13, 127, !dbg !48
  %651 = getelementptr inbounds nuw float, ptr addrspace(3) %8, i64 %650, !dbg !48
  %652 = load float, ptr addrspace(3) %651, align 4, !dbg !48
  %653 = fcmp oeq float %168, 0xFFF0000000000000, !dbg !38
  %654 = extractelement <1 x float> %222, i64 0, !dbg !37
  %655 = select i1 %653, float 1.000000e+00, float %654, !dbg !49
  %656 = fdiv float %652, %655, !dbg !50
  %657 = tail call spir_func i16 @_Z27__spirv_ConvertFToBF16INTELf(float %656) #5
  %658 = insertelement <1 x i16> poison, i16 %657, i64 0, !dbg !48
  %659 = sext i32 %21 to i64, !dbg !51
  %660 = getelementptr bfloat, ptr addrspace(1) %4, i64 %659, !dbg !51
  store <1 x i16> %658, ptr addrspace(1) %660, align 2, !dbg !48
  br label %661, !dbg !48

661:                                              ; preds = %649, %__devicelib_imf_exp2f.exit
  ret void, !dbg !52
}

; Function Attrs: convergent mustprogress nofree nounwind willreturn memory(none)
declare dso_local spir_func noundef float @_Z16__spirv_ocl_rintf(float noundef) local_unnamed_addr #3

; Function Attrs: convergent mustprogress nofree nounwind willreturn memory(none)
declare dso_local spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef, float noundef, float noundef) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #4

; Function Attrs: convergent mustprogress nofree nounwind willreturn memory(none)
declare dso_local spir_func noundef float @_Z16__spirv_ocl_fminff(float noundef, float noundef) local_unnamed_addr #3

; Function Attrs: convergent mustprogress nofree nounwind willreturn memory(none)
declare dso_local spir_func noundef float @_Z16__spirv_ocl_fmaxff(float noundef, float noundef) local_unnamed_addr #3

attributes #0 = { mustprogress nofree nosync nounwind willreturn memory(none) }
attributes #1 = { convergent mustprogress nounwind willreturn }
attributes #2 = { mustprogress nounwind willreturn }
attributes #3 = { convergent mustprogress nofree nounwind willreturn memory(none) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #5 = { nounwind willreturn memory(none) }
attributes #6 = { convergent nounwind willreturn }
attributes #7 = { convergent nounwind willreturn memory(none) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3, !4, !5}
!opencl.spir.version = !{!6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6}
!spirv.Source = !{!7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7}
!llvm.ident = !{!8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "cjcxabxt5vbzvoukznvtn74s7574miu7aolwxzg2dwdrymcmrbir.py", directory: "/tmp/torchinductor_jovyan/jc")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 1, !"wchar_size", i32 4}
!4 = !{i32 1, !"sycl-device", i32 1}
!5 = !{i32 7, !"frame-pointer", i32 2}
!6 = !{i32 1, i32 2}
!7 = !{i32 3, i32 100000}
!8 = !{!"Intel(R) oneAPI DPC++/C++ Compiler 2025.0.0 (2025.0.0.20241008)"}
!9 = !DISubprogram(name: "_Z27__spirv_ConvertFToBF16INTELf", linkageName: "_Z27__spirv_ConvertFToBF16INTELf", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagOptimized)
!10 = !DISubroutineType(cc: DW_CC_normal, types: !11)
!11 = !{}
!12 = !DISubprogram(name: "_Z27__spirv_GroupNonUniformFAddiifj", linkageName: "_Z27__spirv_GroupNonUniformFAddiifj", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagOptimized)
!13 = !DISubprogram(name: "_Z7barrierj", linkageName: "_Z7barrierj", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagOptimized)
!14 = !DISubprogram(name: "_Z12get_local_idj", linkageName: "_Z12get_local_idj", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagOptimized)
!15 = !DISubprogram(name: "_Z12get_group_idj", linkageName: "_Z12get_group_idj", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagOptimized)
!16 = distinct !DISubprogram(name: "triton_per_fused__to_copy_add_cat_cos_mul_neg_sin_unsqueeze_7", linkageName: "triton_per_fused__to_copy_add_cat_cos_mul_neg_sin_unsqueeze_7", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!17 = !{i32 32}
!18 = !{i64 256, i64 1, i64 1}
!19 = !DILocation(line: 24, column: 28, scope: !16)
!20 = !DILocation(line: 24, column: 33, scope: !16)
!21 = !DILocation(line: 25, column: 44, scope: !16)
!22 = !DILocation(line: 25, column: 23, scope: !16)
!23 = !DILocation(line: 27, column: 38, scope: !16)
!24 = !DILocation(line: 29, column: 25, scope: !16)
!25 = !DILocation(line: 34, column: 19, scope: !16)
!26 = !DILocation(line: 35, column: 40, scope: !16)
!27 = !DILocation(line: 35, column: 35, scope: !16)
!28 = !DILocation(line: 35, column: 30, scope: !16)
!29 = !DILocation(line: 35, column: 47, scope: !16)
!30 = !DILocation(line: 36, column: 30, scope: !16)
!31 = !DILocation(line: 36, column: 35, scope: !16)
!32 = !DILocation(line: 37, column: 45, scope: !16)
!33 = !DILocation(line: 37, column: 38, scope: !16)
!34 = !DILocation(line: 37, column: 35, scope: !16)
!35 = !DILocation(line: 37, column: 30, scope: !16)
!36 = !DILocation(line: 38, column: 31, scope: !16)
!37 = !DILocation(line: 38, column: 36, scope: !16)
!38 = !DILocation(line: 40, column: 19, scope: !16)
!39 = !DILocation(line: 41, column: 18, scope: !16)
!40 = !DILocation(line: 43, column: 32, scope: !16)
!41 = !DILocation(line: 44, column: 26, scope: !16)
!42 = !DILocation(line: 45, column: 18, scope: !16)
!43 = !DILocation(line: 47, column: 37, scope: !16)
!44 = !DILocation(line: 290, column: 36, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !16, file: !46, discriminator: 0)
!46 = !DIFile(filename: "standard.py", directory: "/home/jovyan/intel-xpu-backend-for-triton/python/triton/language")
!47 = !DILocation(line: 48, column: 26, scope: !16)
!48 = !DILocation(line: 53, column: 37, scope: !16)
!49 = !DILocation(line: 50, column: 34, scope: !16)
!50 = !DILocation(line: 51, column: 21, scope: !16)
!51 = !DILocation(line: 53, column: 25, scope: !16)
!52 = !DILocation(line: 53, column: 4, scope: !16)
