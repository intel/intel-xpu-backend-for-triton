#loc = loc("/tmp/torchinductor_jovyan/jc/cjcxabxt5vbzvoukznvtn74s7574miu7aolwxzg2dwdrymcmrbir.py":18:0)
#loc42 = loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":284:0)
#loc44 = loc(unknown)
#loc47 = loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":259:0)
module {
  tt.func public @triton_per_fused__to_copy_add_cat_cos_mul_neg_sin_unsqueeze_7(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_jovyan/jc/cjcxabxt5vbzvoukznvtn74s7574miu7aolwxzg2dwdrymcmrbir.py":18:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_jovyan/jc/cjcxabxt5vbzvoukznvtn74s7574miu7aolwxzg2dwdrymcmrbir.py":18:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_jovyan/jc/cjcxabxt5vbzvoukznvtn74s7574miu7aolwxzg2dwdrymcmrbir.py":18:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_jovyan/jc/cjcxabxt5vbzvoukznvtn74s7574miu7aolwxzg2dwdrymcmrbir.py":18:0), %arg4: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_jovyan/jc/cjcxabxt5vbzvoukznvtn74s7574miu7aolwxzg2dwdrymcmrbir.py":18:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_jovyan/jc/cjcxabxt5vbzvoukznvtn74s7574miu7aolwxzg2dwdrymcmrbir.py":18:0), %arg6: i32 loc("/tmp/torchinductor_jovyan/jc/cjcxabxt5vbzvoukznvtn74s7574miu7aolwxzg2dwdrymcmrbir.py":18:0)) attributes {noinline = false} {
    %c4096_i32 = arith.constant 4096 : i32 loc(#loc1)
    %c14_i32 = arith.constant 14 : i32 loc(#loc2)
    %0 = tt.get_program_id x : i32 loc(#loc3)
    %c128_i32 = arith.constant 128 : i32 loc(#loc4)
    %c128_i32_0 = arith.constant 128 : i32 loc(#loc4)
    %1 = arith.muli %0, %c128_i32_0 : i32 loc(#loc4)
    %2 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32> loc(#loc5)
    %3 = tt.expand_dims %2 {axis = 1 : i32} : tensor<128xi32> -> tensor<128x1xi32> loc(#loc6)
    %4 = tt.splat %1 : i32 -> tensor<128x1xi32> loc(#loc7)
    %5 = arith.addi %4, %3 : tensor<128x1xi32> loc(#loc7)
    %true = arith.constant true loc(#loc8)
    %cst = arith.constant dense<true> : tensor<128x16xi1> loc(#loc8)
    %6 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc9)
    %7 = tt.expand_dims %6 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc10)
    %c0_i32 = arith.constant 0 : i32 loc(#loc11)
    %cst_1 = arith.constant dense<14> : tensor<1x16xi32> loc(#loc12)
    %8 = arith.cmpi slt, %7, %cst_1 : tensor<1x16xi32> loc(#loc12)
    %c128_i32_2 = arith.constant 128 : i32 loc(#loc13)
    %c128_i32_3 = arith.constant 128 : i32 loc(#loc13)
    %cst_4 = arith.constant dense<128> : tensor<128x1xi32> loc(#loc13)
    %9 = arith.divsi %5, %cst_4 : tensor<128x1xi32> loc(#loc13)
    %c4096_i32_5 = arith.constant 4096 : i32 loc(#loc14)
    %c4096_i32_6 = arith.constant 4096 : i32 loc(#loc14)
    %cst_7 = arith.constant dense<4096> : tensor<1x16xi32> loc(#loc14)
    %10 = arith.muli %cst_7, %7 : tensor<1x16xi32> loc(#loc14)
    %11 = tt.broadcast %5 : tensor<128x1xi32> -> tensor<128x16xi32> loc(#loc15)
    %12 = tt.broadcast %10 : tensor<1x16xi32> -> tensor<128x16xi32> loc(#loc15)
    %13 = arith.addi %11, %12 : tensor<128x16xi32> loc(#loc15)
    %14 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<128x16x!tt.ptr<f32>> loc(#loc16)
    %15 = tt.addptr %14, %13 : tensor<128x16x!tt.ptr<f32>>, tensor<128x16xi32> loc(#loc16)
    %cst_8 = arith.constant 0.000000e+00 : f32 loc(#loc17)
    %16 = tt.broadcast %8 : tensor<1x16xi1> -> tensor<128x16xi1> loc(#loc17)
    %cst_9 = arith.constant dense<0.000000e+00> : tensor<128x16xf32> loc(#loc17)
    %17 = tt.load %15, %16, %cst_9 : tensor<128x16x!tt.ptr<f32>> loc(#loc17)
    %18 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<128x1x!tt.ptr<f32>> loc(#loc18)
    %19 = tt.addptr %18, %9 : tensor<128x1x!tt.ptr<f32>>, tensor<128x1xi32> loc(#loc18)
    %20 = tt.load %19 evictionPolicy = evict_last : tensor<128x1x!tt.ptr<f32>> loc(#loc19)
    %c32_i32 = arith.constant 32 : i32 loc(#loc20)
    %c32_i32_10 = arith.constant 32 : i32 loc(#loc20)
    %cst_11 = arith.constant dense<32> : tensor<1x16xi32> loc(#loc20)
    %21 = arith.muli %cst_11, %7 : tensor<1x16xi32> loc(#loc20)
    %22 = tt.broadcast %9 : tensor<128x1xi32> -> tensor<128x16xi32> loc(#loc21)
    %23 = tt.broadcast %21 : tensor<1x16xi32> -> tensor<128x16xi32> loc(#loc21)
    %24 = arith.addi %22, %23 : tensor<128x16xi32> loc(#loc21)
    %25 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<128x16x!tt.ptr<f32>> loc(#loc22)
    %26 = tt.addptr %25, %24 : tensor<128x16x!tt.ptr<f32>>, tensor<128x16xi32> loc(#loc22)
    %cst_12 = arith.constant 0.000000e+00 : f32 loc(#loc23)
    %27 = tt.broadcast %8 : tensor<1x16xi1> -> tensor<128x16xi1> loc(#loc23)
    %cst_13 = arith.constant dense<0.000000e+00> : tensor<128x16xf32> loc(#loc23)
    %28 = tt.load %26, %27, %cst_13 evictionPolicy = evict_last : tensor<128x16x!tt.ptr<f32>> loc(#loc23)
    %29 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<128x1x!tt.ptr<f32>> loc(#loc24)
    %30 = tt.addptr %29, %9 : tensor<128x1x!tt.ptr<f32>>, tensor<128x1xi32> loc(#loc24)
    %31 = tt.load %30 evictionPolicy = evict_last : tensor<128x1x!tt.ptr<f32>> loc(#loc25)
    %cst_14 = arith.constant 0xFF800000 : f32 loc(#loc26)
    %cst_15 = arith.constant dense<0xFF800000> : tensor<128x1xf32> loc(#loc27)
    %32 = arith.cmpf oeq, %20, %cst_15 : tensor<128x1xf32> loc(#loc27)
    %33 = tt.broadcast %20 : tensor<128x1xf32> -> tensor<128x16xf32> loc(#loc28)
    %34 = arith.subf %28, %33 : tensor<128x16xf32> loc(#loc28)
    %cst_16 = arith.constant 0.000000e+00 : f32 loc(#loc29)
    %cst_17 = arith.constant dense<0.000000e+00> : tensor<128x16xf32> loc(#loc30)
    %35 = tt.broadcast %32 : tensor<128x1xi1> -> tensor<128x16xi1> loc(#loc30)
    %36 = arith.select %35, %cst_17, %34 : tensor<128x16xi1>, tensor<128x16xf32> loc(#loc30)
    %37 = tt.extern_elementwise %36 {libname = "", libpath = "", pure = true, symbol = "__imf_exp2f"} : (tensor<128x16xf32>) -> tensor<128x16xf32> loc(#loc31)
    %38 = arith.mulf %17, %37 : tensor<128x16xf32> loc(#loc32)
    %c0_i32_18 = arith.constant 0 : i32 loc(#loc33)
    %cst_19 = arith.constant 0.000000e+00 : f32 loc(#loc33)
    %cst_20 = arith.constant dense<0.000000e+00> : tensor<128x16xf32> loc(#loc33)
    %39 = tt.broadcast %8 : tensor<1x16xi1> -> tensor<128x16xi1> loc(#loc33)
    %40 = arith.select %39, %38, %cst_20 : tensor<128x16xi1>, tensor<128x16xf32> loc(#loc33)
    %41 = tt.call @"triton.language.standard.sum__fp32S128_16S__(1,)cconstexpr_1__(2,)cconstexpr_False__(3,)cNone"(%40) : (tensor<128x16xf32>) -> tensor<128xf32> loc(#loc34)
    %42 = tt.expand_dims %41 {axis = 1 : i32} : tensor<128xf32> -> tensor<128x1xf32> loc(#loc35)
    %cst_21 = arith.constant 1.000000e+00 : f32 loc(#loc36)
    %cst_22 = arith.constant dense<1.000000e+00> : tensor<128x1xf32> loc(#loc37)
    %43 = arith.select %32, %cst_22, %31 : tensor<128x1xi1>, tensor<128x1xf32> loc(#loc37)
    %44 = arith.divf %42, %43 : tensor<128x1xf32> loc(#loc38)
    %45 = tt.splat %arg4 : !tt.ptr<bf16> -> tensor<128x1x!tt.ptr<bf16>> loc(#loc39)
    %46 = tt.addptr %45, %5 : tensor<128x1x!tt.ptr<bf16>>, tensor<128x1xi32> loc(#loc39)
    %47 = arith.truncf %44 : tensor<128x1xf32> to tensor<128x1xbf16> loc(#loc40)
    tt.store %46, %47 : tensor<128x1x!tt.ptr<bf16>> loc(#loc40)
    tt.return loc(#loc41)
  } loc(#loc)
  tt.func private @"triton.language.standard.sum__fp32S128_16S__(1,)cconstexpr_1__(2,)cconstexpr_False__(3,)cNone"(%arg0: tensor<128x16xf32> loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":284:0)) -> tensor<128xf32> attributes {noinline = false} {
    %0 = "tt.reduce"(%arg0) <{axis = 1 : i32}> ({
    ^bb0(%arg1: f32 loc(unknown), %arg2: f32 loc(unknown)):
      %2 = tt.call @triton.language.standard._sum_combine__fp32_fp32__(%arg1, %arg2) : (f32, f32) -> f32 loc(#loc43)
      tt.reduce.return %2 : f32 loc(#loc43)
    }) : (tensor<128x16xf32>) -> tensor<128xf32> loc(#loc43)
    tt.return %0 : tensor<128xf32> loc(#loc45)
  ^bb1:  // no predecessors
    %1 = ub.poison : tensor<128xf32> loc(#loc46)
    tt.return %1 : tensor<128xf32> loc(#loc46)
  } loc(#loc42)
  tt.func private @triton.language.standard._sum_combine__fp32_fp32__(%arg0: f32 loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":259:0), %arg1: f32 loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":259:0)) -> f32 attributes {noinline = false} {
    %0 = arith.addf %arg0, %arg1 : f32 loc(#loc48)
    tt.return %0 : f32 loc(#loc49)
  ^bb1:  // no predecessors
    %1 = ub.poison : f32 loc(#loc50)
    tt.return %1 : f32 loc(#loc50)
  } loc(#loc47)
} loc(#loc)
#loc1 = loc("/tmp/torchinductor_jovyan/jc/cjcxabxt5vbzvoukznvtn74s7574miu7aolwxzg2dwdrymcmrbir.py":19:13)
#loc2 = loc("/tmp/torchinductor_jovyan/jc/cjcxabxt5vbzvoukznvtn74s7574miu7aolwxzg2dwdrymcmrbir.py":20:15)
#loc3 = loc("/tmp/torchinductor_jovyan/jc/cjcxabxt5vbzvoukznvtn74s7574miu7aolwxzg2dwdrymcmrbir.py":24:28)
#loc4 = loc("/tmp/torchinductor_jovyan/jc/cjcxabxt5vbzvoukznvtn74s7574miu7aolwxzg2dwdrymcmrbir.py":24:33)
#loc5 = loc("/tmp/torchinductor_jovyan/jc/cjcxabxt5vbzvoukznvtn74s7574miu7aolwxzg2dwdrymcmrbir.py":25:36)
#loc6 = loc("/tmp/torchinductor_jovyan/jc/cjcxabxt5vbzvoukznvtn74s7574miu7aolwxzg2dwdrymcmrbir.py":25:44)
#loc7 = loc("/tmp/torchinductor_jovyan/jc/cjcxabxt5vbzvoukznvtn74s7574miu7aolwxzg2dwdrymcmrbir.py":25:23)
#loc8 = loc("/tmp/torchinductor_jovyan/jc/cjcxabxt5vbzvoukznvtn74s7574miu7aolwxzg2dwdrymcmrbir.py":26:46)
#loc9 = loc("/tmp/torchinductor_jovyan/jc/cjcxabxt5vbzvoukznvtn74s7574miu7aolwxzg2dwdrymcmrbir.py":27:28)
#loc10 = loc("/tmp/torchinductor_jovyan/jc/cjcxabxt5vbzvoukznvtn74s7574miu7aolwxzg2dwdrymcmrbir.py":27:38)
#loc11 = loc("/tmp/torchinductor_jovyan/jc/cjcxabxt5vbzvoukznvtn74s7574miu7aolwxzg2dwdrymcmrbir.py":28:16)
#loc12 = loc("/tmp/torchinductor_jovyan/jc/cjcxabxt5vbzvoukznvtn74s7574miu7aolwxzg2dwdrymcmrbir.py":29:25)
#loc13 = loc("/tmp/torchinductor_jovyan/jc/cjcxabxt5vbzvoukznvtn74s7574miu7aolwxzg2dwdrymcmrbir.py":34:19)
#loc14 = loc("/tmp/torchinductor_jovyan/jc/cjcxabxt5vbzvoukznvtn74s7574miu7aolwxzg2dwdrymcmrbir.py":35:40)
#loc15 = loc("/tmp/torchinductor_jovyan/jc/cjcxabxt5vbzvoukznvtn74s7574miu7aolwxzg2dwdrymcmrbir.py":35:35)
#loc16 = loc("/tmp/torchinductor_jovyan/jc/cjcxabxt5vbzvoukznvtn74s7574miu7aolwxzg2dwdrymcmrbir.py":35:30)
#loc17 = loc("/tmp/torchinductor_jovyan/jc/cjcxabxt5vbzvoukznvtn74s7574miu7aolwxzg2dwdrymcmrbir.py":35:47)
#loc18 = loc("/tmp/torchinductor_jovyan/jc/cjcxabxt5vbzvoukznvtn74s7574miu7aolwxzg2dwdrymcmrbir.py":36:30)
#loc19 = loc("/tmp/torchinductor_jovyan/jc/cjcxabxt5vbzvoukznvtn74s7574miu7aolwxzg2dwdrymcmrbir.py":36:35)
#loc20 = loc("/tmp/torchinductor_jovyan/jc/cjcxabxt5vbzvoukznvtn74s7574miu7aolwxzg2dwdrymcmrbir.py":37:38)
#loc21 = loc("/tmp/torchinductor_jovyan/jc/cjcxabxt5vbzvoukznvtn74s7574miu7aolwxzg2dwdrymcmrbir.py":37:35)
#loc22 = loc("/tmp/torchinductor_jovyan/jc/cjcxabxt5vbzvoukznvtn74s7574miu7aolwxzg2dwdrymcmrbir.py":37:30)
#loc23 = loc("/tmp/torchinductor_jovyan/jc/cjcxabxt5vbzvoukznvtn74s7574miu7aolwxzg2dwdrymcmrbir.py":37:45)
#loc24 = loc("/tmp/torchinductor_jovyan/jc/cjcxabxt5vbzvoukznvtn74s7574miu7aolwxzg2dwdrymcmrbir.py":38:31)
#loc25 = loc("/tmp/torchinductor_jovyan/jc/cjcxabxt5vbzvoukznvtn74s7574miu7aolwxzg2dwdrymcmrbir.py":38:36)
#loc26 = loc("/tmp/torchinductor_jovyan/jc/cjcxabxt5vbzvoukznvtn74s7574miu7aolwxzg2dwdrymcmrbir.py":39:11)
#loc27 = loc("/tmp/torchinductor_jovyan/jc/cjcxabxt5vbzvoukznvtn74s7574miu7aolwxzg2dwdrymcmrbir.py":40:19)
#loc28 = loc("/tmp/torchinductor_jovyan/jc/cjcxabxt5vbzvoukznvtn74s7574miu7aolwxzg2dwdrymcmrbir.py":41:18)
#loc29 = loc("/tmp/torchinductor_jovyan/jc/cjcxabxt5vbzvoukznvtn74s7574miu7aolwxzg2dwdrymcmrbir.py":42:11)
#loc30 = loc("/tmp/torchinductor_jovyan/jc/cjcxabxt5vbzvoukznvtn74s7574miu7aolwxzg2dwdrymcmrbir.py":43:32)
#loc31 = loc("/tmp/torchinductor_jovyan/jc/cjcxabxt5vbzvoukznvtn74s7574miu7aolwxzg2dwdrymcmrbir.py":44:26)
#loc32 = loc("/tmp/torchinductor_jovyan/jc/cjcxabxt5vbzvoukznvtn74s7574miu7aolwxzg2dwdrymcmrbir.py":45:18)
#loc33 = loc("/tmp/torchinductor_jovyan/jc/cjcxabxt5vbzvoukznvtn74s7574miu7aolwxzg2dwdrymcmrbir.py":47:37)
#loc34 = loc("/tmp/torchinductor_jovyan/jc/cjcxabxt5vbzvoukznvtn74s7574miu7aolwxzg2dwdrymcmrbir.py":48:26)
#loc35 = loc("/tmp/torchinductor_jovyan/jc/cjcxabxt5vbzvoukznvtn74s7574miu7aolwxzg2dwdrymcmrbir.py":48:29)
#loc36 = loc("/tmp/torchinductor_jovyan/jc/cjcxabxt5vbzvoukznvtn74s7574miu7aolwxzg2dwdrymcmrbir.py":49:12)
#loc37 = loc("/tmp/torchinductor_jovyan/jc/cjcxabxt5vbzvoukznvtn74s7574miu7aolwxzg2dwdrymcmrbir.py":50:34)
#loc38 = loc("/tmp/torchinductor_jovyan/jc/cjcxabxt5vbzvoukznvtn74s7574miu7aolwxzg2dwdrymcmrbir.py":51:21)
#loc39 = loc("/tmp/torchinductor_jovyan/jc/cjcxabxt5vbzvoukznvtn74s7574miu7aolwxzg2dwdrymcmrbir.py":53:25)
#loc40 = loc("/tmp/torchinductor_jovyan/jc/cjcxabxt5vbzvoukznvtn74s7574miu7aolwxzg2dwdrymcmrbir.py":53:37)
#loc41 = loc("/tmp/torchinductor_jovyan/jc/cjcxabxt5vbzvoukznvtn74s7574miu7aolwxzg2dwdrymcmrbir.py":53:4)
#loc43 = loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":290:36)
#loc45 = loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":290:11)
#loc46 = loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":290:4)
#loc48 = loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":260:15)
#loc49 = loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":260:11)
#loc50 = loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":260:4)
