; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-n8:16:32:64"
target triple = "spir64-unknown-unknown"

@assertFunc_ = internal addrspace(1) constant [8 x i8] c"unknown\00"
@assertFile_ = internal addrspace(1) constant [85 x i8] c"/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py\00"
@assertMessage_ = internal addrspace(1) constant [114 x i8] c"index out of bounds: 0 <= tl.where(ks2 + r0_1 + ks0*x0 < 0, ks2 + ks3 + r0_1 + ks0*x0, ks2 + r0_1 + ks0*x0) < ks3\00"
@__spirv_BuiltInGlobalInvocationId = external dso_local local_unnamed_addr addrspace(1) constant <3 x i64>, align 32
@__spirv_BuiltInLocalInvocationId = external dso_local local_unnamed_addr addrspace(1) constant <3 x i64>, align 32

; Function Attrs: convergent mustprogress nounwind willreturn
declare !dbg !9 spir_func i64 @_Z27__spirv_GroupNonUniformIAddiimj(i32, i32, i64, i32) local_unnamed_addr #0

; Function Attrs: convergent mustprogress nounwind willreturn
declare !dbg !12 spir_func i64 @_Z27__spirv_GroupNonUniformIAddiim(i32, i32, i64) local_unnamed_addr #0

; Function Attrs: convergent mustprogress nounwind willreturn
declare !dbg !13 spir_func void @_Z7barrierj(i32) local_unnamed_addr #0

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(none)
declare !dbg !14 spir_func i64 @_Z12get_local_idj(i32) local_unnamed_addr #1

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(none)
declare !dbg !15 spir_func i64 @_Z12get_group_idj(i32) local_unnamed_addr #1

; Function Attrs: nounwind
define spir_kernel void @triton_red_fused__to_copy_add_arange_bitwise_and_constant_pad_nd_eq_gt_index_le_lt_permute_sum_view_0(ptr addrspace(1) readonly captures(none) %0, ptr addrspace(1) readonly captures(none) %1, ptr addrspace(1) writeonly captures(none) %2, ptr addrspace(1) writeonly captures(none) %3, i64 %4, i64 %5, i64 %6, i64 %7, i32 %8, i32 %9, ptr addrspace(1) readnone captures(none) %10, ptr addrspace(3) captures(none) %11) local_unnamed_addr #2 !dbg !16 !intel_reqd_sub_group_size !17 !max_work_group_size !18 {
  %13 = tail call spir_func i64 @_Z12get_group_idj(i32 0) #4, !dbg !19
  %14 = trunc i64 %13 to i32, !dbg !19
  %15 = icmp sgt i32 %8, %14, !dbg !20
  %16 = tail call spir_func i64 @_Z12get_local_idj(i32 0) #4, !dbg !21
  %17 = trunc i64 %16 to i32, !dbg !21
  %18 = and i32 %17, 511, !dbg !21
  %19 = and i32 %17, 31, !dbg !21
  %20 = lshr i32 %18, 5, !dbg !21
  %21 = icmp slt i64 %4, 0, !dbg !22
  %sext = shl i64 %13, 32, !dbg !26
  %22 = ashr exact i64 %sext, 32, !dbg !26
  %23 = mul i64 %22, %4, !dbg !26
  %24 = icmp sgt i32 %9, 0, !dbg !27
  br i1 %24, label %.lr.ph, label %._crit_edge, !dbg !27

.lr.ph:                                           ; preds = %12
  %25 = add i64 %7, %6, !dbg !28
  %26 = add i64 %23, %6
  %27 = add i64 %23, %25
  %28 = load i64, ptr addrspace(1) @__spirv_BuiltInGlobalInvocationId, align 32
  %29 = load i64, ptr addrspace(1) getelementptr inbounds nuw (i8, ptr addrspace(1) @__spirv_BuiltInGlobalInvocationId, i64 8), align 8
  %30 = load i64, ptr addrspace(1) getelementptr inbounds nuw (i8, ptr addrspace(1) @__spirv_BuiltInGlobalInvocationId, i64 16), align 16
  %31 = load i64, ptr addrspace(1) @__spirv_BuiltInLocalInvocationId, align 32
  %32 = load i64, ptr addrspace(1) getelementptr inbounds nuw (i8, ptr addrspace(1) @__spirv_BuiltInLocalInvocationId, i64 8), align 8
  %33 = load i64, ptr addrspace(1) getelementptr inbounds nuw (i8, ptr addrspace(1) @__spirv_BuiltInLocalInvocationId, i64 16), align 16
  br label %34, !dbg !27

34:                                               ; preds = %.lr.ph, %154
  %35 = phi i64 [ 0, %.lr.ph ], [ %166, %154 ]
  %36 = phi i64 [ 0, %.lr.ph ], [ %169, %154 ]
  %37 = phi i64 [ 0, %.lr.ph ], [ %172, %154 ]
  %38 = phi i64 [ 0, %.lr.ph ], [ %175, %154 ]
  %39 = phi i32 [ 0, %.lr.ph ], [ %176, %154 ]
  %40 = or disjoint i32 %39, %18, !dbg !29
  %41 = or disjoint i32 %40, 512, !dbg !29
  %42 = or disjoint i32 %40, 1024, !dbg !29
  %43 = or disjoint i32 %40, 1536, !dbg !29
  %44 = icmp slt i32 %40, %9, !dbg !30
  %45 = icmp slt i32 %41, %9, !dbg !30
  %46 = icmp slt i32 %42, %9, !dbg !30
  %47 = icmp slt i32 %43, %9, !dbg !30
  %48 = sext i32 %40 to i64, !dbg !31
  %49 = sext i32 %41 to i64, !dbg !31
  %50 = sext i32 %42 to i64, !dbg !31
  %51 = sext i32 %43 to i64, !dbg !31
  %.frozen = freeze i64 %48, !dbg !31
  %.frozen45 = freeze i64 %4, !dbg !31
  %52 = sdiv i64 %.frozen, %.frozen45, !dbg !31
  %.frozen46 = freeze i64 %49, !dbg !31
  %.frozen47 = freeze i64 %4, !dbg !31
  %53 = sdiv i64 %.frozen46, %.frozen47, !dbg !31
  %.frozen49 = freeze i64 %50, !dbg !31
  %.frozen50 = freeze i64 %4, !dbg !31
  %54 = sdiv i64 %.frozen49, %.frozen50, !dbg !31
  %.frozen52 = freeze i64 %51, !dbg !31
  %.frozen53 = freeze i64 %4, !dbg !31
  %55 = sdiv i64 %.frozen52, %.frozen53, !dbg !31
  %56 = mul i64 %52, %.frozen45, !dbg !32
  %.decomposed = sub i64 %.frozen, %56, !dbg !32
  %57 = mul i64 %53, %.frozen47, !dbg !32
  %.decomposed48 = sub i64 %.frozen46, %57, !dbg !32
  %58 = mul i64 %54, %.frozen50, !dbg !32
  %.decomposed51 = sub i64 %.frozen49, %58, !dbg !32
  %59 = mul i64 %55, %.frozen53, !dbg !32
  %.decomposed54 = sub i64 %.frozen52, %59, !dbg !32
  %.not = icmp ne i64 %.decomposed, 0, !dbg !33
  %.not4 = icmp ne i64 %.decomposed48, 0, !dbg !33
  %.not5 = icmp ne i64 %.decomposed51, 0, !dbg !33
  %.not6 = icmp ne i64 %.decomposed54, 0, !dbg !33
  %60 = icmp slt i32 %39, 0, !dbg !34
  %61 = xor i1 %21, %60, !dbg !35
  %narrow = select i1 %61, i1 %.not, i1 false, !dbg !36
  %62 = sext i1 %narrow to i64, !dbg !36
  %63 = add nsw i64 %52, %62, !dbg !36
  %narrow7 = select i1 %61, i1 %.not4, i1 false, !dbg !36
  %64 = sext i1 %narrow7 to i64, !dbg !36
  %65 = add nsw i64 %53, %64, !dbg !36
  %narrow8 = select i1 %61, i1 %.not5, i1 false, !dbg !36
  %66 = sext i1 %narrow8 to i64, !dbg !36
  %67 = add nsw i64 %54, %66, !dbg !36
  %narrow9 = select i1 %61, i1 %.not6, i1 false, !dbg !36
  %68 = sext i1 %narrow9 to i64, !dbg !36
  %69 = add nsw i64 %55, %68, !dbg !36
  %70 = icmp slt i64 %63, 1, !dbg !37
  %71 = icmp slt i64 %65, 1, !dbg !37
  %72 = icmp slt i64 %67, 1, !dbg !37
  %73 = icmp slt i64 %69, 1, !dbg !37
  %74 = add i64 %.decomposed, %23, !dbg !38
  %75 = add i64 %.decomposed48, %23, !dbg !38
  %76 = add i64 %.decomposed51, %23, !dbg !38
  %77 = add i64 %.decomposed54, %23, !dbg !38
  %78 = icmp slt i64 %74, %5, !dbg !39
  %79 = icmp slt i64 %75, %5, !dbg !39
  %80 = icmp slt i64 %76, %5, !dbg !39
  %81 = icmp slt i64 %77, %5, !dbg !39
  %82 = and i1 %78, %70, !dbg !40
  %83 = and i1 %79, %71, !dbg !40
  %84 = and i1 %80, %72, !dbg !40
  %85 = and i1 %81, %73, !dbg !40
  %86 = load i64, ptr addrspace(1) %0, align 8, !dbg !41
  %87 = select i1 %82, i64 %86, i64 0, !dbg !42
  %88 = select i1 %83, i64 %86, i64 0, !dbg !42
  %89 = select i1 %84, i64 %86, i64 0, !dbg !42
  %90 = select i1 %85, i64 %86, i64 0, !dbg !42
  %91 = add i64 %26, %.decomposed, !dbg !43
  %92 = add i64 %26, %.decomposed48, !dbg !43
  %93 = add i64 %26, %.decomposed51, !dbg !43
  %94 = add i64 %26, %.decomposed54, !dbg !43
  %95 = icmp sle i64 %91, %87, !dbg !44
  %96 = icmp sle i64 %92, %88, !dbg !44
  %97 = icmp sle i64 %93, %89, !dbg !44
  %98 = icmp sle i64 %94, %90, !dbg !44
  %99 = icmp slt i64 %91, 0, !dbg !45
  %100 = icmp slt i64 %92, 0, !dbg !45
  %101 = icmp slt i64 %93, 0, !dbg !45
  %102 = icmp slt i64 %94, 0, !dbg !45
  %103 = add i64 %27, %.decomposed, !dbg !46
  %104 = add i64 %27, %.decomposed48, !dbg !46
  %105 = add i64 %27, %.decomposed51, !dbg !46
  %106 = add i64 %27, %.decomposed54, !dbg !46
  %107 = select i1 %99, i64 %103, i64 %91, !dbg !47
  %108 = select i1 %100, i64 %104, i64 %92, !dbg !47
  %109 = select i1 %101, i64 %105, i64 %93, !dbg !47
  %110 = select i1 %102, i64 %106, i64 %94, !dbg !47
  %111 = icmp slt i64 %107, 0, !dbg !48
  %112 = icmp slt i64 %108, 0, !dbg !48
  %113 = icmp slt i64 %109, 0, !dbg !48
  %114 = icmp slt i64 %110, 0, !dbg !48
  %115 = icmp sge i64 %107, %7, !dbg !49
  %116 = icmp sge i64 %108, %7, !dbg !49
  %117 = icmp sge i64 %109, %7, !dbg !49
  %118 = icmp sge i64 %110, %7, !dbg !49
  %.not14 = or i1 %111, %115, !dbg !50
  %.not19 = or i1 %112, %116, !dbg !50
  %.not24 = or i1 %113, %117, !dbg !50
  %.not29 = or i1 %114, %118, !dbg !51
  %119 = and i1 %44, %82, !dbg !51
  %120 = and i1 %45, %83, !dbg !51
  %121 = and i1 %46, %84, !dbg !51
  %122 = and i1 %47, %85, !dbg !51
  %123 = and i1 %15, %119, !dbg !52
  %124 = and i1 %15, %120, !dbg !52
  %125 = and i1 %15, %121, !dbg !52
  %126 = and i1 %15, %122, !dbg !52
  %.not11 = and i1 %.not14, %123, !dbg !53
  %.not16 = and i1 %.not19, %124, !dbg !53
  %.not21 = and i1 %.not24, %125, !dbg !53
  %.not26 = and i1 %.not29, %126, !dbg !54
  %127 = or i1 %.not11, %.not16, !dbg !54
  %128 = or i1 %127, %.not21, !dbg !54
  %129 = or i1 %128, %.not26, !dbg !54
  br i1 %129, label %130, label %131, !dbg !54

130:                                              ; preds = %34
  tail call spir_func void @__devicelib_assert_fail(ptr addrspace(4) noundef addrspacecast (ptr addrspace(1) @assertMessage_ to ptr addrspace(4)), ptr addrspace(4) noundef addrspacecast (ptr addrspace(1) @assertFile_ to ptr addrspace(4)), i32 noundef 51, ptr addrspace(4) noundef addrspacecast (ptr addrspace(1) @assertFunc_ to ptr addrspace(4)), i64 noundef %28, i64 noundef %29, i64 noundef %30, i64 noundef %31, i64 noundef %32, i64 noundef %33) #5, !dbg !54
  br label %131, !dbg !54

131:                                              ; preds = %130, %34
  tail call spir_func void @_Z7barrierj(i32 1) #6, !dbg !54
  %132 = getelementptr i1, ptr addrspace(1) %1, i64 %108, !dbg !55
  %133 = getelementptr i1, ptr addrspace(1) %1, i64 %109, !dbg !55
  %134 = getelementptr i1, ptr addrspace(1) %1, i64 %110, !dbg !55
  br i1 %123, label %135, label %139, !dbg !56

135:                                              ; preds = %131
  %136 = getelementptr i1, ptr addrspace(1) %1, i64 %107, !dbg !55
  %137 = load i8, ptr addrspace(1) %136, align 1, !dbg !56
  %138 = icmp ne i8 %137, 0, !dbg !56
  br label %139, !dbg !56

139:                                              ; preds = %135, %131
  %140 = phi i1 [ %138, %135 ], [ false, %131 ], !dbg !56
  br i1 %124, label %141, label %144, !dbg !56

141:                                              ; preds = %139
  %142 = load i8, ptr addrspace(1) %132, align 1, !dbg !56
  %143 = icmp ne i8 %142, 0, !dbg !56
  br label %144, !dbg !56

144:                                              ; preds = %141, %139
  %145 = phi i1 [ %143, %141 ], [ false, %139 ], !dbg !56
  br i1 %125, label %146, label %149, !dbg !56

146:                                              ; preds = %144
  %147 = load i8, ptr addrspace(1) %133, align 1, !dbg !56
  %148 = icmp ne i8 %147, 0, !dbg !56
  br label %149, !dbg !56

149:                                              ; preds = %146, %144
  %150 = phi i1 [ %148, %146 ], [ false, %144 ], !dbg !56
  br i1 %126, label %151, label %154, !dbg !56

151:                                              ; preds = %149
  %152 = load i8, ptr addrspace(1) %134, align 1, !dbg !56
  %153 = icmp ne i8 %152, 0, !dbg !56
  br label %154, !dbg !56

154:                                              ; preds = %151, %149
  %155 = phi i1 [ %153, %151 ], [ false, %149 ], !dbg !56
  %156 = and i1 %95, %140, !dbg !57
  %157 = and i1 %96, %145, !dbg !57
  %158 = and i1 %97, %150, !dbg !57
  %159 = and i1 %98, %155, !dbg !57
  %160 = and i1 %15, %44, !dbg !58
  %161 = and i1 %15, %45, !dbg !58
  %162 = and i1 %15, %46, !dbg !58
  %163 = and i1 %15, %47, !dbg !58
  %164 = select i1 %160, i1 %82, i1 false, !dbg !59
  %narrow30 = select i1 %164, i1 %156, i1 false, !dbg !59
  %165 = zext i1 %narrow30 to i64, !dbg !59
  %166 = add i64 %35, %165, !dbg !59
  %167 = select i1 %161, i1 %83, i1 false, !dbg !59
  %narrow31 = select i1 %167, i1 %157, i1 false, !dbg !59
  %168 = zext i1 %narrow31 to i64, !dbg !59
  %169 = add i64 %36, %168, !dbg !59
  %170 = select i1 %162, i1 %84, i1 false, !dbg !59
  %narrow32 = select i1 %170, i1 %158, i1 false, !dbg !59
  %171 = zext i1 %narrow32 to i64, !dbg !59
  %172 = add i64 %37, %171, !dbg !59
  %173 = select i1 %163, i1 %85, i1 false, !dbg !59
  %narrow33 = select i1 %173, i1 %159, i1 false, !dbg !59
  %174 = zext i1 %narrow33 to i64, !dbg !59
  %175 = add i64 %38, %174, !dbg !59
  %176 = add i32 %39, 2048, !dbg !27
  %177 = icmp slt i32 %176, %9, !dbg !27
  br i1 %177, label %34, label %._crit_edge.loopexit, !dbg !27

._crit_edge.loopexit:                             ; preds = %154
  %178 = add i64 %166, %169, !dbg !60
  %179 = add i64 %178, %172, !dbg !60
  %180 = add i64 %179, %175, !dbg !60
  br label %._crit_edge, !dbg !60

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %12
  %181 = phi i64 [ 0, %12 ], [ %180, %._crit_edge.loopexit ], !dbg !60
  %182 = tail call spir_func i64 @_Z27__spirv_GroupNonUniformIAddiim(i32 3, i32 0, i64 %181) #6, !dbg !64
  %183 = icmp eq i32 %19, 0, !dbg !64
  br i1 %183, label %184, label %187, !dbg !64

184:                                              ; preds = %._crit_edge
  %185 = zext nneg i32 %20 to i64, !dbg !64
  %186 = getelementptr i64, ptr addrspace(3) %11, i64 %185, !dbg !64
  store i64 %182, ptr addrspace(3) %186, align 4, !dbg !64
  br label %187, !dbg !64

187:                                              ; preds = %184, %._crit_edge
  tail call spir_func void @_Z7barrierj(i32 1) #6, !dbg !64
  %188 = icmp samesign ult i32 %18, 16, !dbg !64
  %189 = and i64 %16, 511, !dbg !64
  %190 = getelementptr i64, ptr addrspace(3) %11, i64 %189, !dbg !64
  br i1 %188, label %191, label %193, !dbg !64

191:                                              ; preds = %187
  %192 = load i64, ptr addrspace(3) %190, align 4, !dbg !64
  br label %193, !dbg !64

193:                                              ; preds = %191, %187
  %194 = phi i64 [ %192, %191 ], [ undef, %187 ], !dbg !63
  %195 = tail call spir_func i64 @_Z27__spirv_GroupNonUniformIAddiimj(i32 3, i32 3, i64 %194, i32 16) #6, !dbg !64
  %196 = and i32 %17, 15, !dbg !64
  %197 = icmp eq i32 %196, 0, !dbg !64
  %198 = and i1 %188, %197, !dbg !64
  br i1 %198, label %199, label %200, !dbg !64

199:                                              ; preds = %193
  store i64 %195, ptr addrspace(3) %190, align 4, !dbg !64
  br label %200, !dbg !64

200:                                              ; preds = %199, %193
  tail call spir_func void @_Z7barrierj(i32 1) #6, !dbg !64
  %201 = icmp samesign ult i32 %18, 32, !dbg !65
  %202 = and i1 %183, %201, !dbg !65
  %203 = and i1 %15, %202, !dbg !65
  br i1 %203, label %204, label %.critedge, !dbg !65

204:                                              ; preds = %200
  %205 = load i64, ptr addrspace(3) %11, align 4, !dbg !64
  %206 = mul i64 %4, %4, !dbg !66
  %207 = icmp eq i64 %205, %206, !dbg !67
  %208 = zext i1 %207 to i32, !dbg !68
  %209 = icmp sgt i64 %205, 0, !dbg !69
  %210 = icmp slt i64 %205, %206, !dbg !70
  %211 = and i1 %209, %210, !dbg !71
  %212 = zext i1 %211 to i32, !dbg !68
  %213 = insertelement <1 x i32> poison, i32 %212, i64 0, !dbg !65
  %214 = ashr exact i64 %sext, 30, !dbg !72
  %215 = getelementptr i8, ptr addrspace(1) %2, i64 %214, !dbg !72
  store <1 x i32> %213, ptr addrspace(1) %215, align 4, !dbg !65
  %216 = insertelement <1 x i32> poison, i32 %208, i64 0, !dbg !73
  %217 = getelementptr i8, ptr addrspace(1) %3, i64 %214, !dbg !74
  store <1 x i32> %216, ptr addrspace(1) %217, align 4, !dbg !73
  br label %.critedge, !dbg !73

.critedge:                                        ; preds = %200, %204
  ret void, !dbg !75
}

; Function Attrs: convergent mustprogress norecurse nounwind
declare extern_weak dso_local spir_func void @__devicelib_assert_fail(ptr addrspace(4) noundef, ptr addrspace(4) noundef, i32 noundef, ptr addrspace(4) noundef, i64 noundef, i64 noundef, i64 noundef, i64 noundef, i64 noundef, i64 noundef) local_unnamed_addr #3

attributes #0 = { convergent mustprogress nounwind willreturn }
attributes #1 = { mustprogress nofree nosync nounwind willreturn memory(none) }
attributes #2 = { nounwind }
attributes #3 = { convergent mustprogress norecurse nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "sycl-module-id"="/netbatch/donb74095_00/dir/workspace/NIT/xmain-rel/LX/xmainefi2linux_release/ws/icsws/llvm/libdevice/fallback-cassert.cpp" "sycl-optlevel"="2" }
attributes #4 = { nounwind willreturn memory(none) }
attributes #5 = { convergent nounwind }
attributes #6 = { convergent nounwind willreturn }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3, !4, !5}
!opencl.spir.version = !{!6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6}
!spirv.Source = !{!7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7}
!llvm.ident = !{!8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py", directory: "/tmp/torchinductor_jovyan/pk")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 1, !"wchar_size", i32 4}
!4 = !{i32 1, !"sycl-device", i32 1}
!5 = !{i32 7, !"frame-pointer", i32 2}
!6 = !{i32 1, i32 2}
!7 = !{i32 3, i32 100000}
!8 = !{!"Intel(R) oneAPI DPC++/C++ Compiler 2025.0.0 (2025.0.0.20241008)"}
!9 = !DISubprogram(name: "_Z27__spirv_GroupNonUniformIAddiimj", linkageName: "_Z27__spirv_GroupNonUniformIAddiimj", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagOptimized)
!10 = !DISubroutineType(cc: DW_CC_normal, types: !11)
!11 = !{}
!12 = !DISubprogram(name: "_Z27__spirv_GroupNonUniformIAddiim", linkageName: "_Z27__spirv_GroupNonUniformIAddiim", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagOptimized)
!13 = !DISubprogram(name: "_Z7barrierj", linkageName: "_Z7barrierj", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagOptimized)
!14 = !DISubprogram(name: "_Z12get_local_idj", linkageName: "_Z12get_local_idj", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagOptimized)
!15 = !DISubprogram(name: "_Z12get_group_idj", linkageName: "_Z12get_group_idj", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagOptimized)
!16 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_arange_bitwise_and_constant_pad_nd_eq_gt_index_le_lt_permute_sum_view_0", linkageName: "triton_red_fused__to_copy_add_arange_bitwise_and_constant_pad_nd_eq_gt_index_le_lt_permute_sum_view_0", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!17 = !{i32 32}
!18 = !{i64 512, i64 1, i64 1}
!19 = !DILocation(line: 21, column: 28, scope: !16)
!20 = !DILocation(line: 23, column: 21, scope: !16)
!21 = !DILocation(line: 24, column: 37, scope: !16)
!22 = !DILocation(line: 76, column: 36, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !16, file: !24, discriminator: 0)
!24 = !DIFile(filename: "triton_helpers.py", directory: "/home/jovyan/envs/miniforge3/envs/triton/lib/python3.10/site-packages/torch/_inductor/runtime")
!25 = !DILocation(line: 33, column: 59, scope: !16)
!26 = !DILocation(line: 38, column: 26, scope: !16)
!27 = !DILocation(line: 28, column: 40, scope: !16)
!28 = !DILocation(line: 51, column: 72, scope: !16)
!29 = !DILocation(line: 29, column: 31, scope: !16)
!30 = !DILocation(line: 30, column: 29, scope: !16)
!31 = !DILocation(line: 73, column: 16, scope: !23, inlinedAt: !25)
!32 = !DILocation(line: 74, column: 20, scope: !23, inlinedAt: !25)
!33 = !DILocation(line: 75, column: 34, scope: !23, inlinedAt: !25)
!34 = !DILocation(line: 76, column: 25, scope: !23, inlinedAt: !25)
!35 = !DILocation(line: 76, column: 32, scope: !23, inlinedAt: !25)
!36 = !DILocation(line: 76, column: 47, scope: !23, inlinedAt: !25)
!37 = !DILocation(line: 37, column: 22, scope: !16)
!38 = !DILocation(line: 38, column: 22, scope: !16)
!39 = !DILocation(line: 40, column: 22, scope: !16)
!40 = !DILocation(line: 41, column: 22, scope: !16)
!41 = !DILocation(line: 42, column: 23, scope: !16)
!42 = !DILocation(line: 44, column: 36, scope: !16)
!43 = !DILocation(line: 47, column: 29, scope: !16)
!44 = !DILocation(line: 48, column: 25, scope: !16)
!45 = !DILocation(line: 51, column: 63, scope: !16)
!46 = !DILocation(line: 51, column: 85, scope: !16)
!47 = !DILocation(line: 51, column: 93, scope: !16)
!48 = !DILocation(line: 51, column: 32, scope: !16)
!49 = !DILocation(line: 51, column: 202, scope: !16)
!50 = !DILocation(line: 51, column: 118, scope: !16)
!51 = !DILocation(line: 51, column: 222, scope: !16)
!52 = !DILocation(line: 51, column: 229, scope: !16)
!53 = !DILocation(line: 51, column: 210, scope: !16)
!54 = !DILocation(line: 51, column: 237, scope: !16)
!55 = !DILocation(line: 52, column: 35, scope: !16)
!56 = !DILocation(line: 52, column: 119, scope: !16)
!57 = !DILocation(line: 53, column: 24, scope: !16)
!58 = !DILocation(line: 59, column: 36, scope: !16)
!59 = !DILocation(line: 59, column: 50, scope: !16)
!60 = !DILocation(line: 260, column: 15, scope: !61, inlinedAt: !63)
!61 = distinct !DILexicalBlockFile(scope: !16, file: !62, discriminator: 0)
!62 = !DIFile(filename: "standard.py", directory: "/home/jovyan/intel-xpu-backend-for-triton/python/triton/language")
!63 = !DILocation(line: 60, column: 27, scope: !16)
!64 = !DILocation(line: 290, column: 36, scope: !61, inlinedAt: !63)
!65 = !DILocation(line: 71, column: 37, scope: !16)
!66 = !DILocation(line: 63, column: 16, scope: !16)
!67 = !DILocation(line: 68, column: 21, scope: !16)
!68 = !DILocation(line: 0, scope: !16)
!69 = !DILocation(line: 62, column: 20, scope: !16)
!70 = !DILocation(line: 64, column: 20, scope: !16)
!71 = !DILocation(line: 65, column: 20, scope: !16)
!72 = !DILocation(line: 71, column: 25, scope: !16)
!73 = !DILocation(line: 72, column: 37, scope: !16)
!74 = !DILocation(line: 72, column: 25, scope: !16)
!75 = !DILocation(line: 72, column: 4, scope: !16)
