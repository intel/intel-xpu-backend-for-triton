#loc = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":18:0)
#loc106 = loc("/home/jovyan/envs/miniforge3/envs/triton/lib/python3.10/site-packages/torch/_inductor/runtime/triton_helpers.py":70:0)
#loc118 = loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":284:0)
#loc120 = loc(unknown)
#loc123 = loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":259:0)
module {
  tt.func public @triton_red_fused__to_copy_add_arange_bitwise_and_constant_pad_nd_eq_gt_index_le_lt_permute_sum_view_0(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":18:0), %arg1: !tt.ptr<i1> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":18:0), %arg2: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":18:0), %arg3: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":18:0), %arg4: i64 loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":18:0), %arg5: i64 loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":18:0), %arg6: i64 loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":18:0), %arg7: i64 loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":18:0), %arg8: i32 loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":18:0), %arg9: i32 loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":18:0)) attributes {noinline = false} {
    %0 = tt.get_program_id x : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc2)
    %c1_i32_0 = arith.constant 1 : i32 loc(#loc2)
    %1 = arith.muli %0, %c1_i32_0 : i32 loc(#loc2)
    %2 = tt.make_range {end = 1 : i32, start = 0 : i32} : tensor<1xi32> loc(#loc3)
    %3 = tt.expand_dims %2 {axis = 1 : i32} : tensor<1xi32> -> tensor<1x1xi32> loc(#loc4)
    %4 = tt.splat %1 : i32 -> tensor<1x1xi32> loc(#loc5)
    %5 = arith.addi %4, %3 : tensor<1x1xi32> loc(#loc5)
    %6 = tt.splat %arg8 : i32 -> tensor<1x1xi32> loc(#loc6)
    %7 = arith.cmpi slt, %5, %6 : tensor<1x1xi32> loc(#loc6)
    %8 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32> loc(#loc7)
    %9 = tt.expand_dims %8 {axis = 0 : i32} : tensor<2048xi32> -> tensor<1x2048xi32> loc(#loc8)
    %c0_i64 = arith.constant 0 : i64 loc(#loc9)
    %cst = arith.constant dense<0> : tensor<1x2048xi64> loc(#loc9)
    %c0_i32 = arith.constant 0 : i32 loc(#loc10)
    %c2048_i32 = arith.constant 2048 : i32 loc(#loc10)
    %10 = arith.bitcast %c0_i32 : i32 to i32 loc(#loc10)
    %11 = arith.bitcast %arg9 : i32 to i32 loc(#loc10)
    %12 = arith.bitcast %c2048_i32 : i32 to i32 loc(#loc10)
    %13 = ub.poison : i32 loc(#loc10)
    %14 = scf.for %arg10 = %10 to %11 step %12 iter_args(%arg11 = %cst) -> (tensor<1x2048xi64>)  : i32 {
      %32 = tt.splat %arg10 : i32 -> tensor<1x2048xi32> loc(#loc11)
      %33 = arith.addi %32, %9 : tensor<1x2048xi32> loc(#loc11)
      %34 = tt.splat %arg9 : i32 -> tensor<1x2048xi32> loc(#loc12)
      %35 = arith.cmpi slt, %33, %34 : tensor<1x2048xi32> loc(#loc12)
      %36 = tt.call @torch._inductor.runtime.triton_helpers.div_floor_integer__i32S1_2048S_i64__(%33, %arg4) : (tensor<1x2048xi32>, i64) -> tensor<1x2048xi64> loc(#loc13)
      %37 = arith.extsi %33 : tensor<1x2048xi32> to tensor<1x2048xi64> loc(#loc14)
      %38 = tt.splat %arg4 : i64 -> tensor<1x2048xi64> loc(#loc14)
      %39 = arith.remsi %37, %38 : tensor<1x2048xi64> loc(#loc14)
      %c1_i64 = arith.constant 1 : i64 loc(#loc15)
      %cst_3 = arith.constant dense<1> : tensor<1x1xi64> loc(#loc15)
      %cst_4 = arith.constant dense<1> : tensor<1x2048xi64> loc(#loc16)
      %40 = arith.cmpi slt, %36, %cst_4 : tensor<1x2048xi64> loc(#loc16)
      %41 = arith.extsi %5 : tensor<1x1xi32> to tensor<1x1xi64> loc(#loc17)
      %42 = tt.splat %arg4 : i64 -> tensor<1x1xi64> loc(#loc17)
      %43 = arith.muli %42, %41 : tensor<1x1xi64> loc(#loc17)
      %44 = tt.broadcast %43 : tensor<1x1xi64> -> tensor<1x2048xi64> loc(#loc18)
      %45 = arith.addi %39, %44 : tensor<1x2048xi64> loc(#loc18)
      %46 = tt.splat %arg5 : i64 -> tensor<1x2048xi64> loc(#loc19)
      %47 = arith.cmpi slt, %45, %46 : tensor<1x2048xi64> loc(#loc19)
      %48 = arith.andi %40, %47 : tensor<1x2048xi1> loc(#loc20)
      %c0_i32_5 = arith.constant 0 : i32 loc(#loc21)
      %49 = tt.addptr %arg0, %c0_i32_5 : !tt.ptr<i64>, i32 loc(#loc21)
      %50 = tt.load %49 : !tt.ptr<i64> loc(#loc22)
      %51 = tt.splat %50 : i64 -> tensor<1x2048xi64> loc(#loc23)
      %c0_i32_6 = arith.constant 0 : i32 loc(#loc24)
      %c0_i64_7 = arith.constant 0 : i64 loc(#loc24)
      %cst_8 = arith.constant dense<0> : tensor<1x2048xi64> loc(#loc24)
      %52 = arith.select %48, %51, %cst_8 : tensor<1x2048xi1>, tensor<1x2048xi64> loc(#loc24)
      %c0_i64_9 = arith.constant 0 : i64 loc(#loc25)
      %cst_10 = arith.constant dense<0> : tensor<1x1xi64> loc(#loc25)
      %cst_11 = arith.constant dense<0> : tensor<1x2048xi64> loc(#loc26)
      %53 = arith.addi %cst_11, %52 : tensor<1x2048xi64> loc(#loc26)
      %54 = tt.splat %arg6 : i64 -> tensor<1x2048xi64> loc(#loc27)
      %55 = arith.addi %54, %39 : tensor<1x2048xi64> loc(#loc27)
      %56 = arith.extsi %5 : tensor<1x1xi32> to tensor<1x1xi64> loc(#loc28)
      %57 = tt.splat %arg4 : i64 -> tensor<1x1xi64> loc(#loc28)
      %58 = arith.muli %57, %56 : tensor<1x1xi64> loc(#loc28)
      %59 = tt.broadcast %58 : tensor<1x1xi64> -> tensor<1x2048xi64> loc(#loc29)
      %60 = arith.addi %55, %59 : tensor<1x2048xi64> loc(#loc29)
      %61 = arith.cmpi sle, %60, %53 : tensor<1x2048xi64> loc(#loc30)
      %true = arith.constant true loc(#loc31)
      %cst_12 = arith.constant dense<true> : tensor<1x1xi1> loc(#loc31)
      %cst_13 = arith.constant dense<true> : tensor<1x2048xi1> loc(#loc32)
      %62 = arith.andi %cst_13, %61 : tensor<1x2048xi1> loc(#loc32)
      %63 = tt.splat %arg6 : i64 -> tensor<1x2048xi64> loc(#loc33)
      %64 = arith.addi %63, %39 : tensor<1x2048xi64> loc(#loc33)
      %65 = arith.extsi %5 : tensor<1x1xi32> to tensor<1x1xi64> loc(#loc34)
      %66 = tt.splat %arg4 : i64 -> tensor<1x1xi64> loc(#loc34)
      %67 = arith.muli %66, %65 : tensor<1x1xi64> loc(#loc34)
      %68 = tt.broadcast %67 : tensor<1x1xi64> -> tensor<1x2048xi64> loc(#loc35)
      %69 = arith.addi %64, %68 : tensor<1x2048xi64> loc(#loc35)
      %c0_i32_14 = arith.constant 0 : i32 loc(#loc36)
      %70 = arith.extsi %c0_i32_14 : i32 to i64 loc(#loc36)
      %71 = tt.splat %70 : i64 -> tensor<1x2048xi64> loc(#loc36)
      %72 = arith.cmpi slt, %69, %71 : tensor<1x2048xi64> loc(#loc36)
      %73 = arith.addi %arg6, %arg7 : i64 loc(#loc37)
      %74 = tt.splat %73 : i64 -> tensor<1x2048xi64> loc(#loc38)
      %75 = arith.addi %74, %39 : tensor<1x2048xi64> loc(#loc38)
      %76 = arith.extsi %5 : tensor<1x1xi32> to tensor<1x1xi64> loc(#loc39)
      %77 = tt.splat %arg4 : i64 -> tensor<1x1xi64> loc(#loc39)
      %78 = arith.muli %77, %76 : tensor<1x1xi64> loc(#loc39)
      %79 = tt.broadcast %78 : tensor<1x1xi64> -> tensor<1x2048xi64> loc(#loc40)
      %80 = arith.addi %75, %79 : tensor<1x2048xi64> loc(#loc40)
      %81 = tt.splat %arg6 : i64 -> tensor<1x2048xi64> loc(#loc41)
      %82 = arith.addi %81, %39 : tensor<1x2048xi64> loc(#loc41)
      %83 = arith.extsi %5 : tensor<1x1xi32> to tensor<1x1xi64> loc(#loc42)
      %84 = tt.splat %arg4 : i64 -> tensor<1x1xi64> loc(#loc42)
      %85 = arith.muli %84, %83 : tensor<1x1xi64> loc(#loc42)
      %86 = tt.broadcast %85 : tensor<1x1xi64> -> tensor<1x2048xi64> loc(#loc43)
      %87 = arith.addi %82, %86 : tensor<1x2048xi64> loc(#loc43)
      %88 = arith.select %72, %80, %87 : tensor<1x2048xi1>, tensor<1x2048xi64> loc(#loc44)
      %c0_i32_15 = arith.constant 0 : i32 loc(#loc45)
      %89 = arith.extsi %c0_i32_15 : i32 to i64 loc(#loc45)
      %90 = tt.splat %89 : i64 -> tensor<1x2048xi64> loc(#loc45)
      %91 = arith.cmpi sle, %90, %88 : tensor<1x2048xi64> loc(#loc45)
      %92 = tt.splat %arg6 : i64 -> tensor<1x2048xi64> loc(#loc46)
      %93 = arith.addi %92, %39 : tensor<1x2048xi64> loc(#loc46)
      %94 = arith.extsi %5 : tensor<1x1xi32> to tensor<1x1xi64> loc(#loc47)
      %95 = tt.splat %arg4 : i64 -> tensor<1x1xi64> loc(#loc47)
      %96 = arith.muli %95, %94 : tensor<1x1xi64> loc(#loc47)
      %97 = tt.broadcast %96 : tensor<1x1xi64> -> tensor<1x2048xi64> loc(#loc48)
      %98 = arith.addi %93, %97 : tensor<1x2048xi64> loc(#loc48)
      %c0_i32_16 = arith.constant 0 : i32 loc(#loc49)
      %99 = arith.extsi %c0_i32_16 : i32 to i64 loc(#loc49)
      %100 = tt.splat %99 : i64 -> tensor<1x2048xi64> loc(#loc49)
      %101 = arith.cmpi slt, %98, %100 : tensor<1x2048xi64> loc(#loc49)
      %102 = arith.addi %arg6, %arg7 : i64 loc(#loc50)
      %103 = tt.splat %102 : i64 -> tensor<1x2048xi64> loc(#loc51)
      %104 = arith.addi %103, %39 : tensor<1x2048xi64> loc(#loc51)
      %105 = arith.extsi %5 : tensor<1x1xi32> to tensor<1x1xi64> loc(#loc52)
      %106 = tt.splat %arg4 : i64 -> tensor<1x1xi64> loc(#loc52)
      %107 = arith.muli %106, %105 : tensor<1x1xi64> loc(#loc52)
      %108 = tt.broadcast %107 : tensor<1x1xi64> -> tensor<1x2048xi64> loc(#loc53)
      %109 = arith.addi %104, %108 : tensor<1x2048xi64> loc(#loc53)
      %110 = tt.splat %arg6 : i64 -> tensor<1x2048xi64> loc(#loc54)
      %111 = arith.addi %110, %39 : tensor<1x2048xi64> loc(#loc54)
      %112 = arith.extsi %5 : tensor<1x1xi32> to tensor<1x1xi64> loc(#loc55)
      %113 = tt.splat %arg4 : i64 -> tensor<1x1xi64> loc(#loc55)
      %114 = arith.muli %113, %112 : tensor<1x1xi64> loc(#loc55)
      %115 = tt.broadcast %114 : tensor<1x1xi64> -> tensor<1x2048xi64> loc(#loc56)
      %116 = arith.addi %111, %115 : tensor<1x2048xi64> loc(#loc56)
      %117 = arith.select %101, %109, %116 : tensor<1x2048xi1>, tensor<1x2048xi64> loc(#loc57)
      %118 = tt.splat %arg7 : i64 -> tensor<1x2048xi64> loc(#loc58)
      %119 = arith.cmpi slt, %117, %118 : tensor<1x2048xi64> loc(#loc58)
      %120 = arith.andi %91, %119 : tensor<1x2048xi1> loc(#loc59)
      %121 = arith.andi %35, %48 : tensor<1x2048xi1> loc(#loc60)
      %122 = tt.broadcast %7 : tensor<1x1xi1> -> tensor<1x2048xi1> loc(#loc61)
      %123 = arith.andi %121, %122 : tensor<1x2048xi1> loc(#loc61)
      %true_17 = arith.constant true loc(#loc62)
      %cst_18 = arith.constant dense<true> : tensor<1x2048xi1> loc(#loc62)
      %124 = arith.xori %123, %cst_18 : tensor<1x2048xi1> loc(#loc62)
      %125 = arith.ori %120, %124 : tensor<1x2048xi1> loc(#loc63)
      tt.assert %125, "index out of bounds: 0 <= tl.where(ks2 + r0_1 + ks0*x0 < 0, ks2 + ks3 + r0_1 + ks0*x0, ks2 + r0_1 + ks0*x0) < ks3" : tensor<1x2048xi1> loc(#loc64)
      %126 = tt.splat %arg6 : i64 -> tensor<1x2048xi64> loc(#loc65)
      %127 = arith.addi %126, %39 : tensor<1x2048xi64> loc(#loc65)
      %128 = arith.extsi %5 : tensor<1x1xi32> to tensor<1x1xi64> loc(#loc66)
      %129 = tt.splat %arg4 : i64 -> tensor<1x1xi64> loc(#loc66)
      %130 = arith.muli %129, %128 : tensor<1x1xi64> loc(#loc66)
      %131 = tt.broadcast %130 : tensor<1x1xi64> -> tensor<1x2048xi64> loc(#loc67)
      %132 = arith.addi %127, %131 : tensor<1x2048xi64> loc(#loc67)
      %c0_i32_19 = arith.constant 0 : i32 loc(#loc68)
      %133 = arith.extsi %c0_i32_19 : i32 to i64 loc(#loc68)
      %134 = tt.splat %133 : i64 -> tensor<1x2048xi64> loc(#loc68)
      %135 = arith.cmpi slt, %132, %134 : tensor<1x2048xi64> loc(#loc68)
      %136 = arith.addi %arg6, %arg7 : i64 loc(#loc69)
      %137 = tt.splat %136 : i64 -> tensor<1x2048xi64> loc(#loc70)
      %138 = arith.addi %137, %39 : tensor<1x2048xi64> loc(#loc70)
      %139 = arith.extsi %5 : tensor<1x1xi32> to tensor<1x1xi64> loc(#loc71)
      %140 = tt.splat %arg4 : i64 -> tensor<1x1xi64> loc(#loc71)
      %141 = arith.muli %140, %139 : tensor<1x1xi64> loc(#loc71)
      %142 = tt.broadcast %141 : tensor<1x1xi64> -> tensor<1x2048xi64> loc(#loc72)
      %143 = arith.addi %138, %142 : tensor<1x2048xi64> loc(#loc72)
      %144 = tt.splat %arg6 : i64 -> tensor<1x2048xi64> loc(#loc73)
      %145 = arith.addi %144, %39 : tensor<1x2048xi64> loc(#loc73)
      %146 = arith.extsi %5 : tensor<1x1xi32> to tensor<1x1xi64> loc(#loc74)
      %147 = tt.splat %arg4 : i64 -> tensor<1x1xi64> loc(#loc74)
      %148 = arith.muli %147, %146 : tensor<1x1xi64> loc(#loc74)
      %149 = tt.broadcast %148 : tensor<1x1xi64> -> tensor<1x2048xi64> loc(#loc75)
      %150 = arith.addi %145, %149 : tensor<1x2048xi64> loc(#loc75)
      %151 = arith.select %135, %143, %150 : tensor<1x2048xi1>, tensor<1x2048xi64> loc(#loc76)
      %152 = tt.splat %arg1 : !tt.ptr<i1> -> tensor<1x2048x!tt.ptr<i1>> loc(#loc77)
      %153 = tt.addptr %152, %151 : tensor<1x2048x!tt.ptr<i1>>, tensor<1x2048xi64> loc(#loc77)
      %154 = arith.andi %35, %48 : tensor<1x2048xi1> loc(#loc78)
      %155 = tt.broadcast %7 : tensor<1x1xi1> -> tensor<1x2048xi1> loc(#loc79)
      %156 = arith.andi %154, %155 : tensor<1x2048xi1> loc(#loc79)
      %cst_20 = arith.constant 0.000000e+00 : f32 loc(#loc80)
      %cst_21 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32> loc(#loc80)
      %157 = tt.bitcast %153 : tensor<1x2048x!tt.ptr<i1>> -> tensor<1x2048x!tt.ptr<i8>> loc(#loc80)
      %158 = arith.fptosi %cst_21 : tensor<1x2048xf32> to tensor<1x2048xi8> loc(#loc80)
      %159 = tt.load %157, %156, %158 evictionPolicy = evict_last : tensor<1x2048x!tt.ptr<i8>> loc(#loc80)
      %c0_i8 = arith.constant 0 : i8 loc(#loc80)
      %cst_22 = arith.constant dense<0> : tensor<1x2048xi8> loc(#loc80)
      %160 = arith.cmpi ne, %159, %cst_22 : tensor<1x2048xi8> loc(#loc80)
      %161 = arith.andi %62, %160 : tensor<1x2048xi1> loc(#loc81)
      %false = arith.constant false loc(#loc82)
      %cst_23 = arith.constant dense<false> : tensor<1x2048xi1> loc(#loc82)
      %162 = arith.select %48, %161, %cst_23 : tensor<1x2048xi1>, tensor<1x2048xi1> loc(#loc83)
      %163 = arith.extui %162 : tensor<1x2048xi1> to tensor<1x2048xi64> loc(#loc84)
      %164 = arith.addi %arg11, %163 : tensor<1x2048xi64> loc(#loc85)
      %165 = tt.broadcast %7 : tensor<1x1xi1> -> tensor<1x2048xi1> loc(#loc86)
      %166 = arith.andi %35, %165 : tensor<1x2048xi1> loc(#loc86)
      %167 = arith.select %166, %164, %arg11 : tensor<1x2048xi1>, tensor<1x2048xi64> loc(#loc87)
      scf.yield %167 : tensor<1x2048xi64> loc(#loc88)
    } loc(#loc10)
    %15 = tt.call @"triton.language.standard.sum__i64S1_2048S__(1,)cconstexpr_1__(2,)cconstexpr_False__(3,)cNone"(%14) : (tensor<1x2048xi64>) -> tensor<1xi64> loc(#loc89)
    %16 = tt.expand_dims %15 {axis = 1 : i32} : tensor<1xi64> -> tensor<1x1xi64> loc(#loc90)
    %c0_i64_1 = arith.constant 0 : i64 loc(#loc91)
    %cst_2 = arith.constant dense<0> : tensor<1x1xi64> loc(#loc91)
    %17 = arith.cmpi sgt, %16, %cst_2 : tensor<1x1xi64> loc(#loc92)
    %18 = arith.muli %arg4, %arg4 : i64 loc(#loc93)
    %19 = tt.splat %18 : i64 -> tensor<1x1xi64> loc(#loc94)
    %20 = arith.cmpi slt, %16, %19 : tensor<1x1xi64> loc(#loc94)
    %21 = arith.andi %17, %20 : tensor<1x1xi1> loc(#loc95)
    %22 = arith.extui %21 : tensor<1x1xi1> to tensor<1x1xi8> loc(#loc96)
    %23 = arith.extsi %22 : tensor<1x1xi8> to tensor<1x1xi32> loc(#loc97)
    %24 = tt.splat %18 : i64 -> tensor<1x1xi64> loc(#loc98)
    %25 = arith.cmpi eq, %16, %24 : tensor<1x1xi64> loc(#loc98)
    %26 = arith.extui %25 : tensor<1x1xi1> to tensor<1x1xi8> loc(#loc99)
    %27 = arith.extsi %26 : tensor<1x1xi8> to tensor<1x1xi32> loc(#loc100)
    %28 = tt.splat %arg2 : !tt.ptr<i32> -> tensor<1x1x!tt.ptr<i32>> loc(#loc101)
    %29 = tt.addptr %28, %5 : tensor<1x1x!tt.ptr<i32>>, tensor<1x1xi32> loc(#loc101)
    tt.store %29, %23, %7 : tensor<1x1x!tt.ptr<i32>> loc(#loc102)
    %30 = tt.splat %arg3 : !tt.ptr<i32> -> tensor<1x1x!tt.ptr<i32>> loc(#loc103)
    %31 = tt.addptr %30, %5 : tensor<1x1x!tt.ptr<i32>>, tensor<1x1xi32> loc(#loc103)
    tt.store %31, %27, %7 : tensor<1x1x!tt.ptr<i32>> loc(#loc104)
    tt.return loc(#loc105)
  } loc(#loc)
  tt.func private @torch._inductor.runtime.triton_helpers.div_floor_integer__i32S1_2048S_i64__(%arg0: tensor<1x2048xi32> loc("/home/jovyan/envs/miniforge3/envs/triton/lib/python3.10/site-packages/torch/_inductor/runtime/triton_helpers.py":70:0), %arg1: i64 loc("/home/jovyan/envs/miniforge3/envs/triton/lib/python3.10/site-packages/torch/_inductor/runtime/triton_helpers.py":70:0)) -> tensor<1x2048xi64> attributes {noinline = false} {
    %0 = arith.extsi %arg0 : tensor<1x2048xi32> to tensor<1x2048xi64> loc(#loc107)
    %1 = tt.splat %arg1 : i64 -> tensor<1x2048xi64> loc(#loc107)
    %2 = arith.divsi %0, %1 : tensor<1x2048xi64> loc(#loc107)
    %3 = arith.extsi %arg0 : tensor<1x2048xi32> to tensor<1x2048xi64> loc(#loc108)
    %4 = tt.splat %arg1 : i64 -> tensor<1x2048xi64> loc(#loc108)
    %5 = arith.remsi %3, %4 : tensor<1x2048xi64> loc(#loc108)
    %c0_i32 = arith.constant 0 : i32 loc(#loc109)
    %6 = arith.extsi %c0_i32 : i32 to i64 loc(#loc109)
    %7 = tt.splat %6 : i64 -> tensor<1x2048xi64> loc(#loc109)
    %8 = arith.cmpi ne, %5, %7 : tensor<1x2048xi64> loc(#loc109)
    %c1_i32 = arith.constant 1 : i32 loc(#loc110)
    %c1_i64 = arith.constant 1 : i64 loc(#loc110)
    %cst = arith.constant dense<1> : tensor<1x2048xi64> loc(#loc110)
    %9 = arith.subi %2, %cst : tensor<1x2048xi64> loc(#loc110)
    %10 = arith.select %8, %9, %2 : tensor<1x2048xi1>, tensor<1x2048xi64> loc(#loc111)
    %c0_i32_0 = arith.constant 0 : i32 loc(#loc112)
    %cst_1 = arith.constant dense<0> : tensor<1x2048xi32> loc(#loc112)
    %11 = arith.cmpi slt, %arg0, %cst_1 : tensor<1x2048xi32> loc(#loc112)
    %c0_i32_2 = arith.constant 0 : i32 loc(#loc113)
    %12 = arith.extsi %c0_i32_2 : i32 to i64 loc(#loc113)
    %13 = arith.cmpi slt, %arg1, %12 : i64 loc(#loc113)
    %14 = tt.splat %13 : i1 -> tensor<1x2048xi1> loc(#loc114)
    %15 = arith.cmpi ne, %11, %14 : tensor<1x2048xi1> loc(#loc114)
    %16 = arith.select %15, %10, %2 : tensor<1x2048xi1>, tensor<1x2048xi64> loc(#loc115)
    tt.return %16 : tensor<1x2048xi64> loc(#loc116)
  ^bb1:  // no predecessors
    %17 = ub.poison : tensor<1x2048xi64> loc(#loc117)
    tt.return %17 : tensor<1x2048xi64> loc(#loc117)
  } loc(#loc106)
  tt.func private @"triton.language.standard.sum__i64S1_2048S__(1,)cconstexpr_1__(2,)cconstexpr_False__(3,)cNone"(%arg0: tensor<1x2048xi64> loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":284:0)) -> tensor<1xi64> attributes {noinline = false} {
    %0 = "tt.reduce"(%arg0) <{axis = 1 : i32}> ({
    ^bb0(%arg1: i64 loc(unknown), %arg2: i64 loc(unknown)):
      %2 = tt.call @triton.language.standard._sum_combine__i64_i64__(%arg1, %arg2) : (i64, i64) -> i64 loc(#loc119)
      tt.reduce.return %2 : i64 loc(#loc119)
    }) : (tensor<1x2048xi64>) -> tensor<1xi64> loc(#loc119)
    tt.return %0 : tensor<1xi64> loc(#loc121)
  ^bb1:  // no predecessors
    %1 = ub.poison : tensor<1xi64> loc(#loc122)
    tt.return %1 : tensor<1xi64> loc(#loc122)
  } loc(#loc118)
  tt.func private @triton.language.standard._sum_combine__i64_i64__(%arg0: i64 loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":259:0), %arg1: i64 loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":259:0)) -> i64 attributes {noinline = false} {
    %0 = arith.addi %arg0, %arg1 : i64 loc(#loc124)
    tt.return %0 : i64 loc(#loc125)
  ^bb1:  // no predecessors
    %1 = ub.poison : i64 loc(#loc126)
    tt.return %1 : i64 loc(#loc126)
  } loc(#loc123)
} loc(#loc)
#loc1 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":21:28)
#loc2 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":21:33)
#loc3 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":22:36)
#loc4 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":22:44)
#loc5 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":22:23)
#loc6 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":23:21)
#loc7 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":24:27)
#loc8 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":24:37)
#loc9 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":27:44)
#loc10 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":28:40)
#loc11 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":29:31)
#loc12 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":30:29)
#loc13 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":33:59)
#loc14 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":34:27)
#loc15 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":36:34)
#loc16 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":37:22)
#loc17 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":38:26)
#loc18 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":38:22)
#loc19 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":40:22)
#loc20 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":41:22)
#loc21 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":42:34)
#loc22 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":42:23)
#loc23 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":43:37)
#loc24 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":44:36)
#loc25 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":45:35)
#loc26 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":46:24)
#loc27 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":47:22)
#loc28 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":47:33)
#loc29 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":47:29)
#loc30 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":48:25)
#loc31 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":49:38)
#loc32 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":50:24)
#loc33 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":51:47)
#loc34 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":51:58)
#loc35 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":51:54)
#loc36 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":51:63)
#loc37 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":51:72)
#loc38 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":51:78)
#loc39 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":51:89)
#loc40 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":51:85)
#loc41 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":51:99)
#loc42 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":51:110)
#loc43 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":51:106)
#loc44 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":51:93)
#loc45 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":51:32)
#loc46 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":51:133)
#loc47 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":51:144)
#loc48 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":51:140)
#loc49 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":51:149)
#loc50 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":51:158)
#loc51 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":51:164)
#loc52 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":51:175)
#loc53 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":51:171)
#loc54 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":51:185)
#loc55 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":51:196)
#loc56 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":51:192)
#loc57 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":51:179)
#loc58 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":51:202)
#loc59 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":51:118)
#loc60 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":51:222)
#loc61 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":51:229)
#loc62 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":51:212)
#loc63 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":51:210)
#loc64 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":51:237)
#loc65 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":52:50)
#loc66 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":52:61)
#loc67 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":52:57)
#loc68 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":52:66)
#loc69 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":52:75)
#loc70 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":52:81)
#loc71 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":52:92)
#loc72 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":52:88)
#loc73 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":52:102)
#loc74 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":52:113)
#loc75 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":52:109)
#loc76 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":52:96)
#loc77 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":52:35)
#loc78 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":52:129)
#loc79 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":52:136)
#loc80 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":52:119)
#loc81 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":53:24)
#loc82 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":54:44)
#loc83 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":55:38)
#loc84 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":56:25)
#loc85 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":58:25)
#loc86 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":59:36)
#loc87 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":59:50)
#loc88 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":59:8)
#loc89 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":60:27)
#loc90 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":60:30)
#loc91 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":61:31)
#loc92 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":62:20)
#loc93 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":63:16)
#loc94 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":64:20)
#loc95 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":65:20)
#loc96 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":66:21)
#loc97 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":67:21)
#loc98 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":68:21)
#loc99 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":69:21)
#loc100 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":70:21)
#loc101 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":71:25)
#loc102 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":71:37)
#loc103 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":72:25)
#loc104 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":72:37)
#loc105 = loc("/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py":72:4)
#loc107 = loc("/home/jovyan/envs/miniforge3/envs/triton/lib/python3.10/site-packages/torch/_inductor/runtime/triton_helpers.py":73:16)
#loc108 = loc("/home/jovyan/envs/miniforge3/envs/triton/lib/python3.10/site-packages/torch/_inductor/runtime/triton_helpers.py":74:20)
#loc109 = loc("/home/jovyan/envs/miniforge3/envs/triton/lib/python3.10/site-packages/torch/_inductor/runtime/triton_helpers.py":75:34)
#loc110 = loc("/home/jovyan/envs/miniforge3/envs/triton/lib/python3.10/site-packages/torch/_inductor/runtime/triton_helpers.py":75:44)
#loc111 = loc("/home/jovyan/envs/miniforge3/envs/triton/lib/python3.10/site-packages/torch/_inductor/runtime/triton_helpers.py":75:47)
#loc112 = loc("/home/jovyan/envs/miniforge3/envs/triton/lib/python3.10/site-packages/torch/_inductor/runtime/triton_helpers.py":76:25)
#loc113 = loc("/home/jovyan/envs/miniforge3/envs/triton/lib/python3.10/site-packages/torch/_inductor/runtime/triton_helpers.py":76:36)
#loc114 = loc("/home/jovyan/envs/miniforge3/envs/triton/lib/python3.10/site-packages/torch/_inductor/runtime/triton_helpers.py":76:32)
#loc115 = loc("/home/jovyan/envs/miniforge3/envs/triton/lib/python3.10/site-packages/torch/_inductor/runtime/triton_helpers.py":76:47)
#loc116 = loc("/home/jovyan/envs/miniforge3/envs/triton/lib/python3.10/site-packages/torch/_inductor/runtime/triton_helpers.py":76:11)
#loc117 = loc("/home/jovyan/envs/miniforge3/envs/triton/lib/python3.10/site-packages/torch/_inductor/runtime/triton_helpers.py":76:4)
#loc119 = loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":290:36)
#loc121 = loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":290:11)
#loc122 = loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":290:4)
#loc124 = loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":260:15)
#loc125 = loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":260:11)
#loc126 = loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":260:4)
