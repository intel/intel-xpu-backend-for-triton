; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-n8:16:32:64"
target triple = "spir64-unknown-unknown"

@assertFunc_ = internal addrspace(1) constant [8 x i8] c"unknown\00"
@assertFile_ = internal addrspace(1) constant [85 x i8] c"/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py\00"
@assertMessage_ = internal addrspace(1) constant [114 x i8] c"index out of bounds: 0 <= tl.where(ks4 + r0_2 + ks0*x0 < 0, ks4 + ks5 + r0_2 + ks0*x0, ks4 + r0_2 + ks0*x0) < ks5\00"
@__spirv_BuiltInGlobalInvocationId = external dso_local local_unnamed_addr addrspace(1) constant <3 x i64>, align 32
@__spirv_BuiltInLocalInvocationId = external dso_local local_unnamed_addr addrspace(1) constant <3 x i64>, align 32

; Function Attrs: convergent mustprogress nounwind willreturn
declare !dbg !9 spir_func i64 @_Z27__spirv_GroupNonUniformIAddiimj(i32, i32, i64, i32) local_unnamed_addr #0

; Function Attrs: convergent mustprogress nounwind willreturn
declare !dbg !12 spir_func void @_Z7barrierj(i32) local_unnamed_addr #0

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(none)
declare !dbg !13 spir_func i64 @_Z12get_local_idj(i32) local_unnamed_addr #1

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(none)
declare !dbg !14 spir_func i64 @_Z12get_group_idj(i32) local_unnamed_addr #1

; Function Attrs: nounwind
define spir_kernel void @triton_red_fused__to_copy_add_arange_bitwise_and_constant_pad_nd_eq_gt_index_le_lt_permute_sum_view_1(ptr addrspace(1) readonly captures(none) %0, ptr addrspace(1) readonly captures(none) %1, ptr addrspace(1) writeonly captures(none) %2, ptr addrspace(1) writeonly captures(none) %3, i64 %4, i64 %5, i64 %6, i64 %7, i64 %8, i64 %9, i32 %10, i32 %11, ptr addrspace(1) readnone captures(none) %12, ptr addrspace(3) captures(none) %13) local_unnamed_addr #2 !dbg !15 !intel_reqd_sub_group_size !16 !max_work_group_size !17 {
  %15 = tail call spir_func i64 @_Z12get_group_idj(i32 0) #4, !dbg !18
  %16 = trunc i64 %15 to i32, !dbg !18
  %17 = shl i32 %16, 6, !dbg !19
  %18 = tail call spir_func i64 @_Z12get_local_idj(i32 0) #4, !dbg !20
  %19 = trunc i64 %18 to i32, !dbg !20
  %20 = lshr i32 %19, 3, !dbg !20
  %21 = and i32 %20, 15, !dbg !20
  %22 = and i32 %19, 63, !dbg !20
  %23 = or disjoint i32 %21, %17, !dbg !21
  %24 = or disjoint i32 %23, 16, !dbg !21
  %25 = or disjoint i32 %23, 32, !dbg !21
  %26 = or disjoint i32 %23, 48, !dbg !21
  %27 = or disjoint i32 %22, %17, !dbg !21
  %28 = icmp slt i32 %23, %10, !dbg !22
  %29 = icmp slt i32 %24, %10, !dbg !22
  %30 = icmp slt i32 %25, %10, !dbg !22
  %31 = icmp slt i32 %26, %10, !dbg !22
  %32 = icmp slt i32 %27, %10, !dbg !22
  %33 = and i32 %19, 7, !dbg !23
  %34 = sext i32 %23 to i64, !dbg !24
  %35 = sext i32 %24 to i64, !dbg !24
  %36 = sext i32 %25 to i64, !dbg !24
  %37 = sext i32 %26 to i64, !dbg !24
  %.frozen = freeze i64 %34, !dbg !24
  %.frozen38 = freeze i64 %5, !dbg !24
  %38 = sdiv i64 %.frozen, %.frozen38, !dbg !24
  %.frozen39 = freeze i64 %35, !dbg !24
  %.frozen40 = freeze i64 %5, !dbg !24
  %39 = sdiv i64 %.frozen39, %.frozen40, !dbg !24
  %.frozen42 = freeze i64 %36, !dbg !24
  %.frozen43 = freeze i64 %5, !dbg !24
  %40 = sdiv i64 %.frozen42, %.frozen43, !dbg !24
  %.frozen45 = freeze i64 %37, !dbg !24
  %.frozen46 = freeze i64 %5, !dbg !24
  %41 = sdiv i64 %.frozen45, %.frozen46, !dbg !24
  %42 = mul i64 %38, %.frozen38, !dbg !25
  %.decomposed = sub i64 %.frozen, %42, !dbg !25
  %43 = mul i64 %39, %.frozen40, !dbg !25
  %.decomposed41 = sub i64 %.frozen39, %43, !dbg !25
  %44 = mul i64 %40, %.frozen43, !dbg !25
  %.decomposed44 = sub i64 %.frozen42, %44, !dbg !25
  %45 = mul i64 %41, %.frozen46, !dbg !25
  %.decomposed47 = sub i64 %.frozen45, %45, !dbg !25
  %46 = icmp slt i64 %4, 0, !dbg !26
  %47 = mul i64 %38, %4, !dbg !30
  %48 = mul i64 %39, %4, !dbg !30
  %49 = mul i64 %40, %4, !dbg !30
  %50 = mul i64 %41, %4, !dbg !30
  %51 = mul i64 %.decomposed, %4, !dbg !31
  %52 = mul i64 %.decomposed41, %4, !dbg !31
  %53 = mul i64 %.decomposed44, %4, !dbg !31
  %54 = mul i64 %.decomposed47, %4, !dbg !31
  %55 = add i64 %9, %8, !dbg !32
  %56 = icmp sgt i32 %11, 0, !dbg !33
  br i1 %56, label %.lr.ph, label %._crit_edge, !dbg !33

.lr.ph:                                           ; preds = %14
  %57 = load i64, ptr addrspace(1) @__spirv_BuiltInGlobalInvocationId, align 32
  %58 = load i64, ptr addrspace(1) getelementptr inbounds nuw (i8, ptr addrspace(1) @__spirv_BuiltInGlobalInvocationId, i64 8), align 8
  %59 = load i64, ptr addrspace(1) getelementptr inbounds nuw (i8, ptr addrspace(1) @__spirv_BuiltInGlobalInvocationId, i64 16), align 16
  %60 = load i64, ptr addrspace(1) @__spirv_BuiltInLocalInvocationId, align 32
  %61 = load i64, ptr addrspace(1) getelementptr inbounds nuw (i8, ptr addrspace(1) @__spirv_BuiltInLocalInvocationId, i64 8), align 8
  %62 = load i64, ptr addrspace(1) getelementptr inbounds nuw (i8, ptr addrspace(1) @__spirv_BuiltInLocalInvocationId, i64 16), align 16
  br label %63, !dbg !33

63:                                               ; preds = %.lr.ph, %172
  %64 = phi i64 [ 0, %.lr.ph ], [ %184, %172 ]
  %65 = phi i64 [ 0, %.lr.ph ], [ %187, %172 ]
  %66 = phi i64 [ 0, %.lr.ph ], [ %190, %172 ]
  %67 = phi i64 [ 0, %.lr.ph ], [ %193, %172 ]
  %68 = phi i32 [ 0, %.lr.ph ], [ %194, %172 ]
  %69 = or disjoint i32 %68, %33, !dbg !34
  %70 = icmp slt i32 %69, %11, !dbg !35
  %71 = sext i32 %69 to i64, !dbg !36
  %.frozen48 = freeze i64 %71, !dbg !36
  %.frozen49 = freeze i64 %4, !dbg !36
  %72 = sdiv i64 %.frozen48, %.frozen49, !dbg !36
  %73 = mul i64 %72, %.frozen49, !dbg !37
  %.decomposed50 = sub i64 %.frozen48, %73, !dbg !37
  %.not = icmp ne i64 %.decomposed50, 0, !dbg !38
  %74 = icmp slt i32 %68, 0, !dbg !39
  %75 = xor i1 %46, %74, !dbg !40
  %narrow = select i1 %75, i1 %.not, i1 false, !dbg !41
  %76 = sext i1 %narrow to i64, !dbg !41
  %77 = add nsw i64 %72, %76, !dbg !41
  %78 = add i64 %77, %47, !dbg !42
  %79 = add i64 %77, %48, !dbg !42
  %80 = add i64 %77, %49, !dbg !42
  %81 = add i64 %77, %50, !dbg !42
  %82 = icmp slt i64 %78, %6, !dbg !43
  %83 = icmp slt i64 %79, %6, !dbg !43
  %84 = icmp slt i64 %80, %6, !dbg !43
  %85 = icmp slt i64 %81, %6, !dbg !43
  %86 = add i64 %.decomposed50, %51, !dbg !44
  %87 = add i64 %.decomposed50, %52, !dbg !44
  %88 = add i64 %.decomposed50, %53, !dbg !44
  %89 = add i64 %.decomposed50, %54, !dbg !44
  %90 = icmp slt i64 %86, %7, !dbg !45
  %91 = icmp slt i64 %87, %7, !dbg !45
  %92 = icmp slt i64 %88, %7, !dbg !45
  %93 = icmp slt i64 %89, %7, !dbg !45
  %94 = and i1 %90, %82, !dbg !46
  %95 = and i1 %91, %83, !dbg !46
  %96 = and i1 %92, %84, !dbg !46
  %97 = and i1 %93, %85, !dbg !46
  %98 = load i64, ptr addrspace(1) %0, align 8, !dbg !47
  %99 = select i1 %94, i64 %98, i64 0, !dbg !48
  %100 = select i1 %95, i64 %98, i64 0, !dbg !48
  %101 = select i1 %96, i64 %98, i64 0, !dbg !48
  %102 = select i1 %97, i64 %98, i64 0, !dbg !48
  %103 = add i64 %99, %78, !dbg !49
  %104 = add i64 %100, %79, !dbg !49
  %105 = add i64 %101, %80, !dbg !49
  %106 = add i64 %102, %81, !dbg !49
  %107 = add i64 %.decomposed50, %8, !dbg !50
  %108 = add i64 %107, %51, !dbg !51
  %109 = add i64 %107, %52, !dbg !51
  %110 = add i64 %107, %53, !dbg !51
  %111 = add i64 %107, %54, !dbg !51
  %112 = icmp sle i64 %108, %103, !dbg !52
  %113 = icmp sle i64 %109, %104, !dbg !52
  %114 = icmp sle i64 %110, %105, !dbg !52
  %115 = icmp sle i64 %111, %106, !dbg !52
  %116 = icmp slt i64 %108, 0, !dbg !53
  %117 = icmp slt i64 %109, 0, !dbg !53
  %118 = icmp slt i64 %110, 0, !dbg !53
  %119 = icmp slt i64 %111, 0, !dbg !53
  %120 = add i64 %55, %.decomposed50, !dbg !54
  %121 = add i64 %120, %51, !dbg !55
  %122 = add i64 %120, %52, !dbg !55
  %123 = add i64 %120, %53, !dbg !55
  %124 = add i64 %120, %54, !dbg !55
  %125 = select i1 %116, i64 %121, i64 %108, !dbg !56
  %126 = select i1 %117, i64 %122, i64 %109, !dbg !56
  %127 = select i1 %118, i64 %123, i64 %110, !dbg !56
  %128 = select i1 %119, i64 %124, i64 %111, !dbg !56
  %129 = icmp slt i64 %125, 0, !dbg !57
  %130 = icmp slt i64 %126, 0, !dbg !57
  %131 = icmp slt i64 %127, 0, !dbg !57
  %132 = icmp slt i64 %128, 0, !dbg !57
  %133 = icmp sge i64 %125, %9, !dbg !58
  %134 = icmp sge i64 %126, %9, !dbg !58
  %135 = icmp sge i64 %127, %9, !dbg !58
  %136 = icmp sge i64 %128, %9, !dbg !58
  %.not7 = or i1 %129, %133, !dbg !59
  %.not12 = or i1 %130, %134, !dbg !59
  %.not17 = or i1 %131, %135, !dbg !59
  %.not22 = or i1 %132, %136, !dbg !60
  %137 = and i1 %70, %94, !dbg !60
  %138 = and i1 %70, %95, !dbg !60
  %139 = and i1 %70, %96, !dbg !60
  %140 = and i1 %70, %97, !dbg !60
  %141 = and i1 %28, %137, !dbg !61
  %142 = and i1 %29, %138, !dbg !61
  %143 = and i1 %30, %139, !dbg !61
  %144 = and i1 %31, %140, !dbg !61
  %.not4 = and i1 %.not7, %141, !dbg !62
  %.not9 = and i1 %.not12, %142, !dbg !62
  %.not14 = and i1 %.not17, %143, !dbg !62
  %.not19 = and i1 %.not22, %144, !dbg !63
  %145 = or i1 %.not4, %.not9, !dbg !63
  %146 = or i1 %.not14, %145, !dbg !63
  %147 = or i1 %.not19, %146, !dbg !63
  br i1 %147, label %148, label %149, !dbg !63

148:                                              ; preds = %63
  tail call spir_func void @__devicelib_assert_fail(ptr addrspace(4) noundef addrspacecast (ptr addrspace(1) @assertMessage_ to ptr addrspace(4)), ptr addrspace(4) noundef addrspacecast (ptr addrspace(1) @assertFile_ to ptr addrspace(4)), i32 noundef 53, ptr addrspace(4) noundef addrspacecast (ptr addrspace(1) @assertFunc_ to ptr addrspace(4)), i64 noundef %57, i64 noundef %58, i64 noundef %59, i64 noundef %60, i64 noundef %61, i64 noundef %62) #5, !dbg !63
  br label %149, !dbg !63

149:                                              ; preds = %148, %63
  tail call spir_func void @_Z7barrierj(i32 1) #6, !dbg !63
  %150 = getelementptr i1, ptr addrspace(1) %1, i64 %126, !dbg !64
  %151 = getelementptr i1, ptr addrspace(1) %1, i64 %127, !dbg !64
  %152 = getelementptr i1, ptr addrspace(1) %1, i64 %128, !dbg !64
  br i1 %141, label %153, label %157, !dbg !65

153:                                              ; preds = %149
  %154 = getelementptr i1, ptr addrspace(1) %1, i64 %125, !dbg !64
  %155 = load i8, ptr addrspace(1) %154, align 1, !dbg !65
  %156 = icmp ne i8 %155, 0, !dbg !65
  br label %157, !dbg !65

157:                                              ; preds = %153, %149
  %158 = phi i1 [ %156, %153 ], [ false, %149 ], !dbg !65
  br i1 %142, label %159, label %162, !dbg !65

159:                                              ; preds = %157
  %160 = load i8, ptr addrspace(1) %150, align 1, !dbg !65
  %161 = icmp ne i8 %160, 0, !dbg !65
  br label %162, !dbg !65

162:                                              ; preds = %159, %157
  %163 = phi i1 [ %161, %159 ], [ false, %157 ], !dbg !65
  br i1 %143, label %164, label %167, !dbg !65

164:                                              ; preds = %162
  %165 = load i8, ptr addrspace(1) %151, align 1, !dbg !65
  %166 = icmp ne i8 %165, 0, !dbg !65
  br label %167, !dbg !65

167:                                              ; preds = %164, %162
  %168 = phi i1 [ %166, %164 ], [ false, %162 ], !dbg !65
  br i1 %144, label %169, label %172, !dbg !65

169:                                              ; preds = %167
  %170 = load i8, ptr addrspace(1) %152, align 1, !dbg !65
  %171 = icmp ne i8 %170, 0, !dbg !65
  br label %172, !dbg !65

172:                                              ; preds = %169, %167
  %173 = phi i1 [ %171, %169 ], [ false, %167 ], !dbg !65
  %174 = and i1 %112, %158, !dbg !66
  %175 = and i1 %113, %163, !dbg !66
  %176 = and i1 %114, %168, !dbg !66
  %177 = and i1 %115, %173, !dbg !66
  %178 = and i1 %28, %70, !dbg !67
  %179 = and i1 %29, %70, !dbg !67
  %180 = and i1 %30, %70, !dbg !67
  %181 = and i1 %31, %70, !dbg !67
  %182 = select i1 %178, i1 %94, i1 false, !dbg !68
  %narrow23 = select i1 %182, i1 %174, i1 false, !dbg !68
  %183 = zext i1 %narrow23 to i64, !dbg !68
  %184 = add i64 %64, %183, !dbg !68
  %185 = select i1 %179, i1 %95, i1 false, !dbg !68
  %narrow24 = select i1 %185, i1 %175, i1 false, !dbg !68
  %186 = zext i1 %narrow24 to i64, !dbg !68
  %187 = add i64 %65, %186, !dbg !68
  %188 = select i1 %180, i1 %96, i1 false, !dbg !68
  %narrow25 = select i1 %188, i1 %176, i1 false, !dbg !68
  %189 = zext i1 %narrow25 to i64, !dbg !68
  %190 = add i64 %66, %189, !dbg !68
  %191 = select i1 %181, i1 %97, i1 false, !dbg !68
  %narrow26 = select i1 %191, i1 %177, i1 false, !dbg !68
  %192 = zext i1 %narrow26 to i64, !dbg !68
  %193 = add i64 %67, %192, !dbg !68
  %194 = add i32 %68, 8, !dbg !33
  %195 = icmp slt i32 %194, %11, !dbg !33
  br i1 %195, label %63, label %._crit_edge, !dbg !33

._crit_edge:                                      ; preds = %172, %14
  %196 = phi i64 [ 0, %14 ], [ %184, %172 ], !dbg !69
  %197 = phi i64 [ 0, %14 ], [ %187, %172 ], !dbg !69
  %198 = phi i64 [ 0, %14 ], [ %190, %172 ], !dbg !69
  %199 = phi i64 [ 0, %14 ], [ %193, %172 ], !dbg !69
  %200 = tail call spir_func i64 @_Z27__spirv_GroupNonUniformIAddiimj(i32 3, i32 3, i64 %196, i32 8) #6, !dbg !70
  %201 = tail call spir_func i64 @_Z27__spirv_GroupNonUniformIAddiimj(i32 3, i32 3, i64 %197, i32 8) #6, !dbg !70
  %202 = tail call spir_func i64 @_Z27__spirv_GroupNonUniformIAddiimj(i32 3, i32 3, i64 %198, i32 8) #6, !dbg !70
  %203 = tail call spir_func i64 @_Z27__spirv_GroupNonUniformIAddiimj(i32 3, i32 3, i64 %199, i32 8) #6, !dbg !70
  %204 = icmp sgt i64 %200, 0, !dbg !74
  %205 = icmp sgt i64 %201, 0, !dbg !74
  %206 = icmp sgt i64 %202, 0, !dbg !74
  %207 = icmp sgt i64 %203, 0, !dbg !74
  %208 = mul i64 %4, %4, !dbg !75
  %209 = icmp slt i64 %200, %208, !dbg !76
  %210 = icmp slt i64 %201, %208, !dbg !76
  %211 = icmp slt i64 %202, %208, !dbg !76
  %212 = icmp slt i64 %203, %208, !dbg !76
  %213 = and i1 %204, %209, !dbg !77
  %214 = and i1 %205, %210, !dbg !77
  %215 = and i1 %206, %211, !dbg !77
  %216 = and i1 %207, %212, !dbg !77
  %217 = zext i1 %213 to i8, !dbg !78
  %218 = zext i1 %214 to i8, !dbg !78
  %219 = zext i1 %215 to i8, !dbg !78
  %220 = zext i1 %216 to i8, !dbg !78
  %221 = and i32 %19, 64, !dbg !78
  %222 = icmp eq i32 %221, 0, !dbg !78
  %223 = shl nuw nsw i32 %21, 1, !dbg !78
  %224 = zext nneg i32 %223 to i64, !dbg !78
  %225 = getelementptr inbounds nuw i8, ptr addrspace(3) %13, i64 %224, !dbg !78
  %226 = insertelement <1 x i8> poison, i8 %217, i64 0, !dbg !78
  store <1 x i8> %226, ptr addrspace(3) %225, align 1, !dbg !78
  %227 = getelementptr inbounds nuw i8, ptr addrspace(3) %225, i64 32, !dbg !78
  %228 = insertelement <1 x i8> poison, i8 %218, i64 0, !dbg !78
  store <1 x i8> %228, ptr addrspace(3) %227, align 1, !dbg !78
  %229 = getelementptr inbounds nuw i8, ptr addrspace(3) %225, i64 64, !dbg !78
  %230 = insertelement <1 x i8> poison, i8 %219, i64 0, !dbg !78
  store <1 x i8> %230, ptr addrspace(3) %229, align 1, !dbg !78
  %231 = getelementptr inbounds nuw i8, ptr addrspace(3) %225, i64 96, !dbg !78
  %232 = insertelement <1 x i8> poison, i8 %220, i64 0, !dbg !78
  store <1 x i8> %232, ptr addrspace(3) %231, align 1, !dbg !78
  tail call spir_func void @_Z7barrierj(i32 1) #6, !dbg !78
  %233 = shl i64 %18, 1, !dbg !78
  %234 = and i64 %233, 126, !dbg !78
  %235 = getelementptr inbounds nuw i8, ptr addrspace(3) %13, i64 %234, !dbg !78
  %236 = load <1 x i8>, ptr addrspace(3) %235, align 1, !dbg !78
  %237 = icmp eq i64 %200, %208, !dbg !79
  %238 = icmp eq i64 %201, %208, !dbg !79
  %239 = icmp eq i64 %202, %208, !dbg !79
  %240 = icmp eq i64 %203, %208, !dbg !79
  tail call spir_func void @_Z7barrierj(i32 1) #6, !dbg !78
  %241 = zext i1 %237 to i8, !dbg !78
  %242 = zext i1 %238 to i8, !dbg !78
  %243 = zext i1 %239 to i8, !dbg !78
  %244 = zext i1 %240 to i8, !dbg !78
  %245 = insertelement <1 x i8> poison, i8 %241, i64 0, !dbg !78
  store <1 x i8> %245, ptr addrspace(3) %225, align 1, !dbg !78
  %246 = insertelement <1 x i8> poison, i8 %242, i64 0, !dbg !78
  store <1 x i8> %246, ptr addrspace(3) %227, align 1, !dbg !78
  %247 = insertelement <1 x i8> poison, i8 %243, i64 0, !dbg !78
  store <1 x i8> %247, ptr addrspace(3) %229, align 1, !dbg !78
  %248 = insertelement <1 x i8> poison, i8 %244, i64 0, !dbg !78
  store <1 x i8> %248, ptr addrspace(3) %231, align 1, !dbg !78
  tail call spir_func void @_Z7barrierj(i32 1) #6, !dbg !78
  %249 = and i1 %222, %32, !dbg !80
  br i1 %249, label %250, label %.critedge, !dbg !80

250:                                              ; preds = %._crit_edge
  %251 = load i8, ptr addrspace(3) %235, align 1, !dbg !78
  %252 = icmp ne i8 %251, 0, !dbg !78
  %253 = zext i1 %252 to i32, !dbg !78
  %254 = extractelement <1 x i8> %236, i64 0, !dbg !78
  %255 = icmp ne i8 %254, 0, !dbg !78
  %256 = zext i1 %255 to i32, !dbg !78
  %257 = insertelement <1 x i32> poison, i32 %256, i64 0, !dbg !80
  %258 = sext i32 %27 to i64, !dbg !81
  %259 = getelementptr i32, ptr addrspace(1) %2, i64 %258, !dbg !81
  store <1 x i32> %257, ptr addrspace(1) %259, align 4, !dbg !80
  %260 = insertelement <1 x i32> poison, i32 %253, i64 0, !dbg !82
  %261 = getelementptr i32, ptr addrspace(1) %3, i64 %258, !dbg !83
  store <1 x i32> %260, ptr addrspace(1) %261, align 4, !dbg !82
  br label %.critedge, !dbg !82

.critedge:                                        ; preds = %._crit_edge, %250
  ret void, !dbg !84
}

; Function Attrs: convergent mustprogress norecurse nounwind
declare extern_weak dso_local spir_func void @__devicelib_assert_fail(ptr addrspace(4) noundef, ptr addrspace(4) noundef, i32 noundef, ptr addrspace(4) noundef, i64 noundef, i64 noundef, i64 noundef, i64 noundef, i64 noundef, i64 noundef) local_unnamed_addr #3

attributes #0 = { convergent mustprogress nounwind willreturn }
attributes #1 = { mustprogress nofree nosync nounwind willreturn memory(none) }
attributes #2 = { nounwind }
attributes #3 = { convergent mustprogress norecurse nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "sycl-module-id"="/netbatch/donb74095_00/dir/workspace/NIT/xmain-rel/LX/xmainefi2linux_release/ws/icsws/llvm/libdevice/fallback-cassert.cpp" "sycl-optlevel"="2" }
attributes #4 = { nounwind willreturn memory(none) }
attributes #5 = { convergent nounwind }
attributes #6 = { convergent nounwind willreturn }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3, !4, !5}
!opencl.spir.version = !{!6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6}
!spirv.Source = !{!7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7}
!llvm.ident = !{!8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py", directory: "/tmp/torchinductor_jovyan/xy")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 1, !"wchar_size", i32 4}
!4 = !{i32 1, !"sycl-device", i32 1}
!5 = !{i32 7, !"frame-pointer", i32 2}
!6 = !{i32 1, i32 2}
!7 = !{i32 3, i32 100000}
!8 = !{!"Intel(R) oneAPI DPC++/C++ Compiler 2025.0.0 (2025.0.0.20241008)"}
!9 = !DISubprogram(name: "_Z27__spirv_GroupNonUniformIAddiimj", linkageName: "_Z27__spirv_GroupNonUniformIAddiimj", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagOptimized)
!10 = !DISubroutineType(cc: DW_CC_normal, types: !11)
!11 = !{}
!12 = !DISubprogram(name: "_Z7barrierj", linkageName: "_Z7barrierj", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagOptimized)
!13 = !DISubprogram(name: "_Z12get_local_idj", linkageName: "_Z12get_local_idj", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagOptimized)
!14 = !DISubprogram(name: "_Z12get_group_idj", linkageName: "_Z12get_group_idj", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagOptimized)
!15 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_arange_bitwise_and_constant_pad_nd_eq_gt_index_le_lt_permute_sum_view_1", linkageName: "triton_red_fused__to_copy_add_arange_bitwise_and_constant_pad_nd_eq_gt_index_le_lt_permute_sum_view_1", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!16 = !{i32 32}
!17 = !{i64 128, i64 1, i64 1}
!18 = !DILocation(line: 21, column: 28, scope: !15)
!19 = !DILocation(line: 21, column: 33, scope: !15)
!20 = !DILocation(line: 22, column: 44, scope: !15)
!21 = !DILocation(line: 22, column: 23, scope: !15)
!22 = !DILocation(line: 23, column: 21, scope: !15)
!23 = !DILocation(line: 24, column: 37, scope: !15)
!24 = !DILocation(line: 26, column: 19, scope: !15)
!25 = !DILocation(line: 27, column: 19, scope: !15)
!26 = !DILocation(line: 76, column: 36, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !15, file: !28, discriminator: 0)
!28 = !DIFile(filename: "triton_helpers.py", directory: "/home/jovyan/envs/miniforge3/envs/triton/lib/python3.10/site-packages/torch/_inductor/runtime")
!29 = !DILocation(line: 35, column: 59, scope: !15)
!30 = !DILocation(line: 37, column: 26, scope: !15)
!31 = !DILocation(line: 40, column: 26, scope: !15)
!32 = !DILocation(line: 53, column: 72, scope: !15)
!33 = !DILocation(line: 30, column: 40, scope: !15)
!34 = !DILocation(line: 31, column: 31, scope: !15)
!35 = !DILocation(line: 32, column: 29, scope: !15)
!36 = !DILocation(line: 73, column: 16, scope: !27, inlinedAt: !29)
!37 = !DILocation(line: 74, column: 20, scope: !27, inlinedAt: !29)
!38 = !DILocation(line: 75, column: 34, scope: !27, inlinedAt: !29)
!39 = !DILocation(line: 76, column: 25, scope: !27, inlinedAt: !29)
!40 = !DILocation(line: 76, column: 32, scope: !27, inlinedAt: !29)
!41 = !DILocation(line: 76, column: 47, scope: !27, inlinedAt: !29)
!42 = !DILocation(line: 37, column: 22, scope: !15)
!43 = !DILocation(line: 39, column: 22, scope: !15)
!44 = !DILocation(line: 40, column: 22, scope: !15)
!45 = !DILocation(line: 42, column: 22, scope: !15)
!46 = !DILocation(line: 43, column: 22, scope: !15)
!47 = !DILocation(line: 44, column: 23, scope: !15)
!48 = !DILocation(line: 46, column: 36, scope: !15)
!49 = !DILocation(line: 48, column: 24, scope: !15)
!50 = !DILocation(line: 49, column: 22, scope: !15)
!51 = !DILocation(line: 49, column: 29, scope: !15)
!52 = !DILocation(line: 50, column: 25, scope: !15)
!53 = !DILocation(line: 53, column: 63, scope: !15)
!54 = !DILocation(line: 53, column: 78, scope: !15)
!55 = !DILocation(line: 53, column: 85, scope: !15)
!56 = !DILocation(line: 53, column: 93, scope: !15)
!57 = !DILocation(line: 53, column: 32, scope: !15)
!58 = !DILocation(line: 53, column: 202, scope: !15)
!59 = !DILocation(line: 53, column: 118, scope: !15)
!60 = !DILocation(line: 53, column: 222, scope: !15)
!61 = !DILocation(line: 53, column: 229, scope: !15)
!62 = !DILocation(line: 53, column: 210, scope: !15)
!63 = !DILocation(line: 53, column: 237, scope: !15)
!64 = !DILocation(line: 54, column: 35, scope: !15)
!65 = !DILocation(line: 54, column: 119, scope: !15)
!66 = !DILocation(line: 55, column: 24, scope: !15)
!67 = !DILocation(line: 61, column: 36, scope: !15)
!68 = !DILocation(line: 61, column: 50, scope: !15)
!69 = !DILocation(line: 28, column: 44, scope: !15)
!70 = !DILocation(line: 290, column: 36, scope: !71, inlinedAt: !73)
!71 = distinct !DILexicalBlockFile(scope: !15, file: !72, discriminator: 0)
!72 = !DIFile(filename: "standard.py", directory: "/home/jovyan/intel-xpu-backend-for-triton/python/triton/language")
!73 = !DILocation(line: 62, column: 27, scope: !15)
!74 = !DILocation(line: 64, column: 20, scope: !15)
!75 = !DILocation(line: 65, column: 16, scope: !15)
!76 = !DILocation(line: 66, column: 20, scope: !15)
!77 = !DILocation(line: 67, column: 20, scope: !15)
!78 = !DILocation(line: 0, scope: !15)
!79 = !DILocation(line: 70, column: 21, scope: !15)
!80 = !DILocation(line: 73, column: 37, scope: !15)
!81 = !DILocation(line: 73, column: 25, scope: !15)
!82 = !DILocation(line: 74, column: 37, scope: !15)
!83 = !DILocation(line: 74, column: 25, scope: !15)
!84 = !DILocation(line: 74, column: 4, scope: !15)
