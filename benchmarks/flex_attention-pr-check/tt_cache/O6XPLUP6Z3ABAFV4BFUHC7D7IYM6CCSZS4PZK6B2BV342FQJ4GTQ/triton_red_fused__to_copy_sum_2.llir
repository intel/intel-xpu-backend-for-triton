; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-n8:16:32:64"
target triple = "spir64-unknown-unknown"

; Function Attrs: convergent mustprogress nounwind willreturn
declare !dbg !9 spir_func i64 @_Z27__spirv_GroupNonUniformIAddiimj(i32, i32, i64, i32) local_unnamed_addr #0

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(none)
declare !dbg !12 spir_func i64 @_Z12get_local_idj(i32) local_unnamed_addr #1

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(none)
declare !dbg !13 spir_func i64 @_Z12get_group_idj(i32) local_unnamed_addr #1

; Function Attrs: nounwind
define spir_kernel void @triton_red_fused__to_copy_sum_2(ptr addrspace(1) readonly captures(none) %0, ptr addrspace(1) writeonly captures(none) %1, i64 %2, i32 %3, i32 %4, ptr addrspace(1) readnone captures(none) %5) local_unnamed_addr #2 !dbg !14 !intel_reqd_sub_group_size !15 !max_work_group_size !16 {
  %7 = tail call spir_func i64 @_Z12get_group_idj(i32 0) #3, !dbg !17
  %8 = trunc i64 %7 to i32, !dbg !17
  %9 = icmp sgt i32 %3, %8, !dbg !18
  %.fr = freeze i1 %9
  %10 = tail call spir_func i64 @_Z12get_local_idj(i32 0) #3, !dbg !19
  %11 = trunc i64 %10 to i32, !dbg !19
  %12 = and i32 %11, 7, !dbg !19
  %sext = shl i64 %7, 32, !dbg !20
  %13 = icmp sgt i32 %4, 0, !dbg !21
  br i1 %13, label %.lr.ph, label %._crit_edge, !dbg !21

.lr.ph:                                           ; preds = %6
  %14 = ashr exact i64 %sext, 32, !dbg !20
  %15 = mul i64 %14, %2, !dbg !20
  %16 = getelementptr i32, ptr addrspace(1) %0, i64 %15
  br i1 %.fr, label %.lr.ph.split, label %.lr.ph.split.us

.lr.ph.split.us:                                  ; preds = %.lr.ph, %.lr.ph.split.us
  %17 = phi i32 [ %18, %.lr.ph.split.us ], [ 0, %.lr.ph ]
  %18 = add i32 %17, 8, !dbg !21
  %19 = icmp slt i32 %18, %4, !dbg !21
  br i1 %19, label %.lr.ph.split.us, label %._crit_edge, !dbg !21

.lr.ph.split:                                     ; preds = %.lr.ph, %29
  %20 = phi i64 [ %31, %29 ], [ 0, %.lr.ph ]
  %21 = phi i32 [ %32, %29 ], [ 0, %.lr.ph ]
  %22 = or disjoint i32 %21, %12, !dbg !22
  %23 = icmp slt i32 %22, %4, !dbg !23
  br i1 %23, label %24, label %29, !dbg !24

24:                                               ; preds = %.lr.ph.split
  %25 = sext i32 %22 to i64, !dbg !25
  %26 = getelementptr i32, ptr addrspace(1) %16, i64 %25, !dbg !26
  %27 = load i32, ptr addrspace(1) %26, align 4, !dbg !24
  %28 = sext i32 %27 to i64, !dbg !27
  br label %29, !dbg !24

29:                                               ; preds = %24, %.lr.ph.split
  %30 = phi i64 [ %28, %24 ], [ 0, %.lr.ph.split ], !dbg !24
  %31 = add i64 %30, %20, !dbg !28
  %32 = add i32 %21, 8, !dbg !21
  %33 = icmp slt i32 %32, %4, !dbg !21
  br i1 %33, label %.lr.ph.split, label %._crit_edge, !dbg !21

._crit_edge:                                      ; preds = %.lr.ph.split.us, %29, %6
  %.lcssa = phi i64 [ 0, %6 ], [ %31, %29 ], [ 0, %.lr.ph.split.us ], !dbg !29
  %34 = tail call spir_func i64 @_Z27__spirv_GroupNonUniformIAddiimj(i32 3, i32 3, i64 %.lcssa, i32 8) #4, !dbg !30
  %35 = and i32 %11, 63, !dbg !34
  %36 = icmp eq i32 %35, 0, !dbg !34
  %37 = and i1 %.fr, %36, !dbg !34
  br i1 %37, label %38, label %43, !dbg !34

38:                                               ; preds = %._crit_edge
  %39 = trunc i64 %34 to i32, !dbg !35
  %40 = insertelement <1 x i32> poison, i32 %39, i64 0, !dbg !34
  %41 = ashr exact i64 %sext, 30, !dbg !36
  %42 = getelementptr i8, ptr addrspace(1) %1, i64 %41, !dbg !36
  store <1 x i32> %40, ptr addrspace(1) %42, align 4, !dbg !34
  br label %43, !dbg !34

43:                                               ; preds = %38, %._crit_edge
  ret void, !dbg !37
}

attributes #0 = { convergent mustprogress nounwind willreturn }
attributes #1 = { mustprogress nofree nosync nounwind willreturn memory(none) }
attributes #2 = { nounwind }
attributes #3 = { nounwind willreturn memory(none) }
attributes #4 = { convergent nounwind willreturn }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3, !4, !5}
!opencl.spir.version = !{!6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6}
!spirv.Source = !{!7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7}
!llvm.ident = !{!8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "cf6x53zrv5ar6ocfiivxy3fpjkl34dlfemjvuzz4ceublpa5qy2s.py", directory: "/tmp/torchinductor_jovyan/f6")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 1, !"wchar_size", i32 4}
!4 = !{i32 1, !"sycl-device", i32 1}
!5 = !{i32 7, !"frame-pointer", i32 2}
!6 = !{i32 1, i32 2}
!7 = !{i32 3, i32 100000}
!8 = !{!"Intel(R) oneAPI DPC++/C++ Compiler 2025.0.0 (2025.0.0.20241008)"}
!9 = !DISubprogram(name: "_Z27__spirv_GroupNonUniformIAddiimj", linkageName: "_Z27__spirv_GroupNonUniformIAddiimj", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagOptimized)
!10 = !DISubroutineType(cc: DW_CC_normal, types: !11)
!11 = !{}
!12 = !DISubprogram(name: "_Z12get_local_idj", linkageName: "_Z12get_local_idj", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagOptimized)
!13 = !DISubprogram(name: "_Z12get_group_idj", linkageName: "_Z12get_group_idj", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagOptimized)
!14 = distinct !DISubprogram(name: "triton_red_fused__to_copy_sum_2", linkageName: "triton_red_fused__to_copy_sum_2", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!15 = !{i32 32}
!16 = !{i64 64, i64 1, i64 1}
!17 = !DILocation(line: 21, column: 28, scope: !14)
!18 = !DILocation(line: 23, column: 21, scope: !14)
!19 = !DILocation(line: 24, column: 37, scope: !14)
!20 = !DILocation(line: 34, column: 45, scope: !14)
!21 = !DILocation(line: 28, column: 40, scope: !14)
!22 = !DILocation(line: 29, column: 31, scope: !14)
!23 = !DILocation(line: 30, column: 29, scope: !14)
!24 = !DILocation(line: 34, column: 50, scope: !14)
!25 = !DILocation(line: 34, column: 41, scope: !14)
!26 = !DILocation(line: 34, column: 34, scope: !14)
!27 = !DILocation(line: 35, column: 23, scope: !14)
!28 = !DILocation(line: 38, column: 48, scope: !14)
!29 = !DILocation(line: 27, column: 43, scope: !14)
!30 = !DILocation(line: 290, column: 36, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlockFile(scope: !14, file: !32, discriminator: 0)
!32 = !DIFile(filename: "standard.py", directory: "/home/jovyan/intel-xpu-backend-for-triton/python/triton/language")
!33 = !DILocation(line: 39, column: 25, scope: !14)
!34 = !DILocation(line: 41, column: 36, scope: !14)
!35 = !DILocation(line: 40, column: 19, scope: !14)
!36 = !DILocation(line: 41, column: 25, scope: !14)
!37 = !DILocation(line: 41, column: 4, scope: !14)
