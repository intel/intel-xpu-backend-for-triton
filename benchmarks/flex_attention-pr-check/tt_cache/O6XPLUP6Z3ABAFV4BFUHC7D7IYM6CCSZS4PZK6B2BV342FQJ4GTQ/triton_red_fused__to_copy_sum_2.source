#loc = loc("/tmp/torchinductor_jovyan/f6/cf6x53zrv5ar6ocfiivxy3fpjkl34dlfemjvuzz4ceublpa5qy2s.py":18:0)
#loc29 = loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":284:0)
#loc31 = loc(unknown)
#loc34 = loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":259:0)
module {
  tt.func public @triton_red_fused__to_copy_sum_2(%arg0: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_jovyan/f6/cf6x53zrv5ar6ocfiivxy3fpjkl34dlfemjvuzz4ceublpa5qy2s.py":18:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_jovyan/f6/cf6x53zrv5ar6ocfiivxy3fpjkl34dlfemjvuzz4ceublpa5qy2s.py":18:0), %arg2: i64 loc("/tmp/torchinductor_jovyan/f6/cf6x53zrv5ar6ocfiivxy3fpjkl34dlfemjvuzz4ceublpa5qy2s.py":18:0), %arg3: i32 loc("/tmp/torchinductor_jovyan/f6/cf6x53zrv5ar6ocfiivxy3fpjkl34dlfemjvuzz4ceublpa5qy2s.py":18:0), %arg4: i32 loc("/tmp/torchinductor_jovyan/f6/cf6x53zrv5ar6ocfiivxy3fpjkl34dlfemjvuzz4ceublpa5qy2s.py":18:0)) attributes {noinline = false} {
    %0 = tt.get_program_id x : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc2)
    %c1_i32_0 = arith.constant 1 : i32 loc(#loc2)
    %1 = arith.muli %0, %c1_i32_0 : i32 loc(#loc2)
    %2 = tt.make_range {end = 1 : i32, start = 0 : i32} : tensor<1xi32> loc(#loc3)
    %3 = tt.expand_dims %2 {axis = 1 : i32} : tensor<1xi32> -> tensor<1x1xi32> loc(#loc4)
    %4 = tt.splat %1 : i32 -> tensor<1x1xi32> loc(#loc5)
    %5 = arith.addi %4, %3 : tensor<1x1xi32> loc(#loc5)
    %6 = tt.splat %arg3 : i32 -> tensor<1x1xi32> loc(#loc6)
    %7 = arith.cmpi slt, %5, %6 : tensor<1x1xi32> loc(#loc6)
    %8 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32> loc(#loc7)
    %9 = tt.expand_dims %8 {axis = 0 : i32} : tensor<8xi32> -> tensor<1x8xi32> loc(#loc8)
    %c0_i64 = arith.constant 0 : i64 loc(#loc9)
    %cst = arith.constant dense<0> : tensor<1x8xi64> loc(#loc9)
    %c0_i32 = arith.constant 0 : i32 loc(#loc10)
    %c8_i32 = arith.constant 8 : i32 loc(#loc10)
    %10 = arith.bitcast %c0_i32 : i32 to i32 loc(#loc10)
    %11 = arith.bitcast %arg4 : i32 to i32 loc(#loc10)
    %12 = arith.bitcast %c8_i32 : i32 to i32 loc(#loc10)
    %13 = ub.poison : i32 loc(#loc10)
    %14 = scf.for %arg5 = %10 to %11 step %12 iter_args(%arg6 = %cst) -> (tensor<1x8xi64>)  : i32 {
      %20 = tt.splat %arg5 : i32 -> tensor<1x8xi32> loc(#loc11)
      %21 = arith.addi %20, %9 : tensor<1x8xi32> loc(#loc11)
      %22 = tt.splat %arg4 : i32 -> tensor<1x8xi32> loc(#loc12)
      %23 = arith.cmpi slt, %21, %22 : tensor<1x8xi32> loc(#loc12)
      %24 = arith.extsi %5 : tensor<1x1xi32> to tensor<1x1xi64> loc(#loc13)
      %25 = tt.splat %arg2 : i64 -> tensor<1x1xi64> loc(#loc13)
      %26 = arith.muli %25, %24 : tensor<1x1xi64> loc(#loc13)
      %27 = arith.extsi %21 : tensor<1x8xi32> to tensor<1x8xi64> loc(#loc14)
      %28 = tt.broadcast %26 : tensor<1x1xi64> -> tensor<1x8xi64> loc(#loc14)
      %29 = arith.addi %27, %28 : tensor<1x8xi64> loc(#loc14)
      %30 = tt.splat %arg0 : !tt.ptr<i32> -> tensor<1x8x!tt.ptr<i32>> loc(#loc15)
      %31 = tt.addptr %30, %29 : tensor<1x8x!tt.ptr<i32>>, tensor<1x8xi64> loc(#loc15)
      %32 = tt.broadcast %7 : tensor<1x1xi1> -> tensor<1x8xi1> loc(#loc16)
      %33 = arith.andi %23, %32 : tensor<1x8xi1> loc(#loc16)
      %cst_1 = arith.constant 0.000000e+00 : f32 loc(#loc17)
      %cst_2 = arith.constant dense<0.000000e+00> : tensor<1x8xf32> loc(#loc17)
      %34 = arith.fptosi %cst_2 : tensor<1x8xf32> to tensor<1x8xi32> loc(#loc17)
      %35 = tt.load %31, %33, %34 evictionPolicy = evict_first : tensor<1x8x!tt.ptr<i32>> loc(#loc17)
      %36 = arith.extsi %35 : tensor<1x8xi32> to tensor<1x8xi64> loc(#loc18)
      %37 = arith.addi %arg6, %36 : tensor<1x8xi64> loc(#loc19)
      %38 = tt.broadcast %7 : tensor<1x1xi1> -> tensor<1x8xi1> loc(#loc20)
      %39 = arith.andi %23, %38 : tensor<1x8xi1> loc(#loc20)
      %40 = arith.select %39, %37, %arg6 : tensor<1x8xi1>, tensor<1x8xi64> loc(#loc21)
      scf.yield %40 : tensor<1x8xi64> loc(#loc22)
    } loc(#loc10)
    %15 = tt.call @"triton.language.standard.sum__i64S1_8S__(1,)cconstexpr_1__(2,)cconstexpr_False__(3,)cNone"(%14) : (tensor<1x8xi64>) -> tensor<1xi64> loc(#loc23)
    %16 = tt.expand_dims %15 {axis = 1 : i32} : tensor<1xi64> -> tensor<1x1xi64> loc(#loc24)
    %17 = arith.trunci %16 : tensor<1x1xi64> to tensor<1x1xi32> loc(#loc25)
    %18 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<1x1x!tt.ptr<i32>> loc(#loc26)
    %19 = tt.addptr %18, %5 : tensor<1x1x!tt.ptr<i32>>, tensor<1x1xi32> loc(#loc26)
    tt.store %19, %17, %7 : tensor<1x1x!tt.ptr<i32>> loc(#loc27)
    tt.return loc(#loc28)
  } loc(#loc)
  tt.func private @"triton.language.standard.sum__i64S1_8S__(1,)cconstexpr_1__(2,)cconstexpr_False__(3,)cNone"(%arg0: tensor<1x8xi64> loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":284:0)) -> tensor<1xi64> attributes {noinline = false} {
    %0 = "tt.reduce"(%arg0) <{axis = 1 : i32}> ({
    ^bb0(%arg1: i64 loc(unknown), %arg2: i64 loc(unknown)):
      %2 = tt.call @triton.language.standard._sum_combine__i64_i64__(%arg1, %arg2) : (i64, i64) -> i64 loc(#loc30)
      tt.reduce.return %2 : i64 loc(#loc30)
    }) : (tensor<1x8xi64>) -> tensor<1xi64> loc(#loc30)
    tt.return %0 : tensor<1xi64> loc(#loc32)
  ^bb1:  // no predecessors
    %1 = ub.poison : tensor<1xi64> loc(#loc33)
    tt.return %1 : tensor<1xi64> loc(#loc33)
  } loc(#loc29)
  tt.func private @triton.language.standard._sum_combine__i64_i64__(%arg0: i64 loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":259:0), %arg1: i64 loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":259:0)) -> i64 attributes {noinline = false} {
    %0 = arith.addi %arg0, %arg1 : i64 loc(#loc35)
    tt.return %0 : i64 loc(#loc36)
  ^bb1:  // no predecessors
    %1 = ub.poison : i64 loc(#loc37)
    tt.return %1 : i64 loc(#loc37)
  } loc(#loc34)
} loc(#loc)
#loc1 = loc("/tmp/torchinductor_jovyan/f6/cf6x53zrv5ar6ocfiivxy3fpjkl34dlfemjvuzz4ceublpa5qy2s.py":21:28)
#loc2 = loc("/tmp/torchinductor_jovyan/f6/cf6x53zrv5ar6ocfiivxy3fpjkl34dlfemjvuzz4ceublpa5qy2s.py":21:33)
#loc3 = loc("/tmp/torchinductor_jovyan/f6/cf6x53zrv5ar6ocfiivxy3fpjkl34dlfemjvuzz4ceublpa5qy2s.py":22:36)
#loc4 = loc("/tmp/torchinductor_jovyan/f6/cf6x53zrv5ar6ocfiivxy3fpjkl34dlfemjvuzz4ceublpa5qy2s.py":22:44)
#loc5 = loc("/tmp/torchinductor_jovyan/f6/cf6x53zrv5ar6ocfiivxy3fpjkl34dlfemjvuzz4ceublpa5qy2s.py":22:23)
#loc6 = loc("/tmp/torchinductor_jovyan/f6/cf6x53zrv5ar6ocfiivxy3fpjkl34dlfemjvuzz4ceublpa5qy2s.py":23:21)
#loc7 = loc("/tmp/torchinductor_jovyan/f6/cf6x53zrv5ar6ocfiivxy3fpjkl34dlfemjvuzz4ceublpa5qy2s.py":24:27)
#loc8 = loc("/tmp/torchinductor_jovyan/f6/cf6x53zrv5ar6ocfiivxy3fpjkl34dlfemjvuzz4ceublpa5qy2s.py":24:37)
#loc9 = loc("/tmp/torchinductor_jovyan/f6/cf6x53zrv5ar6ocfiivxy3fpjkl34dlfemjvuzz4ceublpa5qy2s.py":27:43)
#loc10 = loc("/tmp/torchinductor_jovyan/f6/cf6x53zrv5ar6ocfiivxy3fpjkl34dlfemjvuzz4ceublpa5qy2s.py":28:40)
#loc11 = loc("/tmp/torchinductor_jovyan/f6/cf6x53zrv5ar6ocfiivxy3fpjkl34dlfemjvuzz4ceublpa5qy2s.py":29:31)
#loc12 = loc("/tmp/torchinductor_jovyan/f6/cf6x53zrv5ar6ocfiivxy3fpjkl34dlfemjvuzz4ceublpa5qy2s.py":30:29)
#loc13 = loc("/tmp/torchinductor_jovyan/f6/cf6x53zrv5ar6ocfiivxy3fpjkl34dlfemjvuzz4ceublpa5qy2s.py":34:45)
#loc14 = loc("/tmp/torchinductor_jovyan/f6/cf6x53zrv5ar6ocfiivxy3fpjkl34dlfemjvuzz4ceublpa5qy2s.py":34:41)
#loc15 = loc("/tmp/torchinductor_jovyan/f6/cf6x53zrv5ar6ocfiivxy3fpjkl34dlfemjvuzz4ceublpa5qy2s.py":34:34)
#loc16 = loc("/tmp/torchinductor_jovyan/f6/cf6x53zrv5ar6ocfiivxy3fpjkl34dlfemjvuzz4ceublpa5qy2s.py":34:60)
#loc17 = loc("/tmp/torchinductor_jovyan/f6/cf6x53zrv5ar6ocfiivxy3fpjkl34dlfemjvuzz4ceublpa5qy2s.py":34:50)
#loc18 = loc("/tmp/torchinductor_jovyan/f6/cf6x53zrv5ar6ocfiivxy3fpjkl34dlfemjvuzz4ceublpa5qy2s.py":35:23)
#loc19 = loc("/tmp/torchinductor_jovyan/f6/cf6x53zrv5ar6ocfiivxy3fpjkl34dlfemjvuzz4ceublpa5qy2s.py":37:23)
#loc20 = loc("/tmp/torchinductor_jovyan/f6/cf6x53zrv5ar6ocfiivxy3fpjkl34dlfemjvuzz4ceublpa5qy2s.py":38:35)
#loc21 = loc("/tmp/torchinductor_jovyan/f6/cf6x53zrv5ar6ocfiivxy3fpjkl34dlfemjvuzz4ceublpa5qy2s.py":38:48)
#loc22 = loc("/tmp/torchinductor_jovyan/f6/cf6x53zrv5ar6ocfiivxy3fpjkl34dlfemjvuzz4ceublpa5qy2s.py":38:8)
#loc23 = loc("/tmp/torchinductor_jovyan/f6/cf6x53zrv5ar6ocfiivxy3fpjkl34dlfemjvuzz4ceublpa5qy2s.py":39:25)
#loc24 = loc("/tmp/torchinductor_jovyan/f6/cf6x53zrv5ar6ocfiivxy3fpjkl34dlfemjvuzz4ceublpa5qy2s.py":39:28)
#loc25 = loc("/tmp/torchinductor_jovyan/f6/cf6x53zrv5ar6ocfiivxy3fpjkl34dlfemjvuzz4ceublpa5qy2s.py":40:19)
#loc26 = loc("/tmp/torchinductor_jovyan/f6/cf6x53zrv5ar6ocfiivxy3fpjkl34dlfemjvuzz4ceublpa5qy2s.py":41:25)
#loc27 = loc("/tmp/torchinductor_jovyan/f6/cf6x53zrv5ar6ocfiivxy3fpjkl34dlfemjvuzz4ceublpa5qy2s.py":41:36)
#loc28 = loc("/tmp/torchinductor_jovyan/f6/cf6x53zrv5ar6ocfiivxy3fpjkl34dlfemjvuzz4ceublpa5qy2s.py":41:4)
#loc30 = loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":290:36)
#loc32 = loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":290:11)
#loc33 = loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":290:4)
#loc35 = loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":260:15)
#loc36 = loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":260:11)
#loc37 = loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":260:4)
