#loc = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":18:0)
#loc51 = loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":284:0)
#loc53 = loc(unknown)
#loc56 = loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":259:0)
module {
  tt.func public @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8(%arg0: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":18:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":18:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":18:0), %arg3: f64 loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":18:0), %arg4: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":18:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":18:0)) attributes {noinline = false} {
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c4096_i32 = arith.constant 4096 : i32 loc(#loc2)
    %0 = tt.get_program_id x : i32 loc(#loc3)
    %c1_i32_0 = arith.constant 1 : i32 loc(#loc4)
    %c1_i32_1 = arith.constant 1 : i32 loc(#loc4)
    %1 = arith.muli %0, %c1_i32_1 : i32 loc(#loc4)
    %2 = tt.make_range {end = 1 : i32, start = 0 : i32} : tensor<1xi32> loc(#loc5)
    %3 = tt.expand_dims %2 {axis = 1 : i32} : tensor<1xi32> -> tensor<1x1xi32> loc(#loc6)
    %4 = tt.splat %1 : i32 -> tensor<1x1xi32> loc(#loc7)
    %5 = arith.addi %4, %3 : tensor<1x1xi32> loc(#loc7)
    %true = arith.constant true loc(#loc8)
    %cst = arith.constant dense<true> : tensor<1x2048xi1> loc(#loc8)
    %6 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32> loc(#loc9)
    %7 = tt.expand_dims %6 {axis = 0 : i32} : tensor<2048xi32> -> tensor<1x2048xi32> loc(#loc10)
    %cst_2 = arith.constant 0.000000e+00 : f32 loc(#loc11)
    %cst_3 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32> loc(#loc11)
    %c0_i32 = arith.constant 0 : i32 loc(#loc12)
    %c2048_i32 = arith.constant 2048 : i32 loc(#loc12)
    %8 = arith.bitcast %c0_i32 : i32 to i32 loc(#loc12)
    %9 = arith.bitcast %c4096_i32 : i32 to i32 loc(#loc12)
    %10 = arith.bitcast %c2048_i32 : i32 to i32 loc(#loc12)
    %11 = ub.poison : i32 loc(#loc12)
    %12 = scf.for %arg6 = %8 to %9 step %10 iter_args(%arg7 = %cst_3) -> (tensor<1x2048xf32>)  : i32 {
      %19 = tt.splat %arg6 : i32 -> tensor<1x2048xi32> loc(#loc13)
      %20 = arith.addi %19, %7 : tensor<1x2048xi32> loc(#loc13)
      %cst_6 = arith.constant dense<4096> : tensor<1x2048xi32> loc(#loc14)
      %21 = arith.cmpi slt, %20, %cst_6 : tensor<1x2048xi32> loc(#loc14)
      %22 = tt.splat %arg0 : !tt.ptr<bf16> -> tensor<1x2048x!tt.ptr<bf16>> loc(#loc15)
      %23 = tt.addptr %22, %20 : tensor<1x2048x!tt.ptr<bf16>>, tensor<1x2048xi32> loc(#loc15)
      %cst_7 = arith.constant 0.000000e+00 : f32 loc(#loc16)
      %cst_8 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32> loc(#loc16)
      %24 = arith.truncf %cst_8 : tensor<1x2048xf32> to tensor<1x2048xbf16> loc(#loc16)
      %25 = tt.load %23, %21, %24 evictionPolicy = evict_last : tensor<1x2048x!tt.ptr<bf16>> loc(#loc16)
      %26 = arith.extf %25 : tensor<1x2048xbf16> to tensor<1x2048xf32> loc(#loc17)
      %27 = tt.splat %arg1 : !tt.ptr<bf16> -> tensor<1x2048x!tt.ptr<bf16>> loc(#loc18)
      %28 = tt.addptr %27, %20 : tensor<1x2048x!tt.ptr<bf16>>, tensor<1x2048xi32> loc(#loc18)
      %cst_9 = arith.constant 0.000000e+00 : f32 loc(#loc19)
      %cst_10 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32> loc(#loc19)
      %29 = arith.truncf %cst_10 : tensor<1x2048xf32> to tensor<1x2048xbf16> loc(#loc19)
      %30 = tt.load %28, %21, %29 evictionPolicy = evict_last : tensor<1x2048x!tt.ptr<bf16>> loc(#loc19)
      %31 = arith.extf %30 : tensor<1x2048xbf16> to tensor<1x2048xf32> loc(#loc20)
      %32 = arith.addf %26, %31 : tensor<1x2048xf32> loc(#loc21)
      %33 = arith.mulf %32, %32 : tensor<1x2048xf32> loc(#loc22)
      %34 = arith.addf %arg7, %33 : tensor<1x2048xf32> loc(#loc23)
      %35 = arith.select %21, %34, %arg7 : tensor<1x2048xi1>, tensor<1x2048xf32> loc(#loc24)
      scf.yield %35 : tensor<1x2048xf32> loc(#loc25)
    } loc(#loc12)
    %13 = tt.call @"triton.language.standard.sum__fp32S1_2048S__(1,)cconstexpr_1__(2,)cconstexpr_False__(3,)cNone"(%12) : (tensor<1x2048xf32>) -> tensor<1xf32> loc(#loc26)
    %14 = tt.expand_dims %13 {axis = 1 : i32} : tensor<1xf32> -> tensor<1x1xf32> loc(#loc27)
    %c0_i32_4 = arith.constant 0 : i32 loc(#loc28)
    %c2048_i32_5 = arith.constant 2048 : i32 loc(#loc28)
    %15 = arith.bitcast %c0_i32_4 : i32 to i32 loc(#loc28)
    %16 = arith.bitcast %c4096_i32 : i32 to i32 loc(#loc28)
    %17 = arith.bitcast %c2048_i32_5 : i32 to i32 loc(#loc28)
    %18 = ub.poison : i32 loc(#loc28)
    scf.for %arg6 = %15 to %16 step %17  : i32 {
      %19 = tt.splat %arg6 : i32 -> tensor<1x2048xi32> loc(#loc29)
      %20 = arith.addi %19, %7 : tensor<1x2048xi32> loc(#loc29)
      %cst_6 = arith.constant dense<4096> : tensor<1x2048xi32> loc(#loc30)
      %21 = arith.cmpi slt, %20, %cst_6 : tensor<1x2048xi32> loc(#loc30)
      %22 = tt.splat %arg2 : !tt.ptr<bf16> -> tensor<1x2048x!tt.ptr<bf16>> loc(#loc31)
      %23 = tt.addptr %22, %20 : tensor<1x2048x!tt.ptr<bf16>>, tensor<1x2048xi32> loc(#loc31)
      %cst_7 = arith.constant 0.000000e+00 : f32 loc(#loc32)
      %cst_8 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32> loc(#loc32)
      %24 = arith.truncf %cst_8 : tensor<1x2048xf32> to tensor<1x2048xbf16> loc(#loc32)
      %25 = tt.load %23, %21, %24 evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<bf16>> loc(#loc32)
      %26 = arith.extf %25 : tensor<1x2048xbf16> to tensor<1x2048xf32> loc(#loc33)
      %27 = tt.splat %arg0 : !tt.ptr<bf16> -> tensor<1x2048x!tt.ptr<bf16>> loc(#loc34)
      %28 = tt.addptr %27, %20 : tensor<1x2048x!tt.ptr<bf16>>, tensor<1x2048xi32> loc(#loc34)
      %cst_9 = arith.constant 0.000000e+00 : f32 loc(#loc35)
      %cst_10 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32> loc(#loc35)
      %29 = arith.truncf %cst_10 : tensor<1x2048xf32> to tensor<1x2048xbf16> loc(#loc35)
      %30 = tt.load %28, %21, %29 evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<bf16>> loc(#loc35)
      %31 = arith.extf %30 : tensor<1x2048xbf16> to tensor<1x2048xf32> loc(#loc36)
      %32 = tt.splat %arg1 : !tt.ptr<bf16> -> tensor<1x2048x!tt.ptr<bf16>> loc(#loc37)
      %33 = tt.addptr %32, %20 : tensor<1x2048x!tt.ptr<bf16>>, tensor<1x2048xi32> loc(#loc37)
      %cst_11 = arith.constant 0.000000e+00 : f32 loc(#loc38)
      %cst_12 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32> loc(#loc38)
      %34 = arith.truncf %cst_12 : tensor<1x2048xf32> to tensor<1x2048xbf16> loc(#loc38)
      %35 = tt.load %33, %21, %34 evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<bf16>> loc(#loc38)
      %36 = arith.extf %35 : tensor<1x2048xbf16> to tensor<1x2048xf32> loc(#loc39)
      %37 = arith.addf %31, %36 : tensor<1x2048xf32> loc(#loc40)
      %cst_13 = arith.constant 4.096000e+03 : f32 loc(#loc41)
      %cst_14 = arith.constant dense<4.096000e+03> : tensor<1x1xf32> loc(#loc42)
      %38 = arith.divf %14, %cst_14 : tensor<1x1xf32> loc(#loc42)
      %39 = arith.truncf %arg3 : f64 to f32 loc(#loc43)
      %40 = tt.splat %39 : f32 -> tensor<1x1xf32> loc(#loc44)
      %41 = arith.addf %38, %40 : tensor<1x1xf32> loc(#loc44)
      %42 = tt.extern_elementwise %41 {libname = "", libpath = "", pure = true, symbol = "__imf_rsqrtf"} : (tensor<1x1xf32>) -> tensor<1x1xf32> loc(#loc45)
      %43 = tt.broadcast %42 : tensor<1x1xf32> -> tensor<1x2048xf32> loc(#loc46)
      %44 = arith.mulf %37, %43 : tensor<1x2048xf32> loc(#loc46)
      %45 = arith.mulf %26, %44 : tensor<1x2048xf32> loc(#loc47)
      %46 = tt.splat %arg4 : !tt.ptr<bf16> -> tensor<1x2048x!tt.ptr<bf16>> loc(#loc48)
      %47 = tt.addptr %46, %20 : tensor<1x2048x!tt.ptr<bf16>>, tensor<1x2048xi32> loc(#loc48)
      %48 = arith.truncf %45 : tensor<1x2048xf32> to tensor<1x2048xbf16> loc(#loc49)
      tt.store %47, %48, %21 : tensor<1x2048x!tt.ptr<bf16>> loc(#loc49)
    } loc(#loc28)
    tt.return loc(#loc50)
  } loc(#loc)
  tt.func private @"triton.language.standard.sum__fp32S1_2048S__(1,)cconstexpr_1__(2,)cconstexpr_False__(3,)cNone"(%arg0: tensor<1x2048xf32> loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":284:0)) -> tensor<1xf32> attributes {noinline = false} {
    %0 = "tt.reduce"(%arg0) <{axis = 1 : i32}> ({
    ^bb0(%arg1: f32 loc(unknown), %arg2: f32 loc(unknown)):
      %2 = tt.call @triton.language.standard._sum_combine__fp32_fp32__(%arg1, %arg2) : (f32, f32) -> f32 loc(#loc52)
      tt.reduce.return %2 : f32 loc(#loc52)
    }) : (tensor<1x2048xf32>) -> tensor<1xf32> loc(#loc52)
    tt.return %0 : tensor<1xf32> loc(#loc54)
  ^bb1:  // no predecessors
    %1 = ub.poison : tensor<1xf32> loc(#loc55)
    tt.return %1 : tensor<1xf32> loc(#loc55)
  } loc(#loc51)
  tt.func private @triton.language.standard._sum_combine__fp32_fp32__(%arg0: f32 loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":259:0), %arg1: f32 loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":259:0)) -> f32 attributes {noinline = false} {
    %0 = arith.addf %arg0, %arg1 : f32 loc(#loc57)
    tt.return %0 : f32 loc(#loc58)
  ^bb1:  // no predecessors
    %1 = ub.poison : f32 loc(#loc59)
    tt.return %1 : f32 loc(#loc59)
  } loc(#loc56)
} loc(#loc)
#loc1 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":19:13)
#loc2 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":20:15)
#loc3 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":23:28)
#loc4 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":23:33)
#loc5 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":24:36)
#loc6 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":24:44)
#loc7 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":24:23)
#loc8 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":25:46)
#loc9 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":26:27)
#loc10 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":26:37)
#loc11 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":28:43)
#loc12 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":29:40)
#loc13 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":30:31)
#loc14 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":31:29)
#loc15 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":35:34)
#loc16 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":35:41)
#loc17 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":35:94)
#loc18 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":36:34)
#loc19 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":36:41)
#loc20 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":36:94)
#loc21 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":37:22)
#loc22 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":39:22)
#loc23 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":41:23)
#loc24 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":42:40)
#loc25 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":42:8)
#loc26 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":43:25)
#loc27 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":43:28)
#loc28 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":45:40)
#loc29 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":46:31)
#loc30 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":47:29)
#loc31 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":51:34)
#loc32 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":51:41)
#loc33 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":51:95)
#loc34 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":52:34)
#loc35 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":52:41)
#loc36 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":52:95)
#loc37 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":53:35)
#loc38 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":53:42)
#loc39 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":53:96)
#loc40 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":54:23)
#loc41 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":56:16)
#loc42 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":57:24)
#loc43 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":58:25)
#loc44 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":59:24)
#loc45 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":60:32)
#loc46 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":61:24)
#loc47 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":63:23)
#loc48 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":64:29)
#loc49 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":64:80)
#loc50 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":45:4)
#loc52 = loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":290:36)
#loc54 = loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":290:11)
#loc55 = loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":290:4)
#loc57 = loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":260:15)
#loc58 = loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":260:11)
#loc59 = loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":260:4)
