#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 16], order = [1, 0]}>
#loc = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":18:0)
#loc1 = loc(unknown)
#loc18 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":43:25)
#loc44 = loc(callsite(#loc1 at #loc18))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 16 : i32, ttg.target = "xpu", "ttg.threads-per-warp" = 32 : i32, ttig.min_sg_size = 16 : i32, ttig.support_bf16_conversion, ttig.support_dpas, ttig.support_sg_2d_block, ttig.target_arch = "spir64"} {
  tt.func public @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8(%arg0: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":18:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":18:0), %arg2: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":18:0), %arg3: f64 loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":18:0), %arg4: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":18:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":18:0)) attributes {noinline = false} {
    %cst = arith.constant dense<4096> : tensor<1x2048xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<1x2048xbf16, #blocked> loc(#loc1)
    %c2048_i32 = arith.constant 2048 : i32 loc(#loc1)
    %c4096_i32 = arith.constant 4096 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<4.096000e+03> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %1 = tt.expand_dims %0 {axis = 0 : i32} : tensor<2048xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2048xi32, #blocked> loc(#loc2)
    %2 = tt.splat %arg0 : !tt.ptr<bf16> -> tensor<1x2048x!tt.ptr<bf16>, #blocked> loc(#loc3)
    %3 = tt.splat %arg1 : !tt.ptr<bf16> -> tensor<1x2048x!tt.ptr<bf16>, #blocked> loc(#loc4)
    %4 = scf.for %arg6 = %c0_i32 to %c4096_i32 step %c2048_i32 iter_args(%arg7 = %cst_2) -> (tensor<1x2048xf32, #blocked>)  : i32 {
      %15 = tt.splat %arg6 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc6)
      %16 = arith.addi %15, %1 : tensor<1x2048xi32, #blocked> loc(#loc6)
      %17 = arith.cmpi slt, %16, %cst : tensor<1x2048xi32, #blocked> loc(#loc7)
      %18 = tt.addptr %2, %16 : tensor<1x2048x!tt.ptr<bf16>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc3)
      %19 = tt.load %18, %17, %cst_0 evictionPolicy = evict_last : tensor<1x2048x!tt.ptr<bf16>, #blocked> loc(#loc8)
      %20 = arith.extf %19 : tensor<1x2048xbf16, #blocked> to tensor<1x2048xf32, #blocked> loc(#loc9)
      %21 = tt.addptr %3, %16 : tensor<1x2048x!tt.ptr<bf16>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc4)
      %22 = tt.load %21, %17, %cst_0 evictionPolicy = evict_last : tensor<1x2048x!tt.ptr<bf16>, #blocked> loc(#loc10)
      %23 = arith.extf %22 : tensor<1x2048xbf16, #blocked> to tensor<1x2048xf32, #blocked> loc(#loc11)
      %24 = arith.addf %20, %23 : tensor<1x2048xf32, #blocked> loc(#loc12)
      %25 = arith.mulf %24, %24 : tensor<1x2048xf32, #blocked> loc(#loc13)
      %26 = arith.addf %arg7, %25 : tensor<1x2048xf32, #blocked> loc(#loc14)
      %27 = arith.select %17, %26, %arg7 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc15)
      scf.yield %27 : tensor<1x2048xf32, #blocked> loc(#loc16)
    } loc(#loc5)
    %5 = "tt.reduce"(%4) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32 loc(callsite(#loc1 at #loc18)), %arg7: f32 loc(callsite(#loc1 at #loc18))):
      %15 = arith.addf %arg6, %arg7 : f32 loc(#loc45)
      tt.reduce.return %15 : f32 loc(#loc43)
    }) : (tensor<1x2048xf32, #blocked>) -> tensor<1xf32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc43)
    %6 = tt.expand_dims %5 {axis = 1 : i32} : tensor<1xf32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc20)
    %7 = tt.splat %arg2 : !tt.ptr<bf16> -> tensor<1x2048x!tt.ptr<bf16>, #blocked> loc(#loc21)
    %8 = arith.divf %6, %cst_1 : tensor<1x1xf32, #blocked> loc(#loc22)
    %9 = arith.truncf %arg3 : f64 to f32 loc(#loc23)
    %10 = tt.splat %9 : f32 -> tensor<1x1xf32, #blocked> loc(#loc24)
    %11 = arith.addf %8, %10 : tensor<1x1xf32, #blocked> loc(#loc24)
    %12 = tt.extern_elementwise %11 {libname = "", libpath = "", pure = true, symbol = "__imf_rsqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked> loc(#loc25)
    %13 = tt.broadcast %12 : tensor<1x1xf32, #blocked> -> tensor<1x2048xf32, #blocked> loc(#loc26)
    %14 = tt.splat %arg4 : !tt.ptr<bf16> -> tensor<1x2048x!tt.ptr<bf16>, #blocked> loc(#loc27)
    scf.for %arg6 = %c0_i32 to %c4096_i32 step %c2048_i32  : i32 {
      %15 = tt.splat %arg6 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc29)
      %16 = arith.addi %15, %1 : tensor<1x2048xi32, #blocked> loc(#loc29)
      %17 = arith.cmpi slt, %16, %cst : tensor<1x2048xi32, #blocked> loc(#loc30)
      %18 = tt.addptr %7, %16 : tensor<1x2048x!tt.ptr<bf16>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc21)
      %19 = tt.load %18, %17, %cst_0 evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<bf16>, #blocked> loc(#loc31)
      %20 = arith.extf %19 : tensor<1x2048xbf16, #blocked> to tensor<1x2048xf32, #blocked> loc(#loc32)
      %21 = tt.addptr %2, %16 : tensor<1x2048x!tt.ptr<bf16>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc33)
      %22 = tt.load %21, %17, %cst_0 evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<bf16>, #blocked> loc(#loc34)
      %23 = arith.extf %22 : tensor<1x2048xbf16, #blocked> to tensor<1x2048xf32, #blocked> loc(#loc35)
      %24 = tt.addptr %3, %16 : tensor<1x2048x!tt.ptr<bf16>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc36)
      %25 = tt.load %24, %17, %cst_0 evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<bf16>, #blocked> loc(#loc37)
      %26 = arith.extf %25 : tensor<1x2048xbf16, #blocked> to tensor<1x2048xf32, #blocked> loc(#loc38)
      %27 = arith.addf %23, %26 : tensor<1x2048xf32, #blocked> loc(#loc39)
      %28 = arith.mulf %27, %13 : tensor<1x2048xf32, #blocked> loc(#loc26)
      %29 = arith.mulf %20, %28 : tensor<1x2048xf32, #blocked> loc(#loc40)
      %30 = tt.addptr %14, %16 : tensor<1x2048x!tt.ptr<bf16>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc27)
      %31 = arith.truncf %29 : tensor<1x2048xf32, #blocked> to tensor<1x2048xbf16, #blocked> loc(#loc41)
      tt.store %30, %31, %17 {ttig.block_io = "row_major"} : tensor<1x2048x!tt.ptr<bf16>, #blocked> loc(#loc41)
    } loc(#loc28)
    tt.return loc(#loc42)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":26:37)
#loc3 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":35:34)
#loc4 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":36:34)
#loc5 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":29:40)
#loc6 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":30:31)
#loc7 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":31:29)
#loc8 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":35:41)
#loc9 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":35:94)
#loc10 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":36:41)
#loc11 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":36:94)
#loc12 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":37:22)
#loc13 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":39:22)
#loc14 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":41:23)
#loc15 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":42:40)
#loc16 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":42:8)
#loc17 = loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":290:36)
#loc19 = loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":260:15)
#loc20 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":43:28)
#loc21 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":51:34)
#loc22 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":57:24)
#loc23 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":58:25)
#loc24 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":59:24)
#loc25 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":60:32)
#loc26 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":61:24)
#loc27 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":64:29)
#loc28 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":45:40)
#loc29 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":46:31)
#loc30 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":47:29)
#loc31 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":51:41)
#loc32 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":51:95)
#loc33 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":52:34)
#loc34 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":52:41)
#loc35 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":52:95)
#loc36 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":53:35)
#loc37 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":53:42)
#loc38 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":53:96)
#loc39 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":54:23)
#loc40 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":63:23)
#loc41 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":64:80)
#loc42 = loc("/tmp/torchinductor_jovyan/mu/cmu2nxvea2p6urnitegqqmpfr7ti46256ysnjxmmozcpqcumvxr2.py":45:4)
#loc43 = loc(callsite(#loc17 at #loc18))
#loc45 = loc(callsite(#loc19 at #loc43))
