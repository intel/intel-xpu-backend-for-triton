; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-n8:16:32:64"
target triple = "spir64-unknown-unknown"

; Function Attrs: convergent mustprogress nounwind willreturn
declare !dbg !9 spir_func void @_Z7barrierj(i32) local_unnamed_addr #0

; Function Attrs: convergent mustprogress nounwind willreturn
declare !dbg !12 spir_func i64 @_Z27__spirv_GroupNonUniformIAddiimj(i32, i32, i64, i32) local_unnamed_addr #0

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(none)
declare !dbg !13 spir_func i64 @_Z12get_local_idj(i32) local_unnamed_addr #1

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(none)
declare !dbg !14 spir_func i64 @_Z12get_group_idj(i32) local_unnamed_addr #1

; Function Attrs: nounwind
define spir_kernel void @triton_red_fused__to_copy_clone_sum_transpose_5(ptr addrspace(1) readonly captures(none) %0, ptr addrspace(1) writeonly captures(none) %1, i64 %2, i32 %3, i32 %4, ptr addrspace(1) readnone captures(none) %5, ptr addrspace(3) captures(none) %6) local_unnamed_addr #2 !dbg !15 !intel_reqd_sub_group_size !16 !max_work_group_size !17 {
  %8 = tail call spir_func i64 @_Z12get_group_idj(i32 0) #3, !dbg !18
  %9 = trunc i64 %8 to i32, !dbg !18
  %10 = shl i32 %9, 3, !dbg !19
  %11 = tail call spir_func i64 @_Z12get_local_idj(i32 0) #3, !dbg !20
  %12 = trunc i64 %11 to i32, !dbg !20
  %13 = lshr i32 %12, 2, !dbg !20
  %14 = and i32 %13, 7, !dbg !20
  %15 = and i32 %12, 7, !dbg !20
  %16 = or disjoint i32 %14, %10, !dbg !21
  %17 = or disjoint i32 %15, %10, !dbg !21
  %18 = icmp slt i32 %17, %3, !dbg !22
  %19 = and i32 %12, 3, !dbg !23
  %20 = sext i32 %16 to i64, !dbg !24
  %invariant.gep = getelementptr i32, ptr addrspace(1) %0, i64 %20, !dbg !25
  %21 = icmp sgt i32 %4, 0, !dbg !25
  br i1 %21, label %.lr.ph, label %._crit_edge, !dbg !25

.lr.ph:                                           ; preds = %7
  %22 = icmp slt i32 %16, %3, !dbg !22
  %.fr = freeze i1 %22
  br i1 %.fr, label %.lr.ph.split, label %.lr.ph.split.us

.lr.ph.split.us:                                  ; preds = %.lr.ph, %.lr.ph.split.us
  %23 = phi i32 [ %24, %.lr.ph.split.us ], [ 0, %.lr.ph ]
  %24 = add i32 %23, 4, !dbg !25
  %25 = icmp slt i32 %24, %4, !dbg !25
  br i1 %25, label %.lr.ph.split.us, label %._crit_edge, !dbg !25

.lr.ph.split:                                     ; preds = %.lr.ph, %35
  %26 = phi i64 [ %37, %35 ], [ 0, %.lr.ph ]
  %27 = phi i32 [ %38, %35 ], [ 0, %.lr.ph ]
  %28 = or disjoint i32 %27, %19, !dbg !26
  %29 = icmp slt i32 %28, %4, !dbg !27
  br i1 %29, label %30, label %35, !dbg !28

30:                                               ; preds = %.lr.ph.split
  %31 = sext i32 %28 to i64, !dbg !29
  %32 = mul i64 %2, %31, !dbg !29
  %gep = getelementptr i32, ptr addrspace(1) %invariant.gep, i64 %32, !dbg !30
  %33 = load i32, ptr addrspace(1) %gep, align 4, !dbg !28
  %34 = sext i32 %33 to i64, !dbg !31
  br label %35, !dbg !28

35:                                               ; preds = %30, %.lr.ph.split
  %36 = phi i64 [ %34, %30 ], [ 0, %.lr.ph.split ], !dbg !28
  %37 = add i64 %36, %26, !dbg !32
  %38 = add i32 %27, 4, !dbg !25
  %39 = icmp slt i32 %38, %4, !dbg !25
  br i1 %39, label %.lr.ph.split, label %._crit_edge, !dbg !25

._crit_edge:                                      ; preds = %.lr.ph.split.us, %35, %7
  %.lcssa = phi i64 [ 0, %7 ], [ %37, %35 ], [ 0, %.lr.ph.split.us ], !dbg !33
  %40 = tail call spir_func i64 @_Z27__spirv_GroupNonUniformIAddiimj(i32 3, i32 3, i64 %.lcssa, i32 4) #4, !dbg !34
  %41 = lshr i64 %11, 2, !dbg !38
  %42 = and i64 %41, 3, !dbg !38
  %43 = and i64 %41, 4, !dbg !38
  %44 = getelementptr inbounds nuw i64, ptr addrspace(3) %6, i64 %42, !dbg !38
  %45 = getelementptr inbounds nuw i64, ptr addrspace(3) %44, i64 %43, !dbg !38
  %46 = insertelement <1 x i64> poison, i64 %40, i64 0, !dbg !38
  store <1 x i64> %46, ptr addrspace(3) %45, align 8, !dbg !38
  tail call spir_func void @_Z7barrierj(i32 1) #4, !dbg !38
  %47 = and i32 %12, 248, !dbg !39
  %48 = icmp eq i32 %47, 0, !dbg !39
  %49 = and i1 %48, %18, !dbg !39
  br i1 %49, label %50, label %57, !dbg !39

50:                                               ; preds = %._crit_edge
  %51 = and i64 %11, 7, !dbg !38
  %52 = getelementptr inbounds nuw i64, ptr addrspace(3) %6, i64 %51, !dbg !38
  %53 = load <2 x i32>, ptr addrspace(3) %52, align 8, !dbg !38
  %54 = shufflevector <2 x i32> %53, <2 x i32> poison, <1 x i32> zeroinitializer, !dbg !39
  %55 = sext i32 %17 to i64, !dbg !40
  %56 = getelementptr i32, ptr addrspace(1) %1, i64 %55, !dbg !40
  store <1 x i32> %54, ptr addrspace(1) %56, align 4, !dbg !39
  br label %57, !dbg !39

57:                                               ; preds = %50, %._crit_edge
  ret void, !dbg !41
}

attributes #0 = { convergent mustprogress nounwind willreturn }
attributes #1 = { mustprogress nofree nosync nounwind willreturn memory(none) }
attributes #2 = { nounwind }
attributes #3 = { nounwind willreturn memory(none) }
attributes #4 = { convergent nounwind willreturn }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3, !4, !5}
!opencl.spir.version = !{!6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6}
!spirv.Source = !{!7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7}
!llvm.ident = !{!8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "cna7kgjdlbi5ppncuubnjk2ewbsdtew7jjbsyfvvqunptm3shf7j.py", directory: "/tmp/torchinductor_jovyan/na")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 1, !"wchar_size", i32 4}
!4 = !{i32 1, !"sycl-device", i32 1}
!5 = !{i32 7, !"frame-pointer", i32 2}
!6 = !{i32 1, i32 2}
!7 = !{i32 3, i32 100000}
!8 = !{!"Intel(R) oneAPI DPC++/C++ Compiler 2025.0.0 (2025.0.0.20241008)"}
!9 = !DISubprogram(name: "_Z7barrierj", linkageName: "_Z7barrierj", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagOptimized)
!10 = !DISubroutineType(cc: DW_CC_normal, types: !11)
!11 = !{}
!12 = !DISubprogram(name: "_Z27__spirv_GroupNonUniformIAddiimj", linkageName: "_Z27__spirv_GroupNonUniformIAddiimj", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagOptimized)
!13 = !DISubprogram(name: "_Z12get_local_idj", linkageName: "_Z12get_local_idj", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagOptimized)
!14 = !DISubprogram(name: "_Z12get_group_idj", linkageName: "_Z12get_group_idj", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagOptimized)
!15 = distinct !DISubprogram(name: "triton_red_fused__to_copy_clone_sum_transpose_5", linkageName: "triton_red_fused__to_copy_clone_sum_transpose_5", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!16 = !{i32 32}
!17 = !{i64 256, i64 1, i64 1}
!18 = !DILocation(line: 21, column: 28, scope: !15)
!19 = !DILocation(line: 21, column: 33, scope: !15)
!20 = !DILocation(line: 22, column: 44, scope: !15)
!21 = !DILocation(line: 22, column: 23, scope: !15)
!22 = !DILocation(line: 23, column: 21, scope: !15)
!23 = !DILocation(line: 24, column: 37, scope: !15)
!24 = !DILocation(line: 34, column: 39, scope: !15)
!25 = !DILocation(line: 28, column: 40, scope: !15)
!26 = !DILocation(line: 29, column: 31, scope: !15)
!27 = !DILocation(line: 30, column: 29, scope: !15)
!28 = !DILocation(line: 34, column: 50, scope: !15)
!29 = !DILocation(line: 34, column: 43, scope: !15)
!30 = !DILocation(line: 34, column: 34, scope: !15)
!31 = !DILocation(line: 35, column: 23, scope: !15)
!32 = !DILocation(line: 38, column: 48, scope: !15)
!33 = !DILocation(line: 27, column: 43, scope: !15)
!34 = !DILocation(line: 290, column: 36, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !15, file: !36, discriminator: 0)
!36 = !DIFile(filename: "standard.py", directory: "/home/jovyan/intel-xpu-backend-for-triton/python/triton/language")
!37 = !DILocation(line: 39, column: 25, scope: !15)
!38 = !DILocation(line: 39, column: 28, scope: !15)
!39 = !DILocation(line: 41, column: 36, scope: !15)
!40 = !DILocation(line: 41, column: 25, scope: !15)
!41 = !DILocation(line: 41, column: 4, scope: !15)
