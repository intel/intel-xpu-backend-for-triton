#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [8, 4], warpsPerCTA = [8, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [8, 4], warpsPerCTA = [1, 8], order = [0, 1]}>
#loc = loc("/tmp/torchinductor_jovyan/na/cna7kgjdlbi5ppncuubnjk2ewbsdtew7jjbsyfvvqunptm3shf7j.py":18:0)
#loc1 = loc(unknown)
#loc21 = loc("/tmp/torchinductor_jovyan/na/cna7kgjdlbi5ppncuubnjk2ewbsdtew7jjbsyfvvqunptm3shf7j.py":39:25)
#loc29 = loc(callsite(#loc1 at #loc21))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 8 : i32, ttg.target = "xpu", "ttg.threads-per-warp" = 32 : i32, ttig.min_sg_size = 16 : i32, ttig.support_bf16_conversion, ttig.support_dpas, ttig.support_sg_2d_block, ttig.target_arch = "spir64"} {
  tt.func public @triton_red_fused__to_copy_clone_sum_transpose_5(%arg0: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_jovyan/na/cna7kgjdlbi5ppncuubnjk2ewbsdtew7jjbsyfvvqunptm3shf7j.py":18:0), %arg1: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_jovyan/na/cna7kgjdlbi5ppncuubnjk2ewbsdtew7jjbsyfvvqunptm3shf7j.py":18:0), %arg2: i64 loc("/tmp/torchinductor_jovyan/na/cna7kgjdlbi5ppncuubnjk2ewbsdtew7jjbsyfvvqunptm3shf7j.py":18:0), %arg3: i32 loc("/tmp/torchinductor_jovyan/na/cna7kgjdlbi5ppncuubnjk2ewbsdtew7jjbsyfvvqunptm3shf7j.py":18:0), %arg4: i32 loc("/tmp/torchinductor_jovyan/na/cna7kgjdlbi5ppncuubnjk2ewbsdtew7jjbsyfvvqunptm3shf7j.py":18:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0> : tensor<8x4xi32, #blocked> loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<0> : tensor<8x4xi64, #blocked> loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c8_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<8xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<8x1xi32, #blocked> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<8xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<8x1xi32, #blocked1> loc(#loc4)
    %6 = tt.splat %1 : i32 -> tensor<8x1xi32, #blocked> loc(#loc5)
    %7 = tt.splat %1 : i32 -> tensor<8x1xi32, #blocked1> loc(#loc5)
    %8 = arith.addi %6, %4 : tensor<8x1xi32, #blocked> loc(#loc5)
    %9 = arith.addi %7, %5 : tensor<8x1xi32, #blocked1> loc(#loc5)
    %10 = tt.splat %arg3 : i32 -> tensor<8x1xi32, #blocked> loc(#loc6)
    %11 = tt.splat %arg3 : i32 -> tensor<8x1xi32, #blocked1> loc(#loc6)
    %12 = arith.cmpi slt, %8, %10 : tensor<8x1xi32, #blocked> loc(#loc6)
    %13 = arith.cmpi slt, %9, %11 : tensor<8x1xi32, #blocked1> loc(#loc6)
    %14 = tt.make_range {end = 4 : i32, start = 0 : i32} : tensor<4xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc7)
    %15 = tt.expand_dims %14 {axis = 0 : i32} : tensor<4xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x4xi32, #blocked> loc(#loc7)
    %16 = tt.splat %arg4 : i32 -> tensor<1x4xi32, #blocked> loc(#loc8)
    %17 = tt.splat %arg2 : i64 -> tensor<1x4xi64, #blocked> loc(#loc9)
    %18 = arith.extsi %8 : tensor<8x1xi32, #blocked> to tensor<8x1xi64, #blocked> loc(#loc10)
    %19 = tt.broadcast %18 : tensor<8x1xi64, #blocked> -> tensor<8x4xi64, #blocked> loc(#loc10)
    %20 = tt.splat %arg0 : !tt.ptr<i32> -> tensor<8x4x!tt.ptr<i32>, #blocked> loc(#loc11)
    %21 = tt.broadcast %12 : tensor<8x1xi1, #blocked> -> tensor<8x4xi1, #blocked> loc(#loc12)
    %22 = scf.for %arg5 = %c0_i32 to %arg4 step %c4_i32 iter_args(%arg6 = %cst_0) -> (tensor<8x4xi64, #blocked>)  : i32 {
      %29 = tt.splat %arg5 : i32 -> tensor<1x4xi32, #blocked> loc(#loc14)
      %30 = arith.addi %29, %15 : tensor<1x4xi32, #blocked> loc(#loc14)
      %31 = arith.cmpi slt, %30, %16 : tensor<1x4xi32, #blocked> loc(#loc8)
      %32 = arith.extsi %30 : tensor<1x4xi32, #blocked> to tensor<1x4xi64, #blocked> loc(#loc9)
      %33 = arith.muli %17, %32 : tensor<1x4xi64, #blocked> loc(#loc9)
      %34 = tt.broadcast %33 : tensor<1x4xi64, #blocked> -> tensor<8x4xi64, #blocked> loc(#loc10)
      %35 = arith.addi %19, %34 : tensor<8x4xi64, #blocked> loc(#loc10)
      %36 = tt.addptr %20, %35 : tensor<8x4x!tt.ptr<i32>, #blocked>, tensor<8x4xi64, #blocked> loc(#loc11)
      %37 = tt.broadcast %31 : tensor<1x4xi1, #blocked> -> tensor<8x4xi1, #blocked> loc(#loc12)
      %38 = arith.andi %37, %21 : tensor<8x4xi1, #blocked> loc(#loc12)
      %39 = tt.load %36, %38, %cst evictionPolicy = evict_first : tensor<8x4x!tt.ptr<i32>, #blocked> loc(#loc15)
      %40 = arith.extsi %39 : tensor<8x4xi32, #blocked> to tensor<8x4xi64, #blocked> loc(#loc16)
      %41 = arith.addi %arg6, %40 : tensor<8x4xi64, #blocked> loc(#loc17)
      %42 = arith.select %38, %41, %arg6 : tensor<8x4xi1, #blocked>, tensor<8x4xi64, #blocked> loc(#loc18)
      scf.yield %42 : tensor<8x4xi64, #blocked> loc(#loc19)
    } loc(#loc13)
    %23 = "tt.reduce"(%22) <{axis = 1 : i32}> ({
    ^bb0(%arg5: i64 loc(callsite(#loc1 at #loc21)), %arg6: i64 loc(callsite(#loc1 at #loc21))):
      %29 = arith.addi %arg5, %arg6 : i64 loc(#loc30)
      tt.reduce.return %29 : i64 loc(#loc28)
    }) : (tensor<8x4xi64, #blocked>) -> tensor<8xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc28)
    %24 = ttg.convert_layout %23 : tensor<8xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<8xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc23)
    %25 = tt.expand_dims %24 {axis = 1 : i32} : tensor<8xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<8x1xi64, #blocked1> loc(#loc23)
    %26 = arith.trunci %25 : tensor<8x1xi64, #blocked1> to tensor<8x1xi32, #blocked1> loc(#loc24)
    %27 = tt.splat %arg1 : !tt.ptr<i32> -> tensor<8x1x!tt.ptr<i32>, #blocked1> loc(#loc25)
    %28 = tt.addptr %27, %9 : tensor<8x1x!tt.ptr<i32>, #blocked1>, tensor<8x1xi32, #blocked1> loc(#loc25)
    tt.store %28, %26, %13 : tensor<8x1x!tt.ptr<i32>, #blocked1> loc(#loc26)
    tt.return loc(#loc27)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/tmp/torchinductor_jovyan/na/cna7kgjdlbi5ppncuubnjk2ewbsdtew7jjbsyfvvqunptm3shf7j.py":21:28)
#loc3 = loc("/tmp/torchinductor_jovyan/na/cna7kgjdlbi5ppncuubnjk2ewbsdtew7jjbsyfvvqunptm3shf7j.py":21:33)
#loc4 = loc("/tmp/torchinductor_jovyan/na/cna7kgjdlbi5ppncuubnjk2ewbsdtew7jjbsyfvvqunptm3shf7j.py":22:44)
#loc5 = loc("/tmp/torchinductor_jovyan/na/cna7kgjdlbi5ppncuubnjk2ewbsdtew7jjbsyfvvqunptm3shf7j.py":22:23)
#loc6 = loc("/tmp/torchinductor_jovyan/na/cna7kgjdlbi5ppncuubnjk2ewbsdtew7jjbsyfvvqunptm3shf7j.py":23:21)
#loc7 = loc("/tmp/torchinductor_jovyan/na/cna7kgjdlbi5ppncuubnjk2ewbsdtew7jjbsyfvvqunptm3shf7j.py":24:37)
#loc8 = loc("/tmp/torchinductor_jovyan/na/cna7kgjdlbi5ppncuubnjk2ewbsdtew7jjbsyfvvqunptm3shf7j.py":30:29)
#loc9 = loc("/tmp/torchinductor_jovyan/na/cna7kgjdlbi5ppncuubnjk2ewbsdtew7jjbsyfvvqunptm3shf7j.py":34:43)
#loc10 = loc("/tmp/torchinductor_jovyan/na/cna7kgjdlbi5ppncuubnjk2ewbsdtew7jjbsyfvvqunptm3shf7j.py":34:39)
#loc11 = loc("/tmp/torchinductor_jovyan/na/cna7kgjdlbi5ppncuubnjk2ewbsdtew7jjbsyfvvqunptm3shf7j.py":34:34)
#loc12 = loc("/tmp/torchinductor_jovyan/na/cna7kgjdlbi5ppncuubnjk2ewbsdtew7jjbsyfvvqunptm3shf7j.py":34:60)
#loc13 = loc("/tmp/torchinductor_jovyan/na/cna7kgjdlbi5ppncuubnjk2ewbsdtew7jjbsyfvvqunptm3shf7j.py":28:40)
#loc14 = loc("/tmp/torchinductor_jovyan/na/cna7kgjdlbi5ppncuubnjk2ewbsdtew7jjbsyfvvqunptm3shf7j.py":29:31)
#loc15 = loc("/tmp/torchinductor_jovyan/na/cna7kgjdlbi5ppncuubnjk2ewbsdtew7jjbsyfvvqunptm3shf7j.py":34:50)
#loc16 = loc("/tmp/torchinductor_jovyan/na/cna7kgjdlbi5ppncuubnjk2ewbsdtew7jjbsyfvvqunptm3shf7j.py":35:23)
#loc17 = loc("/tmp/torchinductor_jovyan/na/cna7kgjdlbi5ppncuubnjk2ewbsdtew7jjbsyfvvqunptm3shf7j.py":37:23)
#loc18 = loc("/tmp/torchinductor_jovyan/na/cna7kgjdlbi5ppncuubnjk2ewbsdtew7jjbsyfvvqunptm3shf7j.py":38:48)
#loc19 = loc("/tmp/torchinductor_jovyan/na/cna7kgjdlbi5ppncuubnjk2ewbsdtew7jjbsyfvvqunptm3shf7j.py":38:8)
#loc20 = loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":290:36)
#loc22 = loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":260:15)
#loc23 = loc("/tmp/torchinductor_jovyan/na/cna7kgjdlbi5ppncuubnjk2ewbsdtew7jjbsyfvvqunptm3shf7j.py":39:28)
#loc24 = loc("/tmp/torchinductor_jovyan/na/cna7kgjdlbi5ppncuubnjk2ewbsdtew7jjbsyfvvqunptm3shf7j.py":40:19)
#loc25 = loc("/tmp/torchinductor_jovyan/na/cna7kgjdlbi5ppncuubnjk2ewbsdtew7jjbsyfvvqunptm3shf7j.py":41:25)
#loc26 = loc("/tmp/torchinductor_jovyan/na/cna7kgjdlbi5ppncuubnjk2ewbsdtew7jjbsyfvvqunptm3shf7j.py":41:36)
#loc27 = loc("/tmp/torchinductor_jovyan/na/cna7kgjdlbi5ppncuubnjk2ewbsdtew7jjbsyfvvqunptm3shf7j.py":41:4)
#loc28 = loc(callsite(#loc20 at #loc21))
#loc30 = loc(callsite(#loc22 at #loc28))
