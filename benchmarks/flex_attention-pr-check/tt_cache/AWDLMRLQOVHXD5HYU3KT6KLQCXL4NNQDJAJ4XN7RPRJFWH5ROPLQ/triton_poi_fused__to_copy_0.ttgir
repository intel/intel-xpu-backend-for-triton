#blocked = #ttg.blocked<{sizePerThread = [2], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/tmp/torchinductor_jovyan/tt/cttz7mi3gnwo2dvahur2ltqgu4vsy5h735urlogwyykk34rpfnhm.py":18:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "xpu", "ttg.threads-per-warp" = 32 : i32, ttig.min_sg_size = 16 : i32, ttig.support_bf16_conversion, ttig.support_dpas, ttig.support_sg_2d_block, ttig.target_arch = "spir64"} {
  tt.func public @triton_poi_fused__to_copy_0(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_jovyan/tt/cttz7mi3gnwo2dvahur2ltqgu4vsy5h735urlogwyykk34rpfnhm.py":18:0), %arg1: !tt.ptr<i1> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_jovyan/tt/cttz7mi3gnwo2dvahur2ltqgu4vsy5h735urlogwyykk34rpfnhm.py":18:0), %arg2: i32 loc("/tmp/torchinductor_jovyan/tt/cttz7mi3gnwo2dvahur2ltqgu4vsy5h735urlogwyykk34rpfnhm.py":18:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0> : tensor<256xi64, #blocked> loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<256xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<256xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg2 : i32 -> tensor<256xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<256xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<256x!tt.ptr<i64>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<256x!tt.ptr<i64>, #blocked>, tensor<256xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<256x!tt.ptr<i64>, #blocked> loc(#loc8)
    %10 = arith.cmpi ne, %9, %cst : tensor<256xi64, #blocked> loc(#loc9)
    %11 = tt.splat %arg1 : !tt.ptr<i1> -> tensor<256x!tt.ptr<i1>, #blocked> loc(#loc10)
    %12 = tt.addptr %11, %4 : tensor<256x!tt.ptr<i1>, #blocked>, tensor<256xi32, #blocked> loc(#loc10)
    %13 = tt.bitcast %12 : tensor<256x!tt.ptr<i1>, #blocked> -> tensor<256x!tt.ptr<i8>, #blocked> loc(#loc11)
    %14 = arith.extui %10 : tensor<256xi1, #blocked> to tensor<256xi8, #blocked> loc(#loc11)
    tt.store %13, %14, %6 : tensor<256x!tt.ptr<i8>, #blocked> loc(#loc11)
    tt.return loc(#loc12)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/tmp/torchinductor_jovyan/tt/cttz7mi3gnwo2dvahur2ltqgu4vsy5h735urlogwyykk34rpfnhm.py":19:28)
#loc3 = loc("/tmp/torchinductor_jovyan/tt/cttz7mi3gnwo2dvahur2ltqgu4vsy5h735urlogwyykk34rpfnhm.py":19:33)
#loc4 = loc("/tmp/torchinductor_jovyan/tt/cttz7mi3gnwo2dvahur2ltqgu4vsy5h735urlogwyykk34rpfnhm.py":20:36)
#loc5 = loc("/tmp/torchinductor_jovyan/tt/cttz7mi3gnwo2dvahur2ltqgu4vsy5h735urlogwyykk34rpfnhm.py":20:23)
#loc6 = loc("/tmp/torchinductor_jovyan/tt/cttz7mi3gnwo2dvahur2ltqgu4vsy5h735urlogwyykk34rpfnhm.py":21:21)
#loc7 = loc("/tmp/torchinductor_jovyan/tt/cttz7mi3gnwo2dvahur2ltqgu4vsy5h735urlogwyykk34rpfnhm.py":23:30)
#loc8 = loc("/tmp/torchinductor_jovyan/tt/cttz7mi3gnwo2dvahur2ltqgu4vsy5h735urlogwyykk34rpfnhm.py":23:35)
#loc9 = loc("/tmp/torchinductor_jovyan/tt/cttz7mi3gnwo2dvahur2ltqgu4vsy5h735urlogwyykk34rpfnhm.py":24:20)
#loc10 = loc("/tmp/torchinductor_jovyan/tt/cttz7mi3gnwo2dvahur2ltqgu4vsy5h735urlogwyykk34rpfnhm.py":25:25)
#loc11 = loc("/tmp/torchinductor_jovyan/tt/cttz7mi3gnwo2dvahur2ltqgu4vsy5h735urlogwyykk34rpfnhm.py":25:36)
#loc12 = loc("/tmp/torchinductor_jovyan/tt/cttz7mi3gnwo2dvahur2ltqgu4vsy5h735urlogwyykk34rpfnhm.py":25:4)
