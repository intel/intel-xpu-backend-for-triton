; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-n8:16:32:64"
target triple = "spir64-unknown-unknown"

@assertFunc_ = internal addrspace(1) constant [8 x i8] c"unknown\00"
@assertFile_ = internal addrspace(1) constant [85 x i8] c"/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py\00"
@assertMessage_ = internal addrspace(1) constant [114 x i8] c"index out of bounds: 0 <= tl.where(ks2 + r0_1 + ks0*x0 < 0, ks2 + ks3 + r0_1 + ks0*x0, ks2 + r0_1 + ks0*x0) < ks3\00"
@__spirv_BuiltInGlobalInvocationId = external dso_local local_unnamed_addr addrspace(1) constant <3 x i64>, align 32
@__spirv_BuiltInLocalInvocationId = external dso_local local_unnamed_addr addrspace(1) constant <3 x i64>, align 32

; Function Attrs: convergent mustprogress nounwind willreturn
declare !dbg !9 spir_func i64 @_Z27__spirv_GroupNonUniformIAddiimj(i32, i32, i64, i32) local_unnamed_addr #0

; Function Attrs: convergent mustprogress nounwind willreturn
declare !dbg !12 spir_func void @_Z7barrierj(i32) local_unnamed_addr #0

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(none)
declare !dbg !13 spir_func i64 @_Z12get_local_idj(i32) local_unnamed_addr #1

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(none)
declare !dbg !14 spir_func i64 @_Z12get_group_idj(i32) local_unnamed_addr #1

; Function Attrs: nounwind
define spir_kernel void @triton_red_fused__to_copy_add_arange_bitwise_and_constant_pad_nd_eq_gt_index_le_lt_permute_sum_view_0(ptr addrspace(1) readonly captures(none) %0, ptr addrspace(1) readonly captures(none) %1, ptr addrspace(1) writeonly captures(none) %2, ptr addrspace(1) writeonly captures(none) %3, i64 %4, i64 %5, i64 %6, i64 %7, i32 %8, i32 %9, ptr addrspace(1) readnone captures(none) %10, ptr addrspace(3) captures(none) %11) local_unnamed_addr #2 !dbg !15 !intel_reqd_sub_group_size !16 !max_work_group_size !17 {
  %13 = tail call spir_func i64 @_Z12get_group_idj(i32 0) #4, !dbg !18
  %14 = trunc i64 %13 to i32, !dbg !18
  %15 = shl i32 %14, 4, !dbg !19
  %16 = tail call spir_func i64 @_Z12get_local_idj(i32 0) #4, !dbg !20
  %17 = trunc i64 %16 to i32, !dbg !20
  %18 = lshr i32 %17, 3, !dbg !20
  %19 = and i32 %18, 7, !dbg !20
  %20 = and i32 %17, 15, !dbg !20
  %21 = or disjoint i32 %19, %15, !dbg !21
  %22 = or disjoint i32 %21, 8, !dbg !21
  %23 = or disjoint i32 %20, %15, !dbg !21
  %24 = icmp slt i32 %21, %8, !dbg !22
  %25 = icmp slt i32 %22, %8, !dbg !22
  %26 = icmp slt i32 %23, %8, !dbg !22
  %27 = and i32 %17, 7, !dbg !23
  %28 = icmp slt i64 %4, 0, !dbg !24
  %29 = sext i32 %21 to i64, !dbg !28
  %30 = sext i32 %22 to i64, !dbg !28
  %31 = mul i64 %4, %29, !dbg !28
  %32 = mul i64 %4, %30, !dbg !28
  %33 = add i64 %7, %6, !dbg !29
  %invariant.op = add i64 %6, %31, !dbg !30
  %invariant.op15 = add i64 %6, %32, !dbg !30
  %invariant.op17 = add i64 %33, %31, !dbg !30
  %invariant.op19 = add i64 %33, %32, !dbg !30
  %34 = icmp sgt i32 %9, 0, !dbg !30
  br i1 %34, label %.lr.ph, label %._crit_edge, !dbg !30

.lr.ph:                                           ; preds = %12
  %35 = load i64, ptr addrspace(1) @__spirv_BuiltInGlobalInvocationId, align 32
  %36 = load i64, ptr addrspace(1) getelementptr inbounds nuw (i8, ptr addrspace(1) @__spirv_BuiltInGlobalInvocationId, i64 8), align 8
  %37 = load i64, ptr addrspace(1) getelementptr inbounds nuw (i8, ptr addrspace(1) @__spirv_BuiltInGlobalInvocationId, i64 16), align 16
  %38 = load i64, ptr addrspace(1) @__spirv_BuiltInLocalInvocationId, align 32
  %39 = load i64, ptr addrspace(1) getelementptr inbounds nuw (i8, ptr addrspace(1) @__spirv_BuiltInLocalInvocationId, i64 8), align 8
  %40 = load i64, ptr addrspace(1) getelementptr inbounds nuw (i8, ptr addrspace(1) @__spirv_BuiltInLocalInvocationId, i64 16), align 16
  br label %41, !dbg !30

41:                                               ; preds = %.lr.ph, %91
  %42 = phi i64 [ 0, %.lr.ph ], [ %99, %91 ]
  %43 = phi i64 [ 0, %.lr.ph ], [ %102, %91 ]
  %44 = phi i32 [ 0, %.lr.ph ], [ %103, %91 ]
  %45 = or disjoint i32 %44, %27, !dbg !31
  %46 = icmp slt i32 %45, %9, !dbg !32
  %47 = sext i32 %45 to i64, !dbg !33
  %.frozen = freeze i64 %47, !dbg !33
  %.frozen26 = freeze i64 %4, !dbg !33
  %48 = sdiv i64 %.frozen, %.frozen26, !dbg !33
  %49 = mul i64 %48, %.frozen26, !dbg !34
  %.decomposed = sub i64 %.frozen, %49, !dbg !34
  %.not = icmp ne i64 %.decomposed, 0, !dbg !35
  %50 = icmp slt i32 %44, 0, !dbg !36
  %51 = xor i1 %28, %50, !dbg !37
  %narrow = select i1 %51, i1 %.not, i1 false, !dbg !38
  %52 = sext i1 %narrow to i64, !dbg !38
  %53 = add nsw i64 %48, %52, !dbg !38
  %54 = icmp slt i64 %53, 1, !dbg !39
  %55 = add i64 %.decomposed, %31, !dbg !40
  %56 = add i64 %.decomposed, %32, !dbg !40
  %57 = icmp slt i64 %55, %5, !dbg !41
  %58 = icmp slt i64 %56, %5, !dbg !41
  %59 = and i1 %57, %54, !dbg !42
  %60 = and i1 %58, %54, !dbg !42
  %61 = load i64, ptr addrspace(1) %0, align 8, !dbg !43
  %62 = select i1 %59, i64 %61, i64 0, !dbg !44
  %63 = select i1 %60, i64 %61, i64 0, !dbg !44
  %.reass = add i64 %.decomposed, %invariant.op
  %.reass16 = add i64 %.decomposed, %invariant.op15
  %64 = icmp sle i64 %.reass, %62, !dbg !45
  %65 = icmp sle i64 %.reass16, %63, !dbg !45
  %66 = icmp slt i64 %.reass, 0, !dbg !46
  %67 = icmp slt i64 %.reass16, 0, !dbg !46
  %.reass18 = add i64 %.decomposed, %invariant.op17
  %.reass20 = add i64 %.decomposed, %invariant.op19
  %68 = select i1 %66, i64 %.reass18, i64 %.reass, !dbg !47
  %69 = select i1 %67, i64 %.reass20, i64 %.reass16, !dbg !47
  %70 = icmp slt i64 %68, 0, !dbg !48
  %71 = icmp slt i64 %69, 0, !dbg !48
  %72 = icmp sge i64 %68, %7, !dbg !49
  %73 = icmp sge i64 %69, %7, !dbg !49
  %.not7 = or i1 %70, %72, !dbg !50
  %.not12 = or i1 %71, %73, !dbg !51
  %74 = and i1 %46, %59, !dbg !51
  %75 = and i1 %46, %60, !dbg !51
  %76 = and i1 %24, %74, !dbg !52
  %77 = and i1 %25, %75, !dbg !52
  %.not4 = and i1 %.not7, %76, !dbg !53
  %.not9 = and i1 %.not12, %77, !dbg !54
  %78 = or i1 %.not4, %.not9, !dbg !54
  br i1 %78, label %79, label %80, !dbg !54

79:                                               ; preds = %41
  tail call spir_func void @__devicelib_assert_fail(ptr addrspace(4) noundef addrspacecast (ptr addrspace(1) @assertMessage_ to ptr addrspace(4)), ptr addrspace(4) noundef addrspacecast (ptr addrspace(1) @assertFile_ to ptr addrspace(4)), i32 noundef 51, ptr addrspace(4) noundef addrspacecast (ptr addrspace(1) @assertFunc_ to ptr addrspace(4)), i64 noundef %35, i64 noundef %36, i64 noundef %37, i64 noundef %38, i64 noundef %39, i64 noundef %40) #5, !dbg !54
  br label %80, !dbg !54

80:                                               ; preds = %79, %41
  tail call spir_func void @_Z7barrierj(i32 1) #6, !dbg !54
  %81 = getelementptr i1, ptr addrspace(1) %1, i64 %69, !dbg !55
  br i1 %76, label %82, label %86, !dbg !56

82:                                               ; preds = %80
  %83 = getelementptr i1, ptr addrspace(1) %1, i64 %68, !dbg !55
  %84 = load i8, ptr addrspace(1) %83, align 1, !dbg !56
  %85 = icmp ne i8 %84, 0, !dbg !56
  br label %86, !dbg !56

86:                                               ; preds = %82, %80
  %87 = phi i1 [ %85, %82 ], [ false, %80 ], !dbg !56
  br i1 %77, label %88, label %91, !dbg !56

88:                                               ; preds = %86
  %89 = load i8, ptr addrspace(1) %81, align 1, !dbg !56
  %90 = icmp ne i8 %89, 0, !dbg !56
  br label %91, !dbg !56

91:                                               ; preds = %88, %86
  %92 = phi i1 [ %90, %88 ], [ false, %86 ], !dbg !56
  %93 = and i1 %64, %87, !dbg !57
  %94 = and i1 %65, %92, !dbg !57
  %95 = and i1 %24, %46, !dbg !58
  %96 = and i1 %25, %46, !dbg !58
  %97 = and i1 %95, %59, !dbg !59
  %narrow13 = select i1 %97, i1 %93, i1 false, !dbg !59
  %98 = zext i1 %narrow13 to i64, !dbg !59
  %99 = add i64 %42, %98, !dbg !59
  %100 = and i1 %96, %60, !dbg !59
  %narrow14 = select i1 %100, i1 %94, i1 false, !dbg !59
  %101 = zext i1 %narrow14 to i64, !dbg !59
  %102 = add i64 %43, %101, !dbg !59
  %103 = add i32 %44, 8, !dbg !30
  %104 = icmp slt i32 %103, %9, !dbg !30
  br i1 %104, label %41, label %._crit_edge, !dbg !30

._crit_edge:                                      ; preds = %91, %12
  %105 = phi i64 [ 0, %12 ], [ %99, %91 ], !dbg !60
  %106 = phi i64 [ 0, %12 ], [ %102, %91 ], !dbg !60
  %107 = tail call spir_func i64 @_Z27__spirv_GroupNonUniformIAddiimj(i32 3, i32 3, i64 %105, i32 8) #6, !dbg !61
  %108 = tail call spir_func i64 @_Z27__spirv_GroupNonUniformIAddiimj(i32 3, i32 3, i64 %106, i32 8) #6, !dbg !61
  %109 = icmp sgt i64 %107, 0, !dbg !65
  %110 = icmp sgt i64 %108, 0, !dbg !65
  %111 = mul i64 %4, %4, !dbg !66
  %112 = icmp slt i64 %107, %111, !dbg !67
  %113 = icmp slt i64 %108, %111, !dbg !67
  %114 = and i1 %109, %112, !dbg !68
  %115 = and i1 %110, %113, !dbg !68
  %116 = zext i1 %114 to i8, !dbg !69
  %117 = zext i1 %115 to i8, !dbg !69
  %118 = shl nuw nsw i32 %19, 1, !dbg !69
  %119 = zext nneg i32 %118 to i64, !dbg !69
  %120 = getelementptr inbounds nuw i8, ptr addrspace(3) %11, i64 %119, !dbg !69
  %121 = insertelement <1 x i8> poison, i8 %116, i64 0, !dbg !69
  store <1 x i8> %121, ptr addrspace(3) %120, align 1, !dbg !69
  %122 = getelementptr inbounds nuw i8, ptr addrspace(3) %120, i64 16, !dbg !69
  %123 = insertelement <1 x i8> poison, i8 %117, i64 0, !dbg !69
  store <1 x i8> %123, ptr addrspace(3) %122, align 1, !dbg !69
  tail call spir_func void @_Z7barrierj(i32 1) #6, !dbg !69
  %124 = shl i64 %16, 1, !dbg !69
  %125 = and i64 %124, 30, !dbg !69
  %126 = getelementptr inbounds nuw i8, ptr addrspace(3) %11, i64 %125, !dbg !69
  %127 = load <1 x i8>, ptr addrspace(3) %126, align 1, !dbg !69
  %128 = icmp eq i64 %107, %111, !dbg !70
  %129 = icmp eq i64 %108, %111, !dbg !70
  tail call spir_func void @_Z7barrierj(i32 1) #6, !dbg !69
  %130 = zext i1 %128 to i8, !dbg !69
  %131 = zext i1 %129 to i8, !dbg !69
  %132 = insertelement <1 x i8> poison, i8 %130, i64 0, !dbg !69
  store <1 x i8> %132, ptr addrspace(3) %120, align 1, !dbg !69
  %133 = insertelement <1 x i8> poison, i8 %131, i64 0, !dbg !69
  store <1 x i8> %133, ptr addrspace(3) %122, align 1, !dbg !69
  tail call spir_func void @_Z7barrierj(i32 1) #6, !dbg !69
  %134 = and i32 %17, 48, !dbg !71
  %135 = icmp eq i32 %134, 0, !dbg !71
  %136 = and i1 %135, %26, !dbg !71
  br i1 %136, label %137, label %.critedge, !dbg !71

137:                                              ; preds = %._crit_edge
  %138 = load i8, ptr addrspace(3) %126, align 1, !dbg !69
  %139 = icmp ne i8 %138, 0, !dbg !69
  %140 = zext i1 %139 to i32, !dbg !69
  %141 = extractelement <1 x i8> %127, i64 0, !dbg !69
  %142 = icmp ne i8 %141, 0, !dbg !69
  %143 = zext i1 %142 to i32, !dbg !69
  %144 = insertelement <1 x i32> poison, i32 %143, i64 0, !dbg !71
  %145 = sext i32 %23 to i64, !dbg !72
  %146 = getelementptr i32, ptr addrspace(1) %2, i64 %145, !dbg !72
  store <1 x i32> %144, ptr addrspace(1) %146, align 4, !dbg !71
  %147 = insertelement <1 x i32> poison, i32 %140, i64 0, !dbg !73
  %148 = getelementptr i32, ptr addrspace(1) %3, i64 %145, !dbg !74
  store <1 x i32> %147, ptr addrspace(1) %148, align 4, !dbg !73
  br label %.critedge, !dbg !73

.critedge:                                        ; preds = %._crit_edge, %137
  ret void, !dbg !75
}

; Function Attrs: convergent mustprogress norecurse nounwind
declare extern_weak dso_local spir_func void @__devicelib_assert_fail(ptr addrspace(4) noundef, ptr addrspace(4) noundef, i32 noundef, ptr addrspace(4) noundef, i64 noundef, i64 noundef, i64 noundef, i64 noundef, i64 noundef, i64 noundef) local_unnamed_addr #3

attributes #0 = { convergent mustprogress nounwind willreturn }
attributes #1 = { mustprogress nofree nosync nounwind willreturn memory(none) }
attributes #2 = { nounwind }
attributes #3 = { convergent mustprogress norecurse nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "sycl-module-id"="/netbatch/donb74095_00/dir/workspace/NIT/xmain-rel/LX/xmainefi2linux_release/ws/icsws/llvm/libdevice/fallback-cassert.cpp" "sycl-optlevel"="2" }
attributes #4 = { nounwind willreturn memory(none) }
attributes #5 = { convergent nounwind }
attributes #6 = { convergent nounwind willreturn }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3, !4, !5}
!opencl.spir.version = !{!6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6}
!spirv.Source = !{!7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7}
!llvm.ident = !{!8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py", directory: "/tmp/torchinductor_jovyan/pk")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 1, !"wchar_size", i32 4}
!4 = !{i32 1, !"sycl-device", i32 1}
!5 = !{i32 7, !"frame-pointer", i32 2}
!6 = !{i32 1, i32 2}
!7 = !{i32 3, i32 100000}
!8 = !{!"Intel(R) oneAPI DPC++/C++ Compiler 2025.0.0 (2025.0.0.20241008)"}
!9 = !DISubprogram(name: "_Z27__spirv_GroupNonUniformIAddiimj", linkageName: "_Z27__spirv_GroupNonUniformIAddiimj", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagOptimized)
!10 = !DISubroutineType(cc: DW_CC_normal, types: !11)
!11 = !{}
!12 = !DISubprogram(name: "_Z7barrierj", linkageName: "_Z7barrierj", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagOptimized)
!13 = !DISubprogram(name: "_Z12get_local_idj", linkageName: "_Z12get_local_idj", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagOptimized)
!14 = !DISubprogram(name: "_Z12get_group_idj", linkageName: "_Z12get_group_idj", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagOptimized)
!15 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_arange_bitwise_and_constant_pad_nd_eq_gt_index_le_lt_permute_sum_view_0", linkageName: "triton_red_fused__to_copy_add_arange_bitwise_and_constant_pad_nd_eq_gt_index_le_lt_permute_sum_view_0", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!16 = !{i32 32}
!17 = !{i64 64, i64 1, i64 1}
!18 = !DILocation(line: 21, column: 28, scope: !15)
!19 = !DILocation(line: 21, column: 33, scope: !15)
!20 = !DILocation(line: 22, column: 44, scope: !15)
!21 = !DILocation(line: 22, column: 23, scope: !15)
!22 = !DILocation(line: 23, column: 21, scope: !15)
!23 = !DILocation(line: 24, column: 37, scope: !15)
!24 = !DILocation(line: 76, column: 36, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !15, file: !26, discriminator: 0)
!26 = !DIFile(filename: "triton_helpers.py", directory: "/home/jovyan/envs/miniforge3/envs/triton/lib/python3.10/site-packages/torch/_inductor/runtime")
!27 = !DILocation(line: 33, column: 59, scope: !15)
!28 = !DILocation(line: 38, column: 26, scope: !15)
!29 = !DILocation(line: 51, column: 72, scope: !15)
!30 = !DILocation(line: 28, column: 40, scope: !15)
!31 = !DILocation(line: 29, column: 31, scope: !15)
!32 = !DILocation(line: 30, column: 29, scope: !15)
!33 = !DILocation(line: 73, column: 16, scope: !25, inlinedAt: !27)
!34 = !DILocation(line: 74, column: 20, scope: !25, inlinedAt: !27)
!35 = !DILocation(line: 75, column: 34, scope: !25, inlinedAt: !27)
!36 = !DILocation(line: 76, column: 25, scope: !25, inlinedAt: !27)
!37 = !DILocation(line: 76, column: 32, scope: !25, inlinedAt: !27)
!38 = !DILocation(line: 76, column: 47, scope: !25, inlinedAt: !27)
!39 = !DILocation(line: 37, column: 22, scope: !15)
!40 = !DILocation(line: 38, column: 22, scope: !15)
!41 = !DILocation(line: 40, column: 22, scope: !15)
!42 = !DILocation(line: 41, column: 22, scope: !15)
!43 = !DILocation(line: 42, column: 23, scope: !15)
!44 = !DILocation(line: 44, column: 36, scope: !15)
!45 = !DILocation(line: 48, column: 25, scope: !15)
!46 = !DILocation(line: 51, column: 63, scope: !15)
!47 = !DILocation(line: 51, column: 93, scope: !15)
!48 = !DILocation(line: 51, column: 32, scope: !15)
!49 = !DILocation(line: 51, column: 202, scope: !15)
!50 = !DILocation(line: 51, column: 118, scope: !15)
!51 = !DILocation(line: 51, column: 222, scope: !15)
!52 = !DILocation(line: 51, column: 229, scope: !15)
!53 = !DILocation(line: 51, column: 210, scope: !15)
!54 = !DILocation(line: 51, column: 237, scope: !15)
!55 = !DILocation(line: 52, column: 35, scope: !15)
!56 = !DILocation(line: 52, column: 119, scope: !15)
!57 = !DILocation(line: 53, column: 24, scope: !15)
!58 = !DILocation(line: 59, column: 36, scope: !15)
!59 = !DILocation(line: 59, column: 50, scope: !15)
!60 = !DILocation(line: 27, column: 44, scope: !15)
!61 = !DILocation(line: 290, column: 36, scope: !62, inlinedAt: !64)
!62 = distinct !DILexicalBlockFile(scope: !15, file: !63, discriminator: 0)
!63 = !DIFile(filename: "standard.py", directory: "/home/jovyan/intel-xpu-backend-for-triton/python/triton/language")
!64 = !DILocation(line: 60, column: 27, scope: !15)
!65 = !DILocation(line: 62, column: 20, scope: !15)
!66 = !DILocation(line: 63, column: 16, scope: !15)
!67 = !DILocation(line: 64, column: 20, scope: !15)
!68 = !DILocation(line: 65, column: 20, scope: !15)
!69 = !DILocation(line: 0, scope: !15)
!70 = !DILocation(line: 68, column: 21, scope: !15)
!71 = !DILocation(line: 71, column: 37, scope: !15)
!72 = !DILocation(line: 71, column: 25, scope: !15)
!73 = !DILocation(line: 72, column: 37, scope: !15)
!74 = !DILocation(line: 72, column: 25, scope: !15)
!75 = !DILocation(line: 72, column: 4, scope: !15)
