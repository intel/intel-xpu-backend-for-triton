; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-n8:16:32:64"
target triple = "spir64-unknown-unknown"

@assertFunc_ = internal addrspace(1) constant [8 x i8] c"unknown\00"
@assertFile_ = internal addrspace(1) constant [85 x i8] c"/tmp/torchinductor_jovyan/pk/cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py\00"
@assertMessage_ = internal addrspace(1) constant [114 x i8] c"index out of bounds: 0 <= tl.where(ks2 + r0_1 + ks0*x0 < 0, ks2 + ks3 + r0_1 + ks0*x0, ks2 + r0_1 + ks0*x0) < ks3\00"
@__spirv_BuiltInGlobalInvocationId = external dso_local local_unnamed_addr addrspace(1) constant <3 x i64>, align 32
@__spirv_BuiltInLocalInvocationId = external dso_local local_unnamed_addr addrspace(1) constant <3 x i64>, align 32

; Function Attrs: convergent mustprogress nounwind willreturn
declare !dbg !9 spir_func i64 @_Z27__spirv_GroupNonUniformIAddiimj(i32, i32, i64, i32) local_unnamed_addr #0

; Function Attrs: convergent mustprogress nounwind willreturn
declare !dbg !12 spir_func i64 @_Z27__spirv_GroupNonUniformIAddiim(i32, i32, i64) local_unnamed_addr #0

; Function Attrs: convergent mustprogress nounwind willreturn
declare !dbg !13 spir_func void @_Z7barrierj(i32) local_unnamed_addr #0

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(none)
declare !dbg !14 spir_func i64 @_Z12get_local_idj(i32) local_unnamed_addr #1

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(none)
declare !dbg !15 spir_func i64 @_Z12get_group_idj(i32) local_unnamed_addr #1

; Function Attrs: nounwind
define spir_kernel void @triton_red_fused__to_copy_add_arange_bitwise_and_constant_pad_nd_eq_gt_index_le_lt_permute_sum_view_0(ptr addrspace(1) readonly captures(none) %0, ptr addrspace(1) readonly captures(none) %1, ptr addrspace(1) writeonly captures(none) %2, ptr addrspace(1) writeonly captures(none) %3, i64 %4, i64 %5, i64 %6, i64 %7, i32 %8, i32 %9, ptr addrspace(1) readnone captures(none) %10, ptr addrspace(3) captures(none) %11) local_unnamed_addr #2 !dbg !16 !intel_reqd_sub_group_size !17 !max_work_group_size !18 {
  %13 = tail call spir_func i64 @_Z12get_group_idj(i32 0) #4, !dbg !19
  %14 = trunc i64 %13 to i32, !dbg !19
  %15 = shl i32 %14, 4, !dbg !20
  %16 = tail call spir_func i64 @_Z12get_local_idj(i32 0) #4, !dbg !21
  %17 = trunc i64 %16 to i32, !dbg !21
  %18 = and i32 %17, 224, !dbg !21
  %19 = and i32 %17, 31, !dbg !21
  %20 = lshr i32 %17, 5, !dbg !21
  %21 = lshr i32 %17, 6, !dbg !21
  %22 = and i32 %21, 3, !dbg !21
  %23 = or disjoint i32 %22, 4, !dbg !21
  %24 = or disjoint i32 %22, 8, !dbg !21
  %25 = or disjoint i32 %22, 12, !dbg !21
  %26 = and i32 %17, 15, !dbg !21
  %27 = or disjoint i32 %22, %15, !dbg !22
  %28 = or disjoint i32 %23, %15, !dbg !22
  %29 = or disjoint i32 %24, %15, !dbg !22
  %30 = or disjoint i32 %25, %15, !dbg !22
  %31 = or disjoint i32 %26, %15, !dbg !22
  %32 = icmp slt i32 %27, %8, !dbg !23
  %33 = icmp slt i32 %28, %8, !dbg !23
  %34 = icmp slt i32 %29, %8, !dbg !23
  %35 = icmp slt i32 %30, %8, !dbg !23
  %36 = icmp slt i32 %31, %8, !dbg !23
  %37 = and i32 %17, 63, !dbg !24
  %38 = icmp slt i64 %4, 0, !dbg !25
  %39 = sext i32 %27 to i64, !dbg !29
  %40 = sext i32 %28 to i64, !dbg !29
  %41 = sext i32 %29 to i64, !dbg !29
  %42 = sext i32 %30 to i64, !dbg !29
  %43 = mul i64 %4, %39, !dbg !29
  %44 = mul i64 %4, %40, !dbg !29
  %45 = mul i64 %4, %41, !dbg !29
  %46 = mul i64 %4, %42, !dbg !29
  %47 = add i64 %7, %6, !dbg !30
  %48 = icmp sgt i32 %9, 0, !dbg !31
  br i1 %48, label %.lr.ph, label %._crit_edge, !dbg !31

.lr.ph:                                           ; preds = %12
  %49 = load i64, ptr addrspace(1) @__spirv_BuiltInGlobalInvocationId, align 32
  %50 = load i64, ptr addrspace(1) getelementptr inbounds nuw (i8, ptr addrspace(1) @__spirv_BuiltInGlobalInvocationId, i64 8), align 8
  %51 = load i64, ptr addrspace(1) getelementptr inbounds nuw (i8, ptr addrspace(1) @__spirv_BuiltInGlobalInvocationId, i64 16), align 16
  %52 = load i64, ptr addrspace(1) @__spirv_BuiltInLocalInvocationId, align 32
  %53 = load i64, ptr addrspace(1) getelementptr inbounds nuw (i8, ptr addrspace(1) @__spirv_BuiltInLocalInvocationId, i64 8), align 8
  %54 = load i64, ptr addrspace(1) getelementptr inbounds nuw (i8, ptr addrspace(1) @__spirv_BuiltInLocalInvocationId, i64 16), align 16
  br label %55, !dbg !31

55:                                               ; preds = %.lr.ph, %153
  %56 = phi i64 [ 0, %.lr.ph ], [ %165, %153 ]
  %57 = phi i64 [ 0, %.lr.ph ], [ %168, %153 ]
  %58 = phi i64 [ 0, %.lr.ph ], [ %171, %153 ]
  %59 = phi i64 [ 0, %.lr.ph ], [ %174, %153 ]
  %60 = phi i32 [ 0, %.lr.ph ], [ %175, %153 ]
  %61 = or disjoint i32 %60, %37, !dbg !32
  %62 = icmp slt i32 %61, %9, !dbg !33
  %63 = sext i32 %61 to i64, !dbg !34
  %.frozen = freeze i64 %63, !dbg !34
  %.frozen41 = freeze i64 %4, !dbg !34
  %64 = sdiv i64 %.frozen, %.frozen41, !dbg !34
  %65 = mul i64 %64, %.frozen41, !dbg !35
  %.decomposed = sub i64 %.frozen, %65, !dbg !35
  %.not = icmp ne i64 %.decomposed, 0, !dbg !36
  %66 = icmp slt i32 %60, 0, !dbg !37
  %67 = xor i1 %38, %66, !dbg !38
  %narrow = select i1 %67, i1 %.not, i1 false, !dbg !39
  %68 = sext i1 %narrow to i64, !dbg !39
  %69 = add nsw i64 %64, %68, !dbg !39
  %70 = icmp slt i64 %69, 1, !dbg !40
  %71 = add i64 %.decomposed, %43, !dbg !41
  %72 = add i64 %.decomposed, %44, !dbg !41
  %73 = add i64 %.decomposed, %45, !dbg !41
  %74 = add i64 %.decomposed, %46, !dbg !41
  %75 = icmp slt i64 %71, %5, !dbg !42
  %76 = icmp slt i64 %72, %5, !dbg !42
  %77 = icmp slt i64 %73, %5, !dbg !42
  %78 = icmp slt i64 %74, %5, !dbg !42
  %79 = and i1 %75, %70, !dbg !43
  %80 = and i1 %76, %70, !dbg !43
  %81 = and i1 %77, %70, !dbg !43
  %82 = and i1 %78, %70, !dbg !43
  %83 = load i64, ptr addrspace(1) %0, align 8, !dbg !44
  %84 = select i1 %79, i64 %83, i64 0, !dbg !45
  %85 = select i1 %80, i64 %83, i64 0, !dbg !45
  %86 = select i1 %81, i64 %83, i64 0, !dbg !45
  %87 = select i1 %82, i64 %83, i64 0, !dbg !45
  %88 = add i64 %.decomposed, %6, !dbg !46
  %89 = add i64 %88, %43, !dbg !47
  %90 = add i64 %88, %44, !dbg !47
  %91 = add i64 %88, %45, !dbg !47
  %92 = add i64 %88, %46, !dbg !47
  %93 = icmp sle i64 %89, %84, !dbg !48
  %94 = icmp sle i64 %90, %85, !dbg !48
  %95 = icmp sle i64 %91, %86, !dbg !48
  %96 = icmp sle i64 %92, %87, !dbg !48
  %97 = icmp slt i64 %89, 0, !dbg !49
  %98 = icmp slt i64 %90, 0, !dbg !49
  %99 = icmp slt i64 %91, 0, !dbg !49
  %100 = icmp slt i64 %92, 0, !dbg !49
  %101 = add i64 %47, %.decomposed, !dbg !50
  %102 = add i64 %101, %43, !dbg !51
  %103 = add i64 %101, %44, !dbg !51
  %104 = add i64 %101, %45, !dbg !51
  %105 = add i64 %101, %46, !dbg !51
  %106 = select i1 %97, i64 %102, i64 %89, !dbg !52
  %107 = select i1 %98, i64 %103, i64 %90, !dbg !52
  %108 = select i1 %99, i64 %104, i64 %91, !dbg !52
  %109 = select i1 %100, i64 %105, i64 %92, !dbg !52
  %110 = icmp slt i64 %106, 0, !dbg !53
  %111 = icmp slt i64 %107, 0, !dbg !53
  %112 = icmp slt i64 %108, 0, !dbg !53
  %113 = icmp slt i64 %109, 0, !dbg !53
  %114 = icmp sge i64 %106, %7, !dbg !54
  %115 = icmp sge i64 %107, %7, !dbg !54
  %116 = icmp sge i64 %108, %7, !dbg !54
  %117 = icmp sge i64 %109, %7, !dbg !54
  %.not6 = or i1 %110, %114, !dbg !55
  %.not11 = or i1 %111, %115, !dbg !55
  %.not16 = or i1 %112, %116, !dbg !55
  %.not21 = or i1 %113, %117, !dbg !56
  %118 = and i1 %62, %79, !dbg !56
  %119 = and i1 %62, %80, !dbg !56
  %120 = and i1 %62, %81, !dbg !56
  %121 = and i1 %62, %82, !dbg !56
  %122 = and i1 %32, %118, !dbg !57
  %123 = and i1 %33, %119, !dbg !57
  %124 = and i1 %34, %120, !dbg !57
  %125 = and i1 %35, %121, !dbg !57
  %.not3 = and i1 %.not6, %122, !dbg !58
  %.not8 = and i1 %.not11, %123, !dbg !58
  %.not13 = and i1 %.not16, %124, !dbg !58
  %.not18 = and i1 %.not21, %125, !dbg !59
  %126 = or i1 %.not3, %.not8, !dbg !59
  %127 = or i1 %.not13, %126, !dbg !59
  %128 = or i1 %.not18, %127, !dbg !59
  br i1 %128, label %129, label %130, !dbg !59

129:                                              ; preds = %55
  tail call spir_func void @__devicelib_assert_fail(ptr addrspace(4) noundef addrspacecast (ptr addrspace(1) @assertMessage_ to ptr addrspace(4)), ptr addrspace(4) noundef addrspacecast (ptr addrspace(1) @assertFile_ to ptr addrspace(4)), i32 noundef 51, ptr addrspace(4) noundef addrspacecast (ptr addrspace(1) @assertFunc_ to ptr addrspace(4)), i64 noundef %49, i64 noundef %50, i64 noundef %51, i64 noundef %52, i64 noundef %53, i64 noundef %54) #5, !dbg !59
  br label %130, !dbg !59

130:                                              ; preds = %129, %55
  tail call spir_func void @_Z7barrierj(i32 1) #6, !dbg !59
  %131 = getelementptr i1, ptr addrspace(1) %1, i64 %107, !dbg !60
  %132 = getelementptr i1, ptr addrspace(1) %1, i64 %108, !dbg !60
  %133 = getelementptr i1, ptr addrspace(1) %1, i64 %109, !dbg !60
  br i1 %122, label %134, label %138, !dbg !61

134:                                              ; preds = %130
  %135 = getelementptr i1, ptr addrspace(1) %1, i64 %106, !dbg !60
  %136 = load i8, ptr addrspace(1) %135, align 1, !dbg !61
  %137 = icmp ne i8 %136, 0, !dbg !61
  br label %138, !dbg !61

138:                                              ; preds = %134, %130
  %139 = phi i1 [ %137, %134 ], [ false, %130 ], !dbg !61
  br i1 %123, label %140, label %143, !dbg !61

140:                                              ; preds = %138
  %141 = load i8, ptr addrspace(1) %131, align 1, !dbg !61
  %142 = icmp ne i8 %141, 0, !dbg !61
  br label %143, !dbg !61

143:                                              ; preds = %140, %138
  %144 = phi i1 [ %142, %140 ], [ false, %138 ], !dbg !61
  br i1 %124, label %145, label %148, !dbg !61

145:                                              ; preds = %143
  %146 = load i8, ptr addrspace(1) %132, align 1, !dbg !61
  %147 = icmp ne i8 %146, 0, !dbg !61
  br label %148, !dbg !61

148:                                              ; preds = %145, %143
  %149 = phi i1 [ %147, %145 ], [ false, %143 ], !dbg !61
  br i1 %125, label %150, label %153, !dbg !61

150:                                              ; preds = %148
  %151 = load i8, ptr addrspace(1) %133, align 1, !dbg !61
  %152 = icmp ne i8 %151, 0, !dbg !61
  br label %153, !dbg !61

153:                                              ; preds = %150, %148
  %154 = phi i1 [ %152, %150 ], [ false, %148 ], !dbg !61
  %155 = and i1 %93, %139, !dbg !62
  %156 = and i1 %94, %144, !dbg !62
  %157 = and i1 %95, %149, !dbg !62
  %158 = and i1 %96, %154, !dbg !62
  %159 = and i1 %32, %62, !dbg !63
  %160 = and i1 %33, %62, !dbg !63
  %161 = and i1 %34, %62, !dbg !63
  %162 = and i1 %35, %62, !dbg !63
  %163 = select i1 %159, i1 %79, i1 false, !dbg !64
  %narrow22 = select i1 %163, i1 %155, i1 false, !dbg !64
  %164 = zext i1 %narrow22 to i64, !dbg !64
  %165 = add i64 %56, %164, !dbg !64
  %166 = select i1 %160, i1 %80, i1 false, !dbg !64
  %narrow23 = select i1 %166, i1 %156, i1 false, !dbg !64
  %167 = zext i1 %narrow23 to i64, !dbg !64
  %168 = add i64 %57, %167, !dbg !64
  %169 = select i1 %161, i1 %81, i1 false, !dbg !64
  %narrow24 = select i1 %169, i1 %157, i1 false, !dbg !64
  %170 = zext i1 %narrow24 to i64, !dbg !64
  %171 = add i64 %58, %170, !dbg !64
  %172 = select i1 %162, i1 %82, i1 false, !dbg !64
  %narrow25 = select i1 %172, i1 %158, i1 false, !dbg !64
  %173 = zext i1 %narrow25 to i64, !dbg !64
  %174 = add i64 %59, %173, !dbg !64
  %175 = add i32 %60, 64, !dbg !31
  %176 = icmp slt i32 %175, %9, !dbg !31
  br i1 %176, label %55, label %._crit_edge, !dbg !31

._crit_edge:                                      ; preds = %153, %12
  %177 = phi i64 [ 0, %12 ], [ %165, %153 ], !dbg !65
  %178 = phi i64 [ 0, %12 ], [ %168, %153 ], !dbg !65
  %179 = phi i64 [ 0, %12 ], [ %171, %153 ], !dbg !65
  %180 = phi i64 [ 0, %12 ], [ %174, %153 ], !dbg !65
  %181 = tail call spir_func i64 @_Z27__spirv_GroupNonUniformIAddiim(i32 3, i32 0, i64 %177) #6, !dbg !66
  %182 = tail call spir_func i64 @_Z27__spirv_GroupNonUniformIAddiim(i32 3, i32 0, i64 %178) #6, !dbg !66
  %183 = tail call spir_func i64 @_Z27__spirv_GroupNonUniformIAddiim(i32 3, i32 0, i64 %179) #6, !dbg !66
  %184 = tail call spir_func i64 @_Z27__spirv_GroupNonUniformIAddiim(i32 3, i32 0, i64 %180) #6, !dbg !66
  %185 = icmp eq i32 %19, 0, !dbg !66
  br i1 %185, label %.critedge, label %.critedge27, !dbg !66

.critedge:                                        ; preds = %._crit_edge
  %186 = and i32 %20, 1, !dbg !66
  %187 = shl nuw nsw i32 %22, 1, !dbg !66
  %188 = or disjoint i32 %187, %186, !dbg !66
  %189 = zext nneg i32 %188 to i64, !dbg !66
  %190 = getelementptr i64, ptr addrspace(3) %11, i64 %189, !dbg !66
  store i64 %181, ptr addrspace(3) %190, align 4, !dbg !66
  %191 = shl nuw nsw i32 %23, 1, !dbg !66
  %192 = or disjoint i32 %191, %186, !dbg !66
  %193 = zext nneg i32 %192 to i64, !dbg !66
  %194 = getelementptr i64, ptr addrspace(3) %11, i64 %193, !dbg !66
  store i64 %182, ptr addrspace(3) %194, align 4, !dbg !66
  %195 = shl nuw nsw i32 %24, 1, !dbg !66
  %196 = or disjoint i32 %195, %186, !dbg !66
  %197 = zext nneg i32 %196 to i64, !dbg !66
  %198 = getelementptr i64, ptr addrspace(3) %11, i64 %197, !dbg !66
  store i64 %183, ptr addrspace(3) %198, align 4, !dbg !66
  %199 = shl nuw nsw i32 %25, 1, !dbg !66
  %200 = or disjoint i32 %199, %186, !dbg !66
  %201 = zext nneg i32 %200 to i64, !dbg !66
  %202 = getelementptr i64, ptr addrspace(3) %11, i64 %201, !dbg !66
  store i64 %184, ptr addrspace(3) %202, align 4, !dbg !66
  br label %.critedge27, !dbg !66

.critedge27:                                      ; preds = %._crit_edge, %.critedge
  tail call spir_func void @_Z7barrierj(i32 1) #6, !dbg !66
  %203 = icmp eq i32 %18, 0, !dbg !66
  %204 = and i64 %16, 255, !dbg !66
  %205 = getelementptr i64, ptr addrspace(3) %11, i64 %204, !dbg !66
  br i1 %203, label %206, label %208, !dbg !66

206:                                              ; preds = %.critedge27
  %207 = load i64, ptr addrspace(3) %205, align 4, !dbg !66
  br label %208, !dbg !66

208:                                              ; preds = %206, %.critedge27
  %209 = phi i64 [ %207, %206 ], [ undef, %.critedge27 ], !dbg !69
  %210 = tail call spir_func i64 @_Z27__spirv_GroupNonUniformIAddiimj(i32 3, i32 3, i64 %209, i32 2) #6, !dbg !66
  %211 = and i32 %17, 225, !dbg !66
  %212 = icmp eq i32 %211, 0, !dbg !66
  br i1 %212, label %213, label %214, !dbg !66

213:                                              ; preds = %208
  store i64 %210, ptr addrspace(3) %205, align 4, !dbg !66
  br label %214, !dbg !66

214:                                              ; preds = %213, %208
  tail call spir_func void @_Z7barrierj(i32 1) #6, !dbg !66
  %215 = shl nuw nsw i32 %22, 1, !dbg !66
  %216 = zext nneg i32 %215 to i64, !dbg !66
  %217 = getelementptr i64, ptr addrspace(3) %11, i64 %216, !dbg !66
  %218 = load i64, ptr addrspace(3) %217, align 4, !dbg !66
  %219 = shl nuw nsw i32 %23, 1, !dbg !66
  %220 = zext nneg i32 %219 to i64, !dbg !66
  %221 = getelementptr i64, ptr addrspace(3) %11, i64 %220, !dbg !66
  %222 = load i64, ptr addrspace(3) %221, align 4, !dbg !66
  %223 = shl nuw nsw i32 %24, 1, !dbg !66
  %224 = zext nneg i32 %223 to i64, !dbg !66
  %225 = getelementptr i64, ptr addrspace(3) %11, i64 %224, !dbg !66
  %226 = load i64, ptr addrspace(3) %225, align 4, !dbg !66
  %227 = shl nuw nsw i32 %25, 1, !dbg !66
  %228 = zext nneg i32 %227 to i64, !dbg !66
  %229 = getelementptr i64, ptr addrspace(3) %11, i64 %228, !dbg !66
  %230 = load i64, ptr addrspace(3) %229, align 4, !dbg !66
  %231 = icmp sgt i64 %218, 0, !dbg !70
  %232 = icmp sgt i64 %222, 0, !dbg !70
  %233 = icmp sgt i64 %226, 0, !dbg !70
  %234 = icmp sgt i64 %230, 0, !dbg !70
  %235 = mul i64 %4, %4, !dbg !71
  %236 = icmp slt i64 %218, %235, !dbg !72
  %237 = icmp slt i64 %222, %235, !dbg !72
  %238 = icmp slt i64 %226, %235, !dbg !72
  %239 = icmp slt i64 %230, %235, !dbg !72
  %240 = and i1 %231, %236, !dbg !73
  %241 = and i1 %232, %237, !dbg !73
  %242 = and i1 %233, %238, !dbg !73
  %243 = and i1 %234, %239, !dbg !73
  tail call spir_func void @_Z7barrierj(i32 1) #6, !dbg !74
  %244 = zext i1 %240 to i8, !dbg !74
  %245 = zext i1 %241 to i8, !dbg !74
  %246 = zext i1 %242 to i8, !dbg !74
  %247 = zext i1 %243 to i8, !dbg !74
  %248 = getelementptr inbounds nuw i8, ptr addrspace(3) %11, i64 %216, !dbg !74
  %249 = insertelement <1 x i8> poison, i8 %244, i64 0, !dbg !74
  store <1 x i8> %249, ptr addrspace(3) %248, align 1, !dbg !74
  %250 = getelementptr inbounds nuw i8, ptr addrspace(3) %11, i64 %220, !dbg !74
  %251 = insertelement <1 x i8> poison, i8 %245, i64 0, !dbg !74
  store <1 x i8> %251, ptr addrspace(3) %250, align 1, !dbg !74
  %252 = getelementptr inbounds nuw i8, ptr addrspace(3) %11, i64 %224, !dbg !74
  %253 = insertelement <1 x i8> poison, i8 %246, i64 0, !dbg !74
  store <1 x i8> %253, ptr addrspace(3) %252, align 1, !dbg !74
  %254 = getelementptr inbounds nuw i8, ptr addrspace(3) %11, i64 %228, !dbg !74
  %255 = insertelement <1 x i8> poison, i8 %247, i64 0, !dbg !74
  store <1 x i8> %255, ptr addrspace(3) %254, align 1, !dbg !74
  tail call spir_func void @_Z7barrierj(i32 1) #6, !dbg !74
  %256 = shl i64 %16, 1, !dbg !74
  %257 = and i64 %256, 30, !dbg !74
  %258 = getelementptr inbounds nuw i8, ptr addrspace(3) %11, i64 %257, !dbg !74
  %259 = load <1 x i8>, ptr addrspace(3) %258, align 1, !dbg !74
  %260 = icmp eq i64 %218, %235, !dbg !75
  %261 = icmp eq i64 %222, %235, !dbg !75
  %262 = icmp eq i64 %226, %235, !dbg !75
  %263 = icmp eq i64 %230, %235, !dbg !75
  tail call spir_func void @_Z7barrierj(i32 1) #6, !dbg !74
  %264 = zext i1 %260 to i8, !dbg !74
  %265 = zext i1 %261 to i8, !dbg !74
  %266 = zext i1 %262 to i8, !dbg !74
  %267 = zext i1 %263 to i8, !dbg !74
  %268 = insertelement <1 x i8> poison, i8 %264, i64 0, !dbg !74
  store <1 x i8> %268, ptr addrspace(3) %248, align 1, !dbg !74
  %269 = insertelement <1 x i8> poison, i8 %265, i64 0, !dbg !74
  store <1 x i8> %269, ptr addrspace(3) %250, align 1, !dbg !74
  %270 = insertelement <1 x i8> poison, i8 %266, i64 0, !dbg !74
  store <1 x i8> %270, ptr addrspace(3) %252, align 1, !dbg !74
  %271 = insertelement <1 x i8> poison, i8 %267, i64 0, !dbg !74
  store <1 x i8> %271, ptr addrspace(3) %254, align 1, !dbg !74
  tail call spir_func void @_Z7barrierj(i32 1) #6, !dbg !74
  %272 = and i32 %17, 240, !dbg !76
  %273 = icmp eq i32 %272, 0, !dbg !76
  %274 = and i1 %273, %36, !dbg !76
  br i1 %274, label %275, label %.critedge29, !dbg !76

275:                                              ; preds = %214
  %276 = load i8, ptr addrspace(3) %258, align 1, !dbg !74
  %277 = icmp ne i8 %276, 0, !dbg !74
  %278 = zext i1 %277 to i32, !dbg !74
  %279 = extractelement <1 x i8> %259, i64 0, !dbg !74
  %280 = icmp ne i8 %279, 0, !dbg !74
  %281 = zext i1 %280 to i32, !dbg !74
  %282 = insertelement <1 x i32> poison, i32 %281, i64 0, !dbg !76
  %283 = sext i32 %31 to i64, !dbg !77
  %284 = getelementptr i32, ptr addrspace(1) %2, i64 %283, !dbg !77
  store <1 x i32> %282, ptr addrspace(1) %284, align 4, !dbg !76
  %285 = insertelement <1 x i32> poison, i32 %278, i64 0, !dbg !78
  %286 = getelementptr i32, ptr addrspace(1) %3, i64 %283, !dbg !79
  store <1 x i32> %285, ptr addrspace(1) %286, align 4, !dbg !78
  br label %.critedge29, !dbg !78

.critedge29:                                      ; preds = %214, %275
  ret void, !dbg !80
}

; Function Attrs: convergent mustprogress norecurse nounwind
declare extern_weak dso_local spir_func void @__devicelib_assert_fail(ptr addrspace(4) noundef, ptr addrspace(4) noundef, i32 noundef, ptr addrspace(4) noundef, i64 noundef, i64 noundef, i64 noundef, i64 noundef, i64 noundef, i64 noundef) local_unnamed_addr #3

attributes #0 = { convergent mustprogress nounwind willreturn }
attributes #1 = { mustprogress nofree nosync nounwind willreturn memory(none) }
attributes #2 = { nounwind }
attributes #3 = { convergent mustprogress norecurse nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "sycl-module-id"="/netbatch/donb74095_00/dir/workspace/NIT/xmain-rel/LX/xmainefi2linux_release/ws/icsws/llvm/libdevice/fallback-cassert.cpp" "sycl-optlevel"="2" }
attributes #4 = { nounwind willreturn memory(none) }
attributes #5 = { convergent nounwind }
attributes #6 = { convergent nounwind willreturn }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3, !4, !5}
!opencl.spir.version = !{!6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6}
!spirv.Source = !{!7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7}
!llvm.ident = !{!8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "cpk2toaxz3pzfr2q5uvath7ycepcg53tsnitssscybbuczzaxdft.py", directory: "/tmp/torchinductor_jovyan/pk")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 1, !"wchar_size", i32 4}
!4 = !{i32 1, !"sycl-device", i32 1}
!5 = !{i32 7, !"frame-pointer", i32 2}
!6 = !{i32 1, i32 2}
!7 = !{i32 3, i32 100000}
!8 = !{!"Intel(R) oneAPI DPC++/C++ Compiler 2025.0.0 (2025.0.0.20241008)"}
!9 = !DISubprogram(name: "_Z27__spirv_GroupNonUniformIAddiimj", linkageName: "_Z27__spirv_GroupNonUniformIAddiimj", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagOptimized)
!10 = !DISubroutineType(cc: DW_CC_normal, types: !11)
!11 = !{}
!12 = !DISubprogram(name: "_Z27__spirv_GroupNonUniformIAddiim", linkageName: "_Z27__spirv_GroupNonUniformIAddiim", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagOptimized)
!13 = !DISubprogram(name: "_Z7barrierj", linkageName: "_Z7barrierj", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagOptimized)
!14 = !DISubprogram(name: "_Z12get_local_idj", linkageName: "_Z12get_local_idj", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagOptimized)
!15 = !DISubprogram(name: "_Z12get_group_idj", linkageName: "_Z12get_group_idj", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagOptimized)
!16 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_arange_bitwise_and_constant_pad_nd_eq_gt_index_le_lt_permute_sum_view_0", linkageName: "triton_red_fused__to_copy_add_arange_bitwise_and_constant_pad_nd_eq_gt_index_le_lt_permute_sum_view_0", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!17 = !{i32 32}
!18 = !{i64 256, i64 1, i64 1}
!19 = !DILocation(line: 21, column: 28, scope: !16)
!20 = !DILocation(line: 21, column: 33, scope: !16)
!21 = !DILocation(line: 22, column: 44, scope: !16)
!22 = !DILocation(line: 22, column: 23, scope: !16)
!23 = !DILocation(line: 23, column: 21, scope: !16)
!24 = !DILocation(line: 24, column: 37, scope: !16)
!25 = !DILocation(line: 76, column: 36, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !16, file: !27, discriminator: 0)
!27 = !DIFile(filename: "triton_helpers.py", directory: "/home/jovyan/envs/miniforge3/envs/triton/lib/python3.10/site-packages/torch/_inductor/runtime")
!28 = !DILocation(line: 33, column: 59, scope: !16)
!29 = !DILocation(line: 38, column: 26, scope: !16)
!30 = !DILocation(line: 51, column: 72, scope: !16)
!31 = !DILocation(line: 28, column: 40, scope: !16)
!32 = !DILocation(line: 29, column: 31, scope: !16)
!33 = !DILocation(line: 30, column: 29, scope: !16)
!34 = !DILocation(line: 73, column: 16, scope: !26, inlinedAt: !28)
!35 = !DILocation(line: 74, column: 20, scope: !26, inlinedAt: !28)
!36 = !DILocation(line: 75, column: 34, scope: !26, inlinedAt: !28)
!37 = !DILocation(line: 76, column: 25, scope: !26, inlinedAt: !28)
!38 = !DILocation(line: 76, column: 32, scope: !26, inlinedAt: !28)
!39 = !DILocation(line: 76, column: 47, scope: !26, inlinedAt: !28)
!40 = !DILocation(line: 37, column: 22, scope: !16)
!41 = !DILocation(line: 38, column: 22, scope: !16)
!42 = !DILocation(line: 40, column: 22, scope: !16)
!43 = !DILocation(line: 41, column: 22, scope: !16)
!44 = !DILocation(line: 42, column: 23, scope: !16)
!45 = !DILocation(line: 44, column: 36, scope: !16)
!46 = !DILocation(line: 47, column: 22, scope: !16)
!47 = !DILocation(line: 47, column: 29, scope: !16)
!48 = !DILocation(line: 48, column: 25, scope: !16)
!49 = !DILocation(line: 51, column: 63, scope: !16)
!50 = !DILocation(line: 51, column: 78, scope: !16)
!51 = !DILocation(line: 51, column: 85, scope: !16)
!52 = !DILocation(line: 51, column: 93, scope: !16)
!53 = !DILocation(line: 51, column: 32, scope: !16)
!54 = !DILocation(line: 51, column: 202, scope: !16)
!55 = !DILocation(line: 51, column: 118, scope: !16)
!56 = !DILocation(line: 51, column: 222, scope: !16)
!57 = !DILocation(line: 51, column: 229, scope: !16)
!58 = !DILocation(line: 51, column: 210, scope: !16)
!59 = !DILocation(line: 51, column: 237, scope: !16)
!60 = !DILocation(line: 52, column: 35, scope: !16)
!61 = !DILocation(line: 52, column: 119, scope: !16)
!62 = !DILocation(line: 53, column: 24, scope: !16)
!63 = !DILocation(line: 59, column: 36, scope: !16)
!64 = !DILocation(line: 59, column: 50, scope: !16)
!65 = !DILocation(line: 27, column: 44, scope: !16)
!66 = !DILocation(line: 290, column: 36, scope: !67, inlinedAt: !69)
!67 = distinct !DILexicalBlockFile(scope: !16, file: !68, discriminator: 0)
!68 = !DIFile(filename: "standard.py", directory: "/home/jovyan/intel-xpu-backend-for-triton/python/triton/language")
!69 = !DILocation(line: 60, column: 27, scope: !16)
!70 = !DILocation(line: 62, column: 20, scope: !16)
!71 = !DILocation(line: 63, column: 16, scope: !16)
!72 = !DILocation(line: 64, column: 20, scope: !16)
!73 = !DILocation(line: 65, column: 20, scope: !16)
!74 = !DILocation(line: 0, scope: !16)
!75 = !DILocation(line: 68, column: 21, scope: !16)
!76 = !DILocation(line: 71, column: 37, scope: !16)
!77 = !DILocation(line: 71, column: 25, scope: !16)
!78 = !DILocation(line: 72, column: 37, scope: !16)
!79 = !DILocation(line: 72, column: 25, scope: !16)
!80 = !DILocation(line: 72, column: 4, scope: !16)
