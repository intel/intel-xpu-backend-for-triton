; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-n8:16:32:64"
target triple = "spir64-unknown-unknown"

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(none)
declare !dbg !9 spir_func i16 @_Z27__spirv_ConvertFToBF16INTELf(float) local_unnamed_addr #0

; Function Attrs: convergent mustprogress nounwind willreturn
declare !dbg !12 spir_func float @_Z27__spirv_GroupNonUniformFAddiifj(i32, i32, float, i32) local_unnamed_addr #1

; Function Attrs: convergent mustprogress nounwind willreturn
declare !dbg !13 spir_func void @_Z7barrierj(i32) local_unnamed_addr #1

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(none)
declare !dbg !14 spir_func i64 @_Z12get_local_idj(i32) local_unnamed_addr #0

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(none)
declare !dbg !15 spir_func i64 @_Z12get_group_idj(i32) local_unnamed_addr #0

; Function Attrs: mustprogress nounwind willreturn
define spir_kernel void @triton_per_fused__to_copy_add_cat_cos_mul_neg_sin_unsqueeze_7(ptr addrspace(1) readonly captures(none) %0, ptr addrspace(1) readonly captures(none) %1, ptr addrspace(1) readonly captures(none) %2, ptr addrspace(1) readonly captures(none) %3, ptr addrspace(1) writeonly captures(none) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7, ptr addrspace(3) captures(none) %8) local_unnamed_addr #2 !dbg !16 !intel_reqd_sub_group_size !17 !max_work_group_size !18 {
  %10 = tail call spir_func i64 @_Z12get_group_idj(i32 0) #5, !dbg !19
  %11 = trunc i64 %10 to i32, !dbg !19
  %12 = shl i32 %11, 3, !dbg !20
  %13 = tail call spir_func i64 @_Z12get_local_idj(i32 0) #5, !dbg !21
  %14 = trunc i64 %13 to i32, !dbg !21
  %15 = and i32 %14, 7, !dbg !21
  %16 = lshr i32 %14, 4, !dbg !21
  %17 = and i32 %16, 3, !dbg !21
  %18 = or disjoint i32 %15, %12, !dbg !22
  %19 = or disjoint i32 %17, %12, !dbg !22
  %20 = or disjoint i32 %19, 4, !dbg !22
  %21 = lshr i32 %14, 2, !dbg !23
  %22 = and i32 %21, 15, !dbg !23
  %23 = and i32 %14, 15, !dbg !23
  %24 = icmp samesign ult i32 %22, 14, !dbg !24
  %25 = icmp samesign ult i32 %23, 14, !dbg !24
  %26 = sdiv i32 %18, 128, !dbg !25
  %27 = sdiv i32 %19, 128, !dbg !25
  %28 = sdiv i32 %20, 128, !dbg !25
  %29 = shl i32 %14, 1, !dbg !26
  br i1 %24, label %30, label %._crit_edge, !dbg !27

30:                                               ; preds = %9
  %31 = and i32 %29, 6, !dbg !21
  %32 = or disjoint i32 %31, %12, !dbg !22
  %33 = shl nuw nsw i32 %22, 12, !dbg !28
  %34 = add i32 %32, %33, !dbg !29
  %35 = sext i32 %34 to i64, !dbg !30
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !30
  %37 = load <2 x float>, ptr addrspace(1) %36, align 8, !dbg !27
  br label %._crit_edge, !dbg !27

._crit_edge:                                      ; preds = %9, %30
  %bc1 = phi <2 x float> [ %37, %30 ], [ zeroinitializer, %9 ], !dbg !27
  %38 = and i32 %29, 126, !dbg !27
  %39 = shl i32 %14, 3, !dbg !27
  %40 = and i32 %39, 120, !dbg !27
  %41 = or disjoint i32 %40, %17, !dbg !27
  %42 = lshr i32 %38, 3, !dbg !27
  %43 = add nuw nsw i32 %42, %38, !dbg !27
  %44 = zext nneg i32 %43 to i64, !dbg !27
  %45 = getelementptr inbounds nuw float, ptr addrspace(3) %8, i64 %44, !dbg !27
  %46 = shufflevector <2 x float> %bc1, <2 x float> poison, <1 x i32> zeroinitializer, !dbg !27
  store <1 x float> %46, ptr addrspace(3) %45, align 4, !dbg !27
  %47 = or disjoint i32 %38, 1, !dbg !27
  %48 = add nuw nsw i32 %47, %42, !dbg !27
  %49 = zext nneg i32 %48 to i64, !dbg !27
  %50 = getelementptr inbounds nuw float, ptr addrspace(3) %8, i64 %49, !dbg !27
  %51 = shufflevector <2 x float> %bc1, <2 x float> poison, <1 x i32> <i32 1>, !dbg !27
  store <1 x float> %51, ptr addrspace(3) %50, align 4, !dbg !27
  tail call spir_func void @_Z7barrierj(i32 1) #6, !dbg !27
  %52 = lshr exact i32 %40, 3, !dbg !27
  %53 = add nuw nsw i32 %52, %41, !dbg !27
  %54 = zext nneg i32 %53 to i64, !dbg !27
  %55 = getelementptr inbounds nuw float, ptr addrspace(3) %8, i64 %54, !dbg !27
  %56 = load float, ptr addrspace(3) %55, align 4, !dbg !27
  %57 = or disjoint i32 %41, 4, !dbg !27
  %58 = add nuw nsw i32 %57, %52, !dbg !27
  %59 = zext nneg i32 %58 to i64, !dbg !27
  %60 = getelementptr inbounds nuw float, ptr addrspace(3) %8, i64 %59, !dbg !27
  %61 = load float, ptr addrspace(3) %60, align 4, !dbg !27
  %62 = sext i32 %26 to i64, !dbg !31
  %63 = getelementptr float, ptr addrspace(1) %1, i64 %62, !dbg !31
  %64 = sext i32 %27 to i64, !dbg !31
  %65 = getelementptr float, ptr addrspace(1) %1, i64 %64, !dbg !31
  %66 = sext i32 %28 to i64, !dbg !31
  %67 = getelementptr float, ptr addrspace(1) %1, i64 %66, !dbg !31
  %68 = load float, ptr addrspace(1) %63, align 4, !dbg !32
  %69 = load float, ptr addrspace(1) %65, align 4, !dbg !32
  %70 = load float, ptr addrspace(1) %67, align 4, !dbg !32
  br i1 %25, label %71, label %81, !dbg !33

71:                                               ; preds = %._crit_edge
  %72 = shl nuw nsw i32 %23, 5, !dbg !34
  %73 = add nsw i32 %28, %72, !dbg !35
  %74 = sext i32 %73 to i64, !dbg !36
  %75 = getelementptr float, ptr addrspace(1) %2, i64 %74, !dbg !36
  %76 = add nsw i32 %27, %72, !dbg !35
  %77 = sext i32 %76 to i64, !dbg !36
  %78 = getelementptr float, ptr addrspace(1) %2, i64 %77, !dbg !36
  %79 = load float, ptr addrspace(1) %78, align 4, !dbg !33
  %80 = load <1 x float>, ptr addrspace(1) %75, align 4, !dbg !33
  br label %81, !dbg !33

81:                                               ; preds = %._crit_edge, %71
  %82 = phi float [ %79, %71 ], [ 0.000000e+00, %._crit_edge ]
  %83 = phi <1 x float> [ %80, %71 ], [ zeroinitializer, %._crit_edge ], !dbg !33
  %84 = extractelement <1 x float> %83, i64 0, !dbg !33
  %85 = getelementptr float, ptr addrspace(1) %3, i64 %62, !dbg !37
  %86 = load <1 x float>, ptr addrspace(1) %85, align 4, !dbg !38
  %87 = fcmp oeq float %69, 0xFFF0000000000000, !dbg !39
  %88 = fcmp oeq float %70, 0xFFF0000000000000, !dbg !39
  %89 = fsub float %82, %69, !dbg !40
  %90 = fsub float %84, %70, !dbg !40
  %91 = select i1 %87, float 0.000000e+00, float %89, !dbg !41
  %92 = select i1 %88, float 0.000000e+00, float %90, !dbg !41
  %93 = tail call spir_func noundef float @_Z16__spirv_ocl_rintf(float noundef %91) #7, !dbg !42
  %94 = fsub float %91, %93, !dbg !42
  %95 = fptosi float %93 to i32, !dbg !42
  %96 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef 0x3F24499000000000, float noundef %94, float noundef 0x3F55F48C60000000) #7, !dbg !42
  %97 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %94, float noundef 5.000000e-01, float noundef 1.000000e+00) #7, !dbg !42
  %98 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %96, float noundef %94, float noundef 0x3F83B29960000000) #7, !dbg !42
  %99 = fadd float %97, -1.000000e+00, !dbg !42
  %100 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %98, float noundef %94, float noundef 0x3FAC6AECC0000000) #7, !dbg !42
  %101 = fneg float %99, !dbg !42
  %102 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %94, float noundef 5.000000e-01, float noundef %101) #7, !dbg !42
  %103 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %100, float noundef %94, float noundef 0x3FCEBFBE20000000) #7, !dbg !42
  %104 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %103, float noundef %94, float noundef 0x3FC8B90C40000000) #7, !dbg !42
  %105 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %104, float noundef %94, float noundef %102) #7, !dbg !42
  %106 = fadd float %97, %105, !dbg !42
  %107 = add i32 %95, -127, !dbg !42
  %108 = icmp ult i32 %107, -252, !dbg !42
  br i1 %108, label %114, label %109, !dbg !42

109:                                              ; preds = %81
  %110 = bitcast float %106 to i32, !dbg !42
  %111 = shl nsw i32 %95, 23, !dbg !42
  %112 = add i32 %111, %110, !dbg !42
  %113 = bitcast i32 %112 to float, !dbg !42
  br label %__devicelib_imf_exp2f.exit2, !dbg !42

114:                                              ; preds = %81
  %115 = tail call float @llvm.fabs.f32(float %91), !dbg !42
  %116 = bitcast float %115 to i32, !dbg !42
  %117 = icmp samesign ugt i32 %116, 2139095039, !dbg !42
  br i1 %117, label %118, label %122, !dbg !42

118:                                              ; preds = %114
  %119 = fcmp oeq float %91, 0xFFF0000000000000, !dbg !42
  %120 = fadd float %91, %91, !dbg !42
  %121 = select i1 %119, float 0.000000e+00, float %120, !dbg !42
  br label %__devicelib_imf_exp2f.exit2, !dbg !42

122:                                              ; preds = %114
  %123 = tail call spir_func noundef float @_Z16__spirv_ocl_fminff(float noundef %91, float noundef 1.920000e+02) #7, !dbg !42
  %124 = tail call spir_func noundef float @_Z16__spirv_ocl_fmaxff(float noundef %123, float noundef -1.920000e+02) #7, !dbg !42
  %125 = tail call spir_func noundef float @_Z16__spirv_ocl_rintf(float noundef %124) #7, !dbg !42
  %126 = fptosi float %125 to i32, !dbg !42
  %127 = ashr i32 %126, 1, !dbg !42
  %128 = sub nsw i32 %126, %127, !dbg !42
  %129 = shl i32 %128, 23, !dbg !42
  %130 = add i32 %129, 1065353216, !dbg !42
  %131 = shl i32 %127, 23, !dbg !42
  %132 = add i32 %131, 1065353216, !dbg !42
  %133 = bitcast i32 %130 to float, !dbg !42
  %134 = fmul float %106, %133, !dbg !42
  %135 = bitcast i32 %132 to float, !dbg !42
  %136 = fmul float %134, %135, !dbg !42
  br label %__devicelib_imf_exp2f.exit2, !dbg !42

__devicelib_imf_exp2f.exit2:                      ; preds = %109, %118, %122
  %137 = phi float [ %136, %122 ], [ %113, %109 ], [ %121, %118 ], !dbg !42
  %138 = tail call spir_func noundef float @_Z16__spirv_ocl_rintf(float noundef %92) #7, !dbg !42
  %139 = fsub float %92, %138, !dbg !42
  %140 = fptosi float %138 to i32, !dbg !42
  %141 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef 0x3F24499000000000, float noundef %139, float noundef 0x3F55F48C60000000) #7, !dbg !42
  %142 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %139, float noundef 5.000000e-01, float noundef 1.000000e+00) #7, !dbg !42
  %143 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %141, float noundef %139, float noundef 0x3F83B29960000000) #7, !dbg !42
  %144 = fadd float %142, -1.000000e+00, !dbg !42
  %145 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %143, float noundef %139, float noundef 0x3FAC6AECC0000000) #7, !dbg !42
  %146 = fneg float %144, !dbg !42
  %147 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %139, float noundef 5.000000e-01, float noundef %146) #7, !dbg !42
  %148 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %145, float noundef %139, float noundef 0x3FCEBFBE20000000) #7, !dbg !42
  %149 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %148, float noundef %139, float noundef 0x3FC8B90C40000000) #7, !dbg !42
  %150 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %149, float noundef %139, float noundef %147) #7, !dbg !42
  %151 = fadd float %142, %150, !dbg !42
  %152 = add i32 %140, -127, !dbg !42
  %153 = icmp ult i32 %152, -252, !dbg !42
  br i1 %153, label %159, label %154, !dbg !42

154:                                              ; preds = %__devicelib_imf_exp2f.exit2
  %155 = bitcast float %151 to i32, !dbg !42
  %156 = shl nsw i32 %140, 23, !dbg !42
  %157 = add i32 %156, %155, !dbg !42
  %158 = bitcast i32 %157 to float, !dbg !42
  br label %__devicelib_imf_exp2f.exit, !dbg !42

159:                                              ; preds = %__devicelib_imf_exp2f.exit2
  %160 = tail call float @llvm.fabs.f32(float %92), !dbg !42
  %161 = bitcast float %160 to i32, !dbg !42
  %162 = icmp samesign ugt i32 %161, 2139095039, !dbg !42
  br i1 %162, label %163, label %167, !dbg !42

163:                                              ; preds = %159
  %164 = fcmp oeq float %92, 0xFFF0000000000000, !dbg !42
  %165 = fadd float %92, %92, !dbg !42
  %166 = select i1 %164, float 0.000000e+00, float %165, !dbg !42
  br label %__devicelib_imf_exp2f.exit, !dbg !42

167:                                              ; preds = %159
  %168 = tail call spir_func noundef float @_Z16__spirv_ocl_fminff(float noundef %92, float noundef 1.920000e+02) #7, !dbg !42
  %169 = tail call spir_func noundef float @_Z16__spirv_ocl_fmaxff(float noundef %168, float noundef -1.920000e+02) #7, !dbg !42
  %170 = tail call spir_func noundef float @_Z16__spirv_ocl_rintf(float noundef %169) #7, !dbg !42
  %171 = fptosi float %170 to i32, !dbg !42
  %172 = ashr i32 %171, 1, !dbg !42
  %173 = sub nsw i32 %171, %172, !dbg !42
  %174 = shl i32 %173, 23, !dbg !42
  %175 = add i32 %174, 1065353216, !dbg !42
  %176 = shl i32 %172, 23, !dbg !42
  %177 = add i32 %176, 1065353216, !dbg !42
  %178 = bitcast i32 %175 to float, !dbg !42
  %179 = fmul float %151, %178, !dbg !42
  %180 = bitcast i32 %177 to float, !dbg !42
  %181 = fmul float %179, %180, !dbg !42
  br label %__devicelib_imf_exp2f.exit, !dbg !42

__devicelib_imf_exp2f.exit:                       ; preds = %154, %163, %167
  %182 = phi float [ %181, %167 ], [ %158, %154 ], [ %166, %163 ], !dbg !42
  %183 = fmul float %56, %137, !dbg !43
  %184 = fmul float %61, %182, !dbg !43
  %185 = select i1 %25, float %183, float 0.000000e+00, !dbg !44
  %186 = select i1 %25, float %184, float 0.000000e+00, !dbg !44
  %187 = tail call spir_func float @_Z27__spirv_GroupNonUniformFAddiifj(i32 3, i32 3, float %185, i32 16) #6, !dbg !45
  %188 = tail call spir_func float @_Z27__spirv_GroupNonUniformFAddiifj(i32 3, i32 3, float %186, i32 16) #6, !dbg !45
  tail call spir_func void @_Z7barrierj(i32 1) #6, !dbg !49
  %189 = zext nneg i32 %17 to i64, !dbg !49
  %190 = getelementptr inbounds nuw float, ptr addrspace(3) %8, i64 %189, !dbg !49
  %191 = insertelement <1 x float> poison, float %187, i64 0, !dbg !49
  store <1 x float> %191, ptr addrspace(3) %190, align 4, !dbg !49
  %192 = getelementptr inbounds nuw i8, ptr addrspace(3) %190, i64 16, !dbg !49
  %193 = insertelement <1 x float> poison, float %188, i64 0, !dbg !49
  store <1 x float> %193, ptr addrspace(3) %192, align 4, !dbg !49
  tail call spir_func void @_Z7barrierj(i32 1) #6, !dbg !49
  %194 = and i32 %14, 56, !dbg !49
  %195 = icmp eq i32 %194, 0, !dbg !49
  br i1 %195, label %196, label %208, !dbg !49

196:                                              ; preds = %__devicelib_imf_exp2f.exit
  %197 = and i64 %13, 7, !dbg !49
  %198 = getelementptr inbounds nuw float, ptr addrspace(3) %8, i64 %197, !dbg !49
  %199 = load float, ptr addrspace(3) %198, align 4, !dbg !49
  %200 = fcmp oeq float %68, 0xFFF0000000000000, !dbg !39
  %201 = extractelement <1 x float> %86, i64 0, !dbg !38
  %202 = select i1 %200, float 1.000000e+00, float %201, !dbg !50
  %203 = fdiv float %199, %202, !dbg !51
  %204 = tail call spir_func i16 @_Z27__spirv_ConvertFToBF16INTELf(float %203) #5
  %205 = insertelement <1 x i16> poison, i16 %204, i64 0, !dbg !49
  %206 = sext i32 %18 to i64, !dbg !52
  %207 = getelementptr bfloat, ptr addrspace(1) %4, i64 %206, !dbg !52
  store <1 x i16> %205, ptr addrspace(1) %207, align 2, !dbg !49
  br label %208, !dbg !49

208:                                              ; preds = %196, %__devicelib_imf_exp2f.exit
  ret void, !dbg !53
}

; Function Attrs: convergent mustprogress nofree nounwind willreturn memory(none)
declare dso_local spir_func noundef float @_Z16__spirv_ocl_rintf(float noundef) local_unnamed_addr #3

; Function Attrs: convergent mustprogress nofree nounwind willreturn memory(none)
declare dso_local spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef, float noundef, float noundef) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #4

; Function Attrs: convergent mustprogress nofree nounwind willreturn memory(none)
declare dso_local spir_func noundef float @_Z16__spirv_ocl_fminff(float noundef, float noundef) local_unnamed_addr #3

; Function Attrs: convergent mustprogress nofree nounwind willreturn memory(none)
declare dso_local spir_func noundef float @_Z16__spirv_ocl_fmaxff(float noundef, float noundef) local_unnamed_addr #3

attributes #0 = { mustprogress nofree nosync nounwind willreturn memory(none) }
attributes #1 = { convergent mustprogress nounwind willreturn }
attributes #2 = { mustprogress nounwind willreturn }
attributes #3 = { convergent mustprogress nofree nounwind willreturn memory(none) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #5 = { nounwind willreturn memory(none) }
attributes #6 = { convergent nounwind willreturn }
attributes #7 = { convergent nounwind willreturn memory(none) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3, !4, !5}
!opencl.spir.version = !{!6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6}
!spirv.Source = !{!7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7}
!llvm.ident = !{!8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "cjcxabxt5vbzvoukznvtn74s7574miu7aolwxzg2dwdrymcmrbir.py", directory: "/tmp/torchinductor_jovyan/jc")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 1, !"wchar_size", i32 4}
!4 = !{i32 1, !"sycl-device", i32 1}
!5 = !{i32 7, !"frame-pointer", i32 2}
!6 = !{i32 1, i32 2}
!7 = !{i32 3, i32 100000}
!8 = !{!"Intel(R) oneAPI DPC++/C++ Compiler 2025.0.0 (2025.0.0.20241008)"}
!9 = !DISubprogram(name: "_Z27__spirv_ConvertFToBF16INTELf", linkageName: "_Z27__spirv_ConvertFToBF16INTELf", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagOptimized)
!10 = !DISubroutineType(cc: DW_CC_normal, types: !11)
!11 = !{}
!12 = !DISubprogram(name: "_Z27__spirv_GroupNonUniformFAddiifj", linkageName: "_Z27__spirv_GroupNonUniformFAddiifj", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagOptimized)
!13 = !DISubprogram(name: "_Z7barrierj", linkageName: "_Z7barrierj", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagOptimized)
!14 = !DISubprogram(name: "_Z12get_local_idj", linkageName: "_Z12get_local_idj", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagOptimized)
!15 = !DISubprogram(name: "_Z12get_group_idj", linkageName: "_Z12get_group_idj", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagOptimized)
!16 = distinct !DISubprogram(name: "triton_per_fused__to_copy_add_cat_cos_mul_neg_sin_unsqueeze_7", linkageName: "triton_per_fused__to_copy_add_cat_cos_mul_neg_sin_unsqueeze_7", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!17 = !{i32 32}
!18 = !{i64 64, i64 1, i64 1}
!19 = !DILocation(line: 24, column: 28, scope: !16)
!20 = !DILocation(line: 24, column: 33, scope: !16)
!21 = !DILocation(line: 25, column: 44, scope: !16)
!22 = !DILocation(line: 25, column: 23, scope: !16)
!23 = !DILocation(line: 27, column: 38, scope: !16)
!24 = !DILocation(line: 29, column: 25, scope: !16)
!25 = !DILocation(line: 34, column: 19, scope: !16)
!26 = !DILocation(line: 0, scope: !16)
!27 = !DILocation(line: 35, column: 47, scope: !16)
!28 = !DILocation(line: 35, column: 40, scope: !16)
!29 = !DILocation(line: 35, column: 35, scope: !16)
!30 = !DILocation(line: 35, column: 30, scope: !16)
!31 = !DILocation(line: 36, column: 30, scope: !16)
!32 = !DILocation(line: 36, column: 35, scope: !16)
!33 = !DILocation(line: 37, column: 45, scope: !16)
!34 = !DILocation(line: 37, column: 38, scope: !16)
!35 = !DILocation(line: 37, column: 35, scope: !16)
!36 = !DILocation(line: 37, column: 30, scope: !16)
!37 = !DILocation(line: 38, column: 31, scope: !16)
!38 = !DILocation(line: 38, column: 36, scope: !16)
!39 = !DILocation(line: 40, column: 19, scope: !16)
!40 = !DILocation(line: 41, column: 18, scope: !16)
!41 = !DILocation(line: 43, column: 32, scope: !16)
!42 = !DILocation(line: 44, column: 26, scope: !16)
!43 = !DILocation(line: 45, column: 18, scope: !16)
!44 = !DILocation(line: 47, column: 37, scope: !16)
!45 = !DILocation(line: 290, column: 36, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlockFile(scope: !16, file: !47, discriminator: 0)
!47 = !DIFile(filename: "standard.py", directory: "/home/jovyan/intel-xpu-backend-for-triton/python/triton/language")
!48 = !DILocation(line: 48, column: 26, scope: !16)
!49 = !DILocation(line: 53, column: 37, scope: !16)
!50 = !DILocation(line: 50, column: 34, scope: !16)
!51 = !DILocation(line: 51, column: 21, scope: !16)
!52 = !DILocation(line: 53, column: 25, scope: !16)
!53 = !DILocation(line: 53, column: 4, scope: !16)
