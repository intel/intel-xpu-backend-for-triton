; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-n8:16:32:64"
target triple = "spir64-unknown-unknown"

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(none)
declare !dbg !9 spir_func i16 @_Z27__spirv_ConvertFToBF16INTELf(float) local_unnamed_addr #0

; Function Attrs: convergent mustprogress nounwind willreturn
declare !dbg !12 spir_func float @_Z27__spirv_GroupNonUniformFAddiifj(i32, i32, float, i32) local_unnamed_addr #1

; Function Attrs: convergent mustprogress nounwind willreturn
declare !dbg !13 spir_func void @_Z7barrierj(i32) local_unnamed_addr #1

; Function Attrs: convergent mustprogress nounwind willreturn
declare !dbg !14 spir_func float @_Z27__spirv_GroupNonUniformFAddiif(i32, i32, float) local_unnamed_addr #1

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(none)
declare !dbg !15 spir_func float @_Z27__spirv_ConvertBF16ToFINTELs(i16) local_unnamed_addr #0

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(none)
declare !dbg !16 spir_func i64 @_Z12get_local_idj(i32) local_unnamed_addr #0

; Function Attrs: mustprogress nounwind willreturn
define spir_kernel void @triton_red_fused__to_copy_mean_mul_pow_rsqrt_0(ptr addrspace(1) readonly captures(none) %0, ptr addrspace(1) readonly captures(none) %1, double %2, ptr addrspace(1) writeonly captures(none) %3, i32 %4, ptr addrspace(1) readnone captures(none) %5, ptr addrspace(3) captures(none) %6) local_unnamed_addr #2 !dbg !17 !intel_reqd_sub_group_size !18 !max_work_group_size !19 {
  %8 = tail call spir_func i64 @_Z12get_local_idj(i32 0) #4, !dbg !20
  %9 = trunc i64 %8 to i32, !dbg !20
  %10 = shl i64 %8, 2, !dbg !20
  %11 = and i64 %10, 2044, !dbg !20
  %12 = getelementptr bfloat, ptr addrspace(1) %0, i64 %11, !dbg !21
  %13 = load i16, ptr addrspace(1) %12, align 8, !dbg !22
  %14 = tail call spir_func float @_Z27__spirv_ConvertBF16ToFINTELs(i16 %13) #4
  %15 = getelementptr inbounds nuw i8, ptr addrspace(1) %12, i64 2, !dbg !22
  %16 = load i16, ptr addrspace(1) %15, align 2, !dbg !22
  %17 = tail call spir_func float @_Z27__spirv_ConvertBF16ToFINTELs(i16 %16) #4
  %18 = getelementptr inbounds nuw i8, ptr addrspace(1) %12, i64 4, !dbg !22
  %19 = load i16, ptr addrspace(1) %18, align 4, !dbg !22
  %20 = tail call spir_func float @_Z27__spirv_ConvertBF16ToFINTELs(i16 %19) #4
  %21 = getelementptr inbounds nuw i8, ptr addrspace(1) %12, i64 6, !dbg !22
  %22 = load i16, ptr addrspace(1) %21, align 2, !dbg !22
  %23 = tail call spir_func float @_Z27__spirv_ConvertBF16ToFINTELs(i16 %22) #4
  %24 = fmul float %14, %14, !dbg !23
  %25 = fmul float %17, %17, !dbg !23
  %26 = fmul float %20, %20, !dbg !23
  %27 = fmul float %23, %23, !dbg !23
  %28 = or disjoint i64 %11, 2048, !dbg !24
  %29 = getelementptr bfloat, ptr addrspace(1) %0, i64 %28, !dbg !21
  %30 = load i16, ptr addrspace(1) %29, align 8, !dbg !22
  %31 = tail call spir_func float @_Z27__spirv_ConvertBF16ToFINTELs(i16 %30) #4
  %32 = getelementptr inbounds nuw i8, ptr addrspace(1) %29, i64 2, !dbg !22
  %33 = load i16, ptr addrspace(1) %32, align 2, !dbg !22
  %34 = tail call spir_func float @_Z27__spirv_ConvertBF16ToFINTELs(i16 %33) #4
  %35 = getelementptr inbounds nuw i8, ptr addrspace(1) %29, i64 4, !dbg !22
  %36 = load i16, ptr addrspace(1) %35, align 4, !dbg !22
  %37 = tail call spir_func float @_Z27__spirv_ConvertBF16ToFINTELs(i16 %36) #4
  %38 = getelementptr inbounds nuw i8, ptr addrspace(1) %29, i64 6, !dbg !22
  %39 = load i16, ptr addrspace(1) %38, align 2, !dbg !22
  %40 = tail call spir_func float @_Z27__spirv_ConvertBF16ToFINTELs(i16 %39) #4
  %41 = fmul float %31, %31, !dbg !23
  %42 = fmul float %34, %34, !dbg !23
  %43 = fmul float %37, %37, !dbg !23
  %44 = fmul float %40, %40, !dbg !23
  %45 = fadd float %24, %41, !dbg !25
  %46 = fadd float %25, %42, !dbg !25
  %47 = fadd float %26, %43, !dbg !25
  %48 = fadd float %27, %44, !dbg !25
  %49 = and i32 %9, 511, !dbg !20
  %50 = and i32 %9, 31, !dbg !20
  %51 = fadd float %45, %46, !dbg !26
  %52 = fadd float %47, %51, !dbg !26
  %53 = fadd float %48, %52, !dbg !26
  %54 = tail call spir_func float @_Z27__spirv_GroupNonUniformFAddiif(i32 3, i32 0, float %53) #5, !dbg !30
  %55 = icmp eq i32 %50, 0, !dbg !30
  br i1 %55, label %56, label %60, !dbg !30

56:                                               ; preds = %7
  %57 = lshr exact i32 %49, 5, !dbg !20
  %58 = zext nneg i32 %57 to i64, !dbg !30
  %59 = getelementptr float, ptr addrspace(3) %6, i64 %58, !dbg !30
  store float %54, ptr addrspace(3) %59, align 4, !dbg !30
  br label %60, !dbg !30

60:                                               ; preds = %56, %7
  tail call spir_func void @_Z7barrierj(i32 1) #5, !dbg !30
  %61 = icmp samesign ult i32 %49, 16, !dbg !30
  %62 = and i64 %8, 511, !dbg !30
  %63 = getelementptr float, ptr addrspace(3) %6, i64 %62, !dbg !30
  br i1 %61, label %64, label %66, !dbg !30

64:                                               ; preds = %60
  %65 = load float, ptr addrspace(3) %63, align 4, !dbg !30
  br label %66, !dbg !30

66:                                               ; preds = %64, %60
  %67 = phi float [ %65, %64 ], [ undef, %60 ], !dbg !29
  %68 = tail call spir_func float @_Z27__spirv_GroupNonUniformFAddiifj(i32 3, i32 3, float %67, i32 16) #5, !dbg !30
  %69 = and i32 %9, 15, !dbg !30
  %70 = icmp eq i32 %69, 0, !dbg !30
  %71 = and i1 %61, %70, !dbg !30
  br i1 %71, label %72, label %73, !dbg !30

72:                                               ; preds = %66
  store float %68, ptr addrspace(3) %63, align 4, !dbg !30
  br label %73, !dbg !30

73:                                               ; preds = %72, %66
  tail call spir_func void @_Z7barrierj(i32 1) #5, !dbg !30
  %74 = load float, ptr addrspace(3) %6, align 4, !dbg !30
  %75 = fmul float %74, 0x3F30000000000000, !dbg !31
  %76 = fptrunc double %2 to float, !dbg !32
  %77 = fadd float %75, %76, !dbg !33
  %78 = tail call spir_func noundef float @_Z17__spirv_ocl_rsqrtf(float noundef %77) #6, !dbg !34
  %79 = getelementptr bfloat, ptr addrspace(1) %1, i64 %11, !dbg !35
  %80 = load i16, ptr addrspace(1) %79, align 8, !dbg !36
  %81 = tail call spir_func float @_Z27__spirv_ConvertBF16ToFINTELs(i16 %80) #4
  %82 = getelementptr inbounds nuw i8, ptr addrspace(1) %79, i64 2, !dbg !36
  %83 = load i16, ptr addrspace(1) %82, align 2, !dbg !36
  %84 = tail call spir_func float @_Z27__spirv_ConvertBF16ToFINTELs(i16 %83) #4
  %85 = getelementptr inbounds nuw i8, ptr addrspace(1) %79, i64 4, !dbg !36
  %86 = load i16, ptr addrspace(1) %85, align 4, !dbg !36
  %87 = tail call spir_func float @_Z27__spirv_ConvertBF16ToFINTELs(i16 %86) #4
  %88 = getelementptr inbounds nuw i8, ptr addrspace(1) %79, i64 6, !dbg !36
  %89 = load i16, ptr addrspace(1) %88, align 2, !dbg !36
  %90 = tail call spir_func float @_Z27__spirv_ConvertBF16ToFINTELs(i16 %89) #4
  %91 = load i16, ptr addrspace(1) %12, align 8, !dbg !37
  %92 = tail call spir_func float @_Z27__spirv_ConvertBF16ToFINTELs(i16 %91) #4
  %93 = fmul float %78, %92, !dbg !38
  %94 = fmul float %81, %93, !dbg !39
  %95 = tail call spir_func i16 @_Z27__spirv_ConvertFToBF16INTELf(float %94) #4
  %96 = insertelement <2 x i16> poison, i16 %95, i64 0, !dbg !40
  %97 = load i16, ptr addrspace(1) %15, align 2, !dbg !37
  %98 = tail call spir_func float @_Z27__spirv_ConvertBF16ToFINTELs(i16 %97) #4
  %99 = fmul float %78, %98, !dbg !38
  %100 = fmul float %84, %99, !dbg !39
  %101 = tail call spir_func i16 @_Z27__spirv_ConvertFToBF16INTELf(float %100) #4
  %102 = insertelement <2 x i16> %96, i16 %101, i64 1, !dbg !40
  %103 = bitcast <2 x i16> %102 to i32, !dbg !40
  %104 = insertelement <2 x i32> poison, i32 %103, i64 0, !dbg !40
  %105 = load i16, ptr addrspace(1) %18, align 4, !dbg !37
  %106 = tail call spir_func float @_Z27__spirv_ConvertBF16ToFINTELs(i16 %105) #4
  %107 = fmul float %78, %106, !dbg !38
  %108 = fmul float %87, %107, !dbg !39
  %109 = tail call spir_func i16 @_Z27__spirv_ConvertFToBF16INTELf(float %108) #4
  %110 = insertelement <2 x i16> poison, i16 %109, i64 0, !dbg !40
  %111 = load i16, ptr addrspace(1) %21, align 2, !dbg !37
  %112 = tail call spir_func float @_Z27__spirv_ConvertBF16ToFINTELs(i16 %111) #4
  %113 = fmul float %78, %112, !dbg !38
  %114 = fmul float %90, %113, !dbg !39
  %115 = tail call spir_func i16 @_Z27__spirv_ConvertFToBF16INTELf(float %114) #4
  %116 = insertelement <2 x i16> %110, i16 %115, i64 1, !dbg !40
  %117 = bitcast <2 x i16> %116 to i32, !dbg !40
  %118 = insertelement <2 x i32> %104, i32 %117, i64 1, !dbg !40
  %119 = getelementptr bfloat, ptr addrspace(1) %3, i64 %11, !dbg !41
  store <2 x i32> %118, ptr addrspace(1) %119, align 8, !dbg !40
  %120 = getelementptr bfloat, ptr addrspace(1) %1, i64 %28, !dbg !35
  %121 = load i16, ptr addrspace(1) %120, align 8, !dbg !36
  %122 = tail call spir_func float @_Z27__spirv_ConvertBF16ToFINTELs(i16 %121) #4
  %123 = getelementptr inbounds nuw i8, ptr addrspace(1) %120, i64 2, !dbg !36
  %124 = load i16, ptr addrspace(1) %123, align 2, !dbg !36
  %125 = tail call spir_func float @_Z27__spirv_ConvertBF16ToFINTELs(i16 %124) #4
  %126 = getelementptr inbounds nuw i8, ptr addrspace(1) %120, i64 4, !dbg !36
  %127 = load i16, ptr addrspace(1) %126, align 4, !dbg !36
  %128 = tail call spir_func float @_Z27__spirv_ConvertBF16ToFINTELs(i16 %127) #4
  %129 = getelementptr inbounds nuw i8, ptr addrspace(1) %120, i64 6, !dbg !36
  %130 = load i16, ptr addrspace(1) %129, align 2, !dbg !36
  %131 = tail call spir_func float @_Z27__spirv_ConvertBF16ToFINTELs(i16 %130) #4
  %132 = load i16, ptr addrspace(1) %29, align 8, !dbg !37
  %133 = tail call spir_func float @_Z27__spirv_ConvertBF16ToFINTELs(i16 %132) #4
  %134 = fmul float %78, %133, !dbg !38
  %135 = fmul float %122, %134, !dbg !39
  %136 = tail call spir_func i16 @_Z27__spirv_ConvertFToBF16INTELf(float %135) #4
  %137 = insertelement <2 x i16> poison, i16 %136, i64 0, !dbg !40
  %138 = load i16, ptr addrspace(1) %32, align 2, !dbg !37
  %139 = tail call spir_func float @_Z27__spirv_ConvertBF16ToFINTELs(i16 %138) #4
  %140 = fmul float %78, %139, !dbg !38
  %141 = fmul float %125, %140, !dbg !39
  %142 = tail call spir_func i16 @_Z27__spirv_ConvertFToBF16INTELf(float %141) #4
  %143 = insertelement <2 x i16> %137, i16 %142, i64 1, !dbg !40
  %144 = bitcast <2 x i16> %143 to i32, !dbg !40
  %145 = insertelement <2 x i32> poison, i32 %144, i64 0, !dbg !40
  %146 = load i16, ptr addrspace(1) %35, align 4, !dbg !37
  %147 = tail call spir_func float @_Z27__spirv_ConvertBF16ToFINTELs(i16 %146) #4
  %148 = fmul float %78, %147, !dbg !38
  %149 = fmul float %128, %148, !dbg !39
  %150 = tail call spir_func i16 @_Z27__spirv_ConvertFToBF16INTELf(float %149) #4
  %151 = insertelement <2 x i16> poison, i16 %150, i64 0, !dbg !40
  %152 = load i16, ptr addrspace(1) %38, align 2, !dbg !37
  %153 = tail call spir_func float @_Z27__spirv_ConvertBF16ToFINTELs(i16 %152) #4
  %154 = fmul float %78, %153, !dbg !38
  %155 = fmul float %131, %154, !dbg !39
  %156 = tail call spir_func i16 @_Z27__spirv_ConvertFToBF16INTELf(float %155) #4
  %157 = insertelement <2 x i16> %151, i16 %156, i64 1, !dbg !40
  %158 = bitcast <2 x i16> %157 to i32, !dbg !40
  %159 = insertelement <2 x i32> %145, i32 %158, i64 1, !dbg !40
  %160 = getelementptr bfloat, ptr addrspace(1) %3, i64 %28, !dbg !41
  store <2 x i32> %159, ptr addrspace(1) %160, align 8, !dbg !40
  ret void, !dbg !42
}

; Function Attrs: convergent mustprogress nofree nounwind willreturn memory(none)
declare dso_local spir_func noundef float @_Z17__spirv_ocl_rsqrtf(float noundef) local_unnamed_addr #3

attributes #0 = { mustprogress nofree nosync nounwind willreturn memory(none) }
attributes #1 = { convergent mustprogress nounwind willreturn }
attributes #2 = { mustprogress nounwind willreturn }
attributes #3 = { convergent mustprogress nofree nounwind willreturn memory(none) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #4 = { nounwind willreturn memory(none) }
attributes #5 = { convergent nounwind willreturn }
attributes #6 = { convergent nounwind willreturn memory(none) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3, !4, !5}
!opencl.spir.version = !{!6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6}
!spirv.Source = !{!7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7}
!llvm.ident = !{!8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "cv7lp6y5z4b3t6oas4bmgr54bfnjqhrox5d2fsbspkgliehqau6w.py", directory: "/tmp/torchinductor_jovyan/v7")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 1, !"wchar_size", i32 4}
!4 = !{i32 1, !"sycl-device", i32 1}
!5 = !{i32 7, !"frame-pointer", i32 2}
!6 = !{i32 1, i32 2}
!7 = !{i32 3, i32 100000}
!8 = !{!"Intel(R) oneAPI DPC++/C++ Compiler 2025.0.0 (2025.0.0.20241008)"}
!9 = !DISubprogram(name: "_Z27__spirv_ConvertFToBF16INTELf", linkageName: "_Z27__spirv_ConvertFToBF16INTELf", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagOptimized)
!10 = !DISubroutineType(cc: DW_CC_normal, types: !11)
!11 = !{}
!12 = !DISubprogram(name: "_Z27__spirv_GroupNonUniformFAddiifj", linkageName: "_Z27__spirv_GroupNonUniformFAddiifj", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagOptimized)
!13 = !DISubprogram(name: "_Z7barrierj", linkageName: "_Z7barrierj", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagOptimized)
!14 = !DISubprogram(name: "_Z27__spirv_GroupNonUniformFAddiif", linkageName: "_Z27__spirv_GroupNonUniformFAddiif", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagOptimized)
!15 = !DISubprogram(name: "_Z27__spirv_ConvertBF16ToFINTELs", linkageName: "_Z27__spirv_ConvertBF16ToFINTELs", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagOptimized)
!16 = !DISubprogram(name: "_Z12get_local_idj", linkageName: "_Z12get_local_idj", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagOptimized)
!17 = distinct !DISubprogram(name: "triton_red_fused__to_copy_mean_mul_pow_rsqrt_0", linkageName: "triton_red_fused__to_copy_mean_mul_pow_rsqrt_0", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!18 = !{i32 32}
!19 = !{i64 512, i64 1, i64 1}
!20 = !DILocation(line: 26, column: 37, scope: !17)
!21 = !DILocation(line: 35, column: 34, scope: !17)
!22 = !DILocation(line: 35, column: 94, scope: !17)
!23 = !DILocation(line: 37, column: 22, scope: !17)
!24 = !DILocation(line: 30, column: 31, scope: !17)
!25 = !DILocation(line: 39, column: 23, scope: !17)
!26 = !DILocation(line: 260, column: 15, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !17, file: !28, discriminator: 0)
!28 = !DIFile(filename: "standard.py", directory: "/home/jovyan/intel-xpu-backend-for-triton/python/triton/language")
!29 = !DILocation(line: 41, column: 25, scope: !17)
!30 = !DILocation(line: 290, column: 36, scope: !27, inlinedAt: !29)
!31 = !DILocation(line: 53, column: 24, scope: !17)
!32 = !DILocation(line: 54, column: 25, scope: !17)
!33 = !DILocation(line: 55, column: 24, scope: !17)
!34 = !DILocation(line: 56, column: 32, scope: !17)
!35 = !DILocation(line: 49, column: 34, scope: !17)
!36 = !DILocation(line: 49, column: 95, scope: !17)
!37 = !DILocation(line: 50, column: 95, scope: !17)
!38 = !DILocation(line: 57, column: 23, scope: !17)
!39 = !DILocation(line: 59, column: 23, scope: !17)
!40 = !DILocation(line: 60, column: 80, scope: !17)
!41 = !DILocation(line: 60, column: 29, scope: !17)
!42 = !DILocation(line: 43, column: 4, scope: !17)
