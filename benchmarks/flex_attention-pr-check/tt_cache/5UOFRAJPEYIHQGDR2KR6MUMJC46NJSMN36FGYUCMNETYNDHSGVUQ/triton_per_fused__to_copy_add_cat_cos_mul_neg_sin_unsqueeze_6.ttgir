#blocked = #ttg.blocked<{sizePerThread = [2, 1], threadsPerWarp = [4, 8], warpsPerCTA = [1, 2], order = [0, 1]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [8, 4], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("/tmp/torchinductor_jovyan/yb/cybxcm2ysqqjeppp4gqjrwzvxkghmjsswnfi5vbuprncjjcw2hqd.py":18:0)
#loc1 = loc(unknown)
#loc18 = loc("/tmp/torchinductor_jovyan/yb/cybxcm2ysqqjeppp4gqjrwzvxkghmjsswnfi5vbuprncjjcw2hqd.py":38:37)
#loc31 = loc("/tmp/torchinductor_jovyan/yb/cybxcm2ysqqjeppp4gqjrwzvxkghmjsswnfi5vbuprncjjcw2hqd.py":48:26)
#loc40 = loc(callsite(#loc1 at #loc18))
#loc42 = loc(callsite(#loc1 at #loc31))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 2 : i32, ttg.target = "xpu", "ttg.threads-per-warp" = 32 : i32, ttig.min_sg_size = 16 : i32, ttig.support_bf16_conversion, ttig.support_dpas, ttig.support_sg_2d_block, ttig.target_arch = "spir64"} {
  tt.func public @triton_per_fused__to_copy_add_cat_cos_mul_neg_sin_unsqueeze_6(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_jovyan/yb/cybxcm2ysqqjeppp4gqjrwzvxkghmjsswnfi5vbuprncjjcw2hqd.py":18:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_jovyan/yb/cybxcm2ysqqjeppp4gqjrwzvxkghmjsswnfi5vbuprncjjcw2hqd.py":18:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_jovyan/yb/cybxcm2ysqqjeppp4gqjrwzvxkghmjsswnfi5vbuprncjjcw2hqd.py":18:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_jovyan/yb/cybxcm2ysqqjeppp4gqjrwzvxkghmjsswnfi5vbuprncjjcw2hqd.py":18:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_jovyan/yb/cybxcm2ysqqjeppp4gqjrwzvxkghmjsswnfi5vbuprncjjcw2hqd.py":18:0), %arg5: i32 loc("/tmp/torchinductor_jovyan/yb/cybxcm2ysqqjeppp4gqjrwzvxkghmjsswnfi5vbuprncjjcw2hqd.py":18:0)) attributes {noinline = false} {
    %cst = arith.constant dense<32> : tensor<1x16xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<14> : tensor<1x16xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<32> : tensor<8x1xi32, #blocked1> loc(#loc1)
    %cst_2 = arith.constant dense<32> : tensor<8x1xi32, #blocked> loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %cst_3 = arith.constant dense<0xFF800000> : tensor<8x1xf32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<0xFF800000> : tensor<8x16xf32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<0.000000e+00> : tensor<8x16xf32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c8_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<8xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<8x1xi32, #blocked> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<8xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<8x1xi32, #blocked1> loc(#loc4)
    %6 = tt.splat %1 : i32 -> tensor<8x1xi32, #blocked> loc(#loc5)
    %7 = tt.splat %1 : i32 -> tensor<8x1xi32, #blocked1> loc(#loc5)
    %8 = arith.addi %6, %4 : tensor<8x1xi32, #blocked> loc(#loc5)
    %9 = arith.addi %7, %5 : tensor<8x1xi32, #blocked1> loc(#loc5)
    %10 = arith.cmpi slt, %8, %cst_2 : tensor<8x1xi32, #blocked> loc(#loc6)
    %11 = arith.cmpi slt, %9, %cst_1 : tensor<8x1xi32, #blocked1> loc(#loc6)
    %12 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc7)
    %13 = tt.expand_dims %12 {axis = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc7)
    %14 = arith.cmpi slt, %13, %cst_0 : tensor<1x16xi32, #blocked> loc(#loc8)
    %15 = arith.muli %13, %cst : tensor<1x16xi32, #blocked> loc(#loc9)
    %16 = tt.broadcast %8 : tensor<8x1xi32, #blocked> -> tensor<8x16xi32, #blocked> loc(#loc10)
    %17 = tt.broadcast %15 : tensor<1x16xi32, #blocked> -> tensor<8x16xi32, #blocked> loc(#loc10)
    %18 = arith.addi %16, %17 : tensor<8x16xi32, #blocked> loc(#loc10)
    %19 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<8x16x!tt.ptr<f32>, #blocked> loc(#loc11)
    %20 = tt.addptr %19, %18 : tensor<8x16x!tt.ptr<f32>, #blocked>, tensor<8x16xi32, #blocked> loc(#loc11)
    %21 = tt.broadcast %14 : tensor<1x16xi1, #blocked> -> tensor<8x16xi1, #blocked> loc(#loc12)
    %22 = tt.broadcast %10 : tensor<8x1xi1, #blocked> -> tensor<8x16xi1, #blocked> loc(#loc12)
    %23 = arith.andi %21, %22 : tensor<8x16xi1, #blocked> loc(#loc12)
    %24 = tt.load %20, %23, %cst_5 : tensor<8x16x!tt.ptr<f32>, #blocked> loc(#loc13)
    %25 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<8x16x!tt.ptr<f32>, #blocked> loc(#loc14)
    %26 = tt.addptr %25, %18 : tensor<8x16x!tt.ptr<f32>, #blocked>, tensor<8x16xi32, #blocked> loc(#loc14)
    %27 = tt.load %26, %23, %cst_5 : tensor<8x16x!tt.ptr<f32>, #blocked> loc(#loc15)
    %28 = arith.select %23, %24, %cst_4 : tensor<8x16xi1, #blocked>, tensor<8x16xf32, #blocked> loc(#loc16)
    %29 = "tt.reduce"(%28) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32 loc(callsite(#loc1 at #loc18)), %arg7: f32 loc(callsite(#loc1 at #loc18))):
      %48 = arith.cmpf ogt, %arg6, %arg7 : f32 loc(#loc43)
      %49 = arith.cmpf une, %arg6, %arg6 : f32 loc(#loc44)
      %50 = arith.ori %48, %49 : i1 loc(#loc45)
      %51 = arith.select %50, %arg6, %arg7 : f32 loc(#loc46)
      tt.reduce.return %51 : f32 loc(#loc39)
    }) : (tensor<8x16xf32, #blocked>) -> tensor<8xf32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc39)
    %30 = ttg.convert_layout %29 : tensor<8xf32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<8xf32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc23)
    %31 = tt.expand_dims %30 {axis = 1 : i32} : tensor<8xf32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<8x1xf32, #blocked1> loc(#loc23)
    %32 = tt.expand_dims %29 {axis = 1 : i32} : tensor<8xf32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<8x1xf32, #blocked> loc(#loc23)
    %33 = arith.cmpf oeq, %32, %cst_3 : tensor<8x1xf32, #blocked> loc(#loc24)
    %34 = tt.broadcast %32 : tensor<8x1xf32, #blocked> -> tensor<8x16xf32, #blocked> loc(#loc25)
    %35 = arith.subf %24, %34 : tensor<8x16xf32, #blocked> loc(#loc25)
    %36 = tt.broadcast %33 : tensor<8x1xi1, #blocked> -> tensor<8x16xi1, #blocked> loc(#loc26)
    %37 = arith.select %36, %cst_5, %35 : tensor<8x16xi1, #blocked>, tensor<8x16xf32, #blocked> loc(#loc26)
    %38 = tt.extern_elementwise %37 {libname = "", libpath = "", pure = true, symbol = "__imf_exp2f"} : (tensor<8x16xf32, #blocked>) -> tensor<8x16xf32, #blocked> loc(#loc27)
    %39 = arith.mulf %27, %38 : tensor<8x16xf32, #blocked> loc(#loc28)
    %40 = arith.select %23, %39, %cst_5 : tensor<8x16xi1, #blocked>, tensor<8x16xf32, #blocked> loc(#loc29)
    %41 = "tt.reduce"(%40) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32 loc(callsite(#loc1 at #loc31)), %arg7: f32 loc(callsite(#loc1 at #loc31))):
      %48 = arith.addf %arg6, %arg7 : f32 loc(#loc47)
      tt.reduce.return %48 : f32 loc(#loc41)
    }) : (tensor<8x16xf32, #blocked>) -> tensor<8xf32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc41)
    %42 = ttg.convert_layout %41 : tensor<8xf32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<8xf32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc33)
    %43 = tt.expand_dims %42 {axis = 1 : i32} : tensor<8xf32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<8x1xf32, #blocked1> loc(#loc33)
    %44 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<8x1x!tt.ptr<f32>, #blocked1> loc(#loc34)
    %45 = tt.addptr %44, %9 : tensor<8x1x!tt.ptr<f32>, #blocked1>, tensor<8x1xi32, #blocked1> loc(#loc34)
    tt.store %45, %31, %11 : tensor<8x1x!tt.ptr<f32>, #blocked1> loc(#loc35)
    %46 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<8x1x!tt.ptr<f32>, #blocked1> loc(#loc36)
    %47 = tt.addptr %46, %9 : tensor<8x1x!tt.ptr<f32>, #blocked1>, tensor<8x1xi32, #blocked1> loc(#loc36)
    tt.store %47, %43, %11 : tensor<8x1x!tt.ptr<f32>, #blocked1> loc(#loc37)
    tt.return loc(#loc38)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/tmp/torchinductor_jovyan/yb/cybxcm2ysqqjeppp4gqjrwzvxkghmjsswnfi5vbuprncjjcw2hqd.py":24:28)
#loc3 = loc("/tmp/torchinductor_jovyan/yb/cybxcm2ysqqjeppp4gqjrwzvxkghmjsswnfi5vbuprncjjcw2hqd.py":24:33)
#loc4 = loc("/tmp/torchinductor_jovyan/yb/cybxcm2ysqqjeppp4gqjrwzvxkghmjsswnfi5vbuprncjjcw2hqd.py":25:44)
#loc5 = loc("/tmp/torchinductor_jovyan/yb/cybxcm2ysqqjeppp4gqjrwzvxkghmjsswnfi5vbuprncjjcw2hqd.py":25:23)
#loc6 = loc("/tmp/torchinductor_jovyan/yb/cybxcm2ysqqjeppp4gqjrwzvxkghmjsswnfi5vbuprncjjcw2hqd.py":26:21)
#loc7 = loc("/tmp/torchinductor_jovyan/yb/cybxcm2ysqqjeppp4gqjrwzvxkghmjsswnfi5vbuprncjjcw2hqd.py":27:38)
#loc8 = loc("/tmp/torchinductor_jovyan/yb/cybxcm2ysqqjeppp4gqjrwzvxkghmjsswnfi5vbuprncjjcw2hqd.py":29:25)
#loc9 = loc("/tmp/torchinductor_jovyan/yb/cybxcm2ysqqjeppp4gqjrwzvxkghmjsswnfi5vbuprncjjcw2hqd.py":34:38)
#loc10 = loc("/tmp/torchinductor_jovyan/yb/cybxcm2ysqqjeppp4gqjrwzvxkghmjsswnfi5vbuprncjjcw2hqd.py":34:35)
#loc11 = loc("/tmp/torchinductor_jovyan/yb/cybxcm2ysqqjeppp4gqjrwzvxkghmjsswnfi5vbuprncjjcw2hqd.py":34:30)
#loc12 = loc("/tmp/torchinductor_jovyan/yb/cybxcm2ysqqjeppp4gqjrwzvxkghmjsswnfi5vbuprncjjcw2hqd.py":34:55)
#loc13 = loc("/tmp/torchinductor_jovyan/yb/cybxcm2ysqqjeppp4gqjrwzvxkghmjsswnfi5vbuprncjjcw2hqd.py":34:45)
#loc14 = loc("/tmp/torchinductor_jovyan/yb/cybxcm2ysqqjeppp4gqjrwzvxkghmjsswnfi5vbuprncjjcw2hqd.py":35:30)
#loc15 = loc("/tmp/torchinductor_jovyan/yb/cybxcm2ysqqjeppp4gqjrwzvxkghmjsswnfi5vbuprncjjcw2hqd.py":35:45)
#loc16 = loc("/tmp/torchinductor_jovyan/yb/cybxcm2ysqqjeppp4gqjrwzvxkghmjsswnfi5vbuprncjjcw2hqd.py":37:43)
#loc17 = loc("/home/jovyan/envs/miniforge3/envs/triton/lib/python3.10/site-packages/torch/_inductor/runtime/triton_helpers.py":124:29)
#loc19 = loc("/home/jovyan/envs/miniforge3/envs/triton/lib/python3.10/site-packages/torch/_inductor/runtime/triton_helpers.py":111:15)
#loc20 = loc("/home/jovyan/envs/miniforge3/envs/triton/lib/python3.10/site-packages/torch/_inductor/runtime/triton_helpers.py":113:21)
#loc21 = loc("/home/jovyan/envs/miniforge3/envs/triton/lib/python3.10/site-packages/torch/_inductor/runtime/triton_helpers.py":113:16)
#loc22 = loc("/home/jovyan/envs/miniforge3/envs/triton/lib/python3.10/site-packages/torch/_inductor/runtime/triton_helpers.py":114:29)
#loc23 = loc("/tmp/torchinductor_jovyan/yb/cybxcm2ysqqjeppp4gqjrwzvxkghmjsswnfi5vbuprncjjcw2hqd.py":38:40)
#loc24 = loc("/tmp/torchinductor_jovyan/yb/cybxcm2ysqqjeppp4gqjrwzvxkghmjsswnfi5vbuprncjjcw2hqd.py":40:19)
#loc25 = loc("/tmp/torchinductor_jovyan/yb/cybxcm2ysqqjeppp4gqjrwzvxkghmjsswnfi5vbuprncjjcw2hqd.py":41:18)
#loc26 = loc("/tmp/torchinductor_jovyan/yb/cybxcm2ysqqjeppp4gqjrwzvxkghmjsswnfi5vbuprncjjcw2hqd.py":43:33)
#loc27 = loc("/tmp/torchinductor_jovyan/yb/cybxcm2ysqqjeppp4gqjrwzvxkghmjsswnfi5vbuprncjjcw2hqd.py":44:27)
#loc28 = loc("/tmp/torchinductor_jovyan/yb/cybxcm2ysqqjeppp4gqjrwzvxkghmjsswnfi5vbuprncjjcw2hqd.py":45:19)
#loc29 = loc("/tmp/torchinductor_jovyan/yb/cybxcm2ysqqjeppp4gqjrwzvxkghmjsswnfi5vbuprncjjcw2hqd.py":47:45)
#loc30 = loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":290:36)
#loc32 = loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":260:15)
#loc33 = loc("/tmp/torchinductor_jovyan/yb/cybxcm2ysqqjeppp4gqjrwzvxkghmjsswnfi5vbuprncjjcw2hqd.py":48:29)
#loc34 = loc("/tmp/torchinductor_jovyan/yb/cybxcm2ysqqjeppp4gqjrwzvxkghmjsswnfi5vbuprncjjcw2hqd.py":49:25)
#loc35 = loc("/tmp/torchinductor_jovyan/yb/cybxcm2ysqqjeppp4gqjrwzvxkghmjsswnfi5vbuprncjjcw2hqd.py":49:36)
#loc36 = loc("/tmp/torchinductor_jovyan/yb/cybxcm2ysqqjeppp4gqjrwzvxkghmjsswnfi5vbuprncjjcw2hqd.py":50:25)
#loc37 = loc("/tmp/torchinductor_jovyan/yb/cybxcm2ysqqjeppp4gqjrwzvxkghmjsswnfi5vbuprncjjcw2hqd.py":50:37)
#loc38 = loc("/tmp/torchinductor_jovyan/yb/cybxcm2ysqqjeppp4gqjrwzvxkghmjsswnfi5vbuprncjjcw2hqd.py":50:4)
#loc39 = loc(callsite(#loc17 at #loc18))
#loc41 = loc(callsite(#loc30 at #loc31))
#loc43 = loc(callsite(#loc19 at #loc39))
#loc44 = loc(callsite(#loc20 at #loc39))
#loc45 = loc(callsite(#loc21 at #loc39))
#loc46 = loc(callsite(#loc22 at #loc39))
#loc47 = loc(callsite(#loc32 at #loc41))
