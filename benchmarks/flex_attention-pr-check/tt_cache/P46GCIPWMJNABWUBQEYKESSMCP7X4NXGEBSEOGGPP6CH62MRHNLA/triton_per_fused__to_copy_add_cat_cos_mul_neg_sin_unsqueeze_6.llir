; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-n8:16:32:64"
target triple = "spir64-unknown-unknown"

; Function Attrs: convergent mustprogress nounwind willreturn
declare !dbg !9 spir_func float @_Z27__spirv_GroupNonUniformFAddiifj(i32, i32, float, i32) local_unnamed_addr #0

; Function Attrs: convergent mustprogress nounwind willreturn
declare !dbg !12 spir_func void @_Z7barrierj(i32) local_unnamed_addr #0

; Function Attrs: convergent mustprogress nounwind willreturn
declare !dbg !13 spir_func float @_Z21sub_group_shuffle_xorfj(float, i32) local_unnamed_addr #0

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(none)
declare !dbg !14 spir_func i64 @_Z12get_local_idj(i32) local_unnamed_addr #1

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(none)
declare !dbg !15 spir_func i64 @_Z12get_group_idj(i32) local_unnamed_addr #1

; Function Attrs: mustprogress nounwind willreturn
define spir_kernel void @triton_per_fused__to_copy_add_cat_cos_mul_neg_sin_unsqueeze_6(ptr addrspace(1) readonly captures(none) %0, ptr addrspace(1) readonly captures(none) %1, ptr addrspace(1) writeonly captures(none) %2, ptr addrspace(1) writeonly captures(none) %3, i32 %4, i32 %5, ptr addrspace(1) readnone captures(none) %6, ptr addrspace(3) captures(none) %7) local_unnamed_addr #2 !dbg !16 !intel_reqd_sub_group_size !17 !max_work_group_size !18 {
  %9 = tail call spir_func i64 @_Z12get_group_idj(i32 0) #5, !dbg !19
  %10 = trunc i64 %9 to i32, !dbg !19
  %11 = shl i32 %10, 5, !dbg !20
  %12 = tail call spir_func i64 @_Z12get_local_idj(i32 0) #5, !dbg !21
  %13 = trunc i64 %12 to i32, !dbg !21
  %14 = and i32 %13, 24, !dbg !21
  %15 = lshr i32 %13, 5, !dbg !21
  %16 = and i32 %15, 3, !dbg !21
  %17 = shl i32 %13, 2, !dbg !21
  %18 = and i32 %17, 28, !dbg !21
  %19 = and i32 %13, 31, !dbg !21
  %20 = or disjoint i32 %18, %11, !dbg !22
  %21 = or disjoint i32 %19, %11, !dbg !22
  %22 = icmp slt i32 %20, 32, !dbg !23
  %23 = icmp slt i32 %21, 32, !dbg !23
  %24 = lshr i32 %13, 3, !dbg !24
  %25 = and i32 %24, 15, !dbg !24
  %26 = icmp samesign ult i32 %25, 14, !dbg !25
  %27 = and i1 %26, %22, !dbg !26
  br i1 %27, label %28, label %42, !dbg !27

28:                                               ; preds = %8
  %29 = shl nuw nsw i32 %25, 5, !dbg !28
  %30 = add nsw i32 %20, %29, !dbg !29
  %31 = sext i32 %30 to i64, !dbg !30
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !30
  %33 = load float, ptr addrspace(1) %32, align 16, !dbg !27
  %34 = getelementptr inbounds nuw i8, ptr addrspace(1) %32, i64 4, !dbg !27
  %35 = load float, ptr addrspace(1) %34, align 4, !dbg !27
  %36 = getelementptr inbounds nuw i8, ptr addrspace(1) %32, i64 8, !dbg !27
  %37 = load float, ptr addrspace(1) %36, align 8, !dbg !27
  %38 = getelementptr inbounds nuw i8, ptr addrspace(1) %32, i64 12, !dbg !27
  %39 = load float, ptr addrspace(1) %38, align 4, !dbg !27
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !31
  %41 = load <4 x float>, ptr addrspace(1) %40, align 16, !dbg !32
  br label %42, !dbg !32

42:                                               ; preds = %8, %28
  %43 = phi float [ %39, %28 ], [ 0.000000e+00, %8 ]
  %44 = phi float [ %37, %28 ], [ 0.000000e+00, %8 ]
  %45 = phi float [ %35, %28 ], [ 0.000000e+00, %8 ]
  %46 = phi float [ %33, %28 ], [ 0.000000e+00, %8 ]
  %47 = phi float [ %39, %28 ], [ 0xFFF0000000000000, %8 ], !dbg !32
  %48 = phi float [ %37, %28 ], [ 0xFFF0000000000000, %8 ], !dbg !32
  %49 = phi float [ %35, %28 ], [ 0xFFF0000000000000, %8 ], !dbg !32
  %50 = phi float [ %33, %28 ], [ 0xFFF0000000000000, %8 ], !dbg !32
  %bc6 = phi <4 x float> [ %41, %28 ], [ zeroinitializer, %8 ], !dbg !32
  %51 = extractelement <4 x float> %bc6, i64 0, !dbg !32
  %52 = extractelement <4 x float> %bc6, i64 1, !dbg !32
  %53 = extractelement <4 x float> %bc6, i64 2, !dbg !32
  %54 = extractelement <4 x float> %bc6, i64 3, !dbg !32
  %55 = tail call spir_func float @_Z21sub_group_shuffle_xorfj(float %50, i32 16) #6, !dbg !33
  %56 = fcmp ogt float %50, %55, !dbg !37
  %57 = fcmp uno float %50, 0.000000e+00, !dbg !38
  %58 = or i1 %57, %56, !dbg !39
  %59 = select i1 %58, float %50, float %55, !dbg !40
  %60 = tail call spir_func float @_Z21sub_group_shuffle_xorfj(float %59, i32 8) #6, !dbg !33
  %61 = tail call spir_func float @_Z21sub_group_shuffle_xorfj(float %49, i32 16) #6, !dbg !33
  %62 = fcmp ogt float %49, %61, !dbg !37
  %63 = fcmp uno float %49, 0.000000e+00, !dbg !38
  %64 = or i1 %63, %62, !dbg !39
  %65 = select i1 %64, float %49, float %61, !dbg !40
  %66 = tail call spir_func float @_Z21sub_group_shuffle_xorfj(float %65, i32 8) #6, !dbg !33
  %67 = tail call spir_func float @_Z21sub_group_shuffle_xorfj(float %48, i32 16) #6, !dbg !33
  %68 = fcmp ogt float %48, %67, !dbg !37
  %69 = fcmp uno float %48, 0.000000e+00, !dbg !38
  %70 = or i1 %69, %68, !dbg !39
  %71 = select i1 %70, float %48, float %67, !dbg !40
  %72 = tail call spir_func float @_Z21sub_group_shuffle_xorfj(float %71, i32 8) #6, !dbg !33
  %73 = tail call spir_func float @_Z21sub_group_shuffle_xorfj(float %47, i32 16) #6, !dbg !33
  %74 = fcmp ogt float %47, %73, !dbg !37
  %75 = fcmp uno float %47, 0.000000e+00, !dbg !38
  %76 = or i1 %75, %74, !dbg !39
  %77 = select i1 %76, float %47, float %73, !dbg !40
  %78 = tail call spir_func float @_Z21sub_group_shuffle_xorfj(float %77, i32 8) #6, !dbg !33
  %79 = icmp eq i32 %14, 0, !dbg !33
  %80 = shl nuw nsw i32 %18, 2, !dbg !33
  %81 = or disjoint i32 %80, %16, !dbg !33
  %82 = zext nneg i32 %81 to i64, !dbg !33
  %83 = getelementptr float, ptr addrspace(3) %7, i64 %82, !dbg !33
  br i1 %79, label %88, label %84, !dbg !33

84:                                               ; preds = %42
  %85 = getelementptr i8, ptr addrspace(3) %83, i64 16, !dbg !33
  %86 = getelementptr i8, ptr addrspace(3) %83, i64 32, !dbg !33
  %87 = getelementptr i8, ptr addrspace(3) %83, i64 48, !dbg !33
  br label %108, !dbg !33

88:                                               ; preds = %42
  %89 = fcmp ogt float %77, %78, !dbg !37
  %90 = fcmp uno float %77, 0.000000e+00, !dbg !38
  %91 = or i1 %89, %90, !dbg !39
  %92 = select i1 %91, float %77, float %78, !dbg !40
  %93 = fcmp ogt float %71, %72, !dbg !37
  %94 = fcmp uno float %71, 0.000000e+00, !dbg !38
  %95 = or i1 %93, %94, !dbg !39
  %96 = select i1 %95, float %71, float %72, !dbg !40
  %97 = fcmp ogt float %65, %66, !dbg !37
  %98 = fcmp uno float %65, 0.000000e+00, !dbg !38
  %99 = or i1 %97, %98, !dbg !39
  %100 = select i1 %99, float %65, float %66, !dbg !40
  %101 = fcmp ogt float %59, %60, !dbg !37
  %102 = fcmp uno float %59, 0.000000e+00, !dbg !38
  %103 = or i1 %101, %102, !dbg !39
  %104 = select i1 %103, float %59, float %60, !dbg !40
  store float %104, ptr addrspace(3) %83, align 4, !dbg !33
  %105 = getelementptr i8, ptr addrspace(3) %83, i64 16, !dbg !33
  store float %100, ptr addrspace(3) %105, align 4, !dbg !33
  %106 = getelementptr i8, ptr addrspace(3) %83, i64 32, !dbg !33
  store float %96, ptr addrspace(3) %106, align 4, !dbg !33
  %107 = getelementptr i8, ptr addrspace(3) %83, i64 48, !dbg !33
  store float %92, ptr addrspace(3) %107, align 4, !dbg !33
  br label %108, !dbg !33

108:                                              ; preds = %84, %88
  %109 = phi ptr addrspace(3) [ %107, %88 ], [ %87, %84 ]
  %110 = phi ptr addrspace(3) [ %105, %88 ], [ %85, %84 ]
  %111 = phi ptr addrspace(3) [ %106, %88 ], [ %86, %84 ]
  tail call spir_func void @_Z7barrierj(i32 1) #6, !dbg !33
  %112 = and i64 %12, 127, !dbg !33
  %113 = getelementptr float, ptr addrspace(3) %7, i64 %112, !dbg !33
  %114 = load float, ptr addrspace(3) %113, align 4, !dbg !33
  %115 = tail call spir_func float @_Z21sub_group_shuffle_xorfj(float %114, i32 2) #6, !dbg !33
  %116 = fcmp ogt float %114, %115, !dbg !37
  %117 = fcmp uno float %114, 0.000000e+00, !dbg !38
  %118 = or i1 %117, %116, !dbg !39
  %119 = select i1 %118, float %114, float %115, !dbg !40
  %120 = tail call spir_func float @_Z21sub_group_shuffle_xorfj(float %119, i32 1) #6, !dbg !33
  %121 = and i32 %13, 3, !dbg !33
  %122 = icmp eq i32 %121, 0, !dbg !33
  br i1 %122, label %123, label %128, !dbg !33

123:                                              ; preds = %108
  %124 = fcmp ogt float %119, %120, !dbg !37
  %125 = fcmp uno float %119, 0.000000e+00, !dbg !38
  %126 = or i1 %124, %125, !dbg !39
  %127 = select i1 %126, float %119, float %120, !dbg !40
  store float %127, ptr addrspace(3) %113, align 4, !dbg !33
  br label %128, !dbg !33

128:                                              ; preds = %123, %108
  tail call spir_func void @_Z7barrierj(i32 1) #6, !dbg !33
  %129 = zext nneg i32 %80 to i64, !dbg !33
  %130 = getelementptr float, ptr addrspace(3) %7, i64 %129, !dbg !33
  %131 = load float, ptr addrspace(3) %130, align 4, !dbg !33
  %132 = getelementptr i8, ptr addrspace(3) %130, i64 16, !dbg !33
  %133 = load float, ptr addrspace(3) %132, align 4, !dbg !33
  %134 = getelementptr i8, ptr addrspace(3) %130, i64 32, !dbg !33
  %135 = load float, ptr addrspace(3) %134, align 4, !dbg !33
  %136 = getelementptr i8, ptr addrspace(3) %130, i64 48, !dbg !33
  %137 = load float, ptr addrspace(3) %136, align 4, !dbg !33
  tail call spir_func void @_Z7barrierj(i32 1) #6, !dbg !41
  %138 = and i64 %12, 31, !dbg !41
  %139 = zext nneg i32 %18 to i64, !dbg !41
  %140 = getelementptr inbounds nuw float, ptr addrspace(3) %7, i64 %139, !dbg !41
  %141 = insertelement <4 x float> poison, float %131, i64 0, !dbg !41
  %142 = insertelement <4 x float> %141, float %133, i64 1, !dbg !41
  %143 = insertelement <4 x float> %142, float %135, i64 2, !dbg !41
  %144 = insertelement <4 x float> %143, float %137, i64 3, !dbg !41
  store <4 x float> %144, ptr addrspace(3) %140, align 16, !dbg !41
  tail call spir_func void @_Z7barrierj(i32 1) #6, !dbg !41
  %145 = getelementptr inbounds nuw float, ptr addrspace(3) %7, i64 %138, !dbg !41
  %146 = load i32, ptr addrspace(3) %145, align 4, !dbg !41
  %147 = fcmp oeq float %131, 0xFFF0000000000000, !dbg !42
  %148 = fcmp oeq float %133, 0xFFF0000000000000, !dbg !42
  %149 = fcmp oeq float %135, 0xFFF0000000000000, !dbg !42
  %150 = fcmp oeq float %137, 0xFFF0000000000000, !dbg !42
  %151 = fsub float %46, %131, !dbg !43
  %152 = fsub float %45, %133, !dbg !43
  %153 = fsub float %44, %135, !dbg !43
  %154 = fsub float %43, %137, !dbg !43
  %155 = select i1 %147, float 0.000000e+00, float %151, !dbg !44
  %156 = select i1 %148, float 0.000000e+00, float %152, !dbg !44
  %157 = select i1 %149, float 0.000000e+00, float %153, !dbg !44
  %158 = select i1 %150, float 0.000000e+00, float %154, !dbg !44
  %159 = tail call spir_func noundef float @_Z16__spirv_ocl_rintf(float noundef %155) #7, !dbg !45
  %160 = fsub float %155, %159, !dbg !45
  %161 = fptosi float %159 to i32, !dbg !45
  %162 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef 0x3F24499000000000, float noundef %160, float noundef 0x3F55F48C60000000) #7, !dbg !45
  %163 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %160, float noundef 5.000000e-01, float noundef 1.000000e+00) #7, !dbg !45
  %164 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %162, float noundef %160, float noundef 0x3F83B29960000000) #7, !dbg !45
  %165 = fadd float %163, -1.000000e+00, !dbg !45
  %166 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %164, float noundef %160, float noundef 0x3FAC6AECC0000000) #7, !dbg !45
  %167 = fneg float %165, !dbg !45
  %168 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %160, float noundef 5.000000e-01, float noundef %167) #7, !dbg !45
  %169 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %166, float noundef %160, float noundef 0x3FCEBFBE20000000) #7, !dbg !45
  %170 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %169, float noundef %160, float noundef 0x3FC8B90C40000000) #7, !dbg !45
  %171 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %170, float noundef %160, float noundef %168) #7, !dbg !45
  %172 = fadd float %163, %171, !dbg !45
  %173 = add i32 %161, -127, !dbg !45
  %174 = icmp ult i32 %173, -252, !dbg !45
  br i1 %174, label %180, label %175, !dbg !45

175:                                              ; preds = %128
  %176 = bitcast float %172 to i32, !dbg !45
  %177 = shl nsw i32 %161, 23, !dbg !45
  %178 = add i32 %177, %176, !dbg !45
  %179 = bitcast i32 %178 to float, !dbg !45
  br label %__devicelib_imf_exp2f.exit13, !dbg !45

180:                                              ; preds = %128
  %181 = tail call float @llvm.fabs.f32(float %155), !dbg !45
  %182 = bitcast float %181 to i32, !dbg !45
  %183 = icmp samesign ugt i32 %182, 2139095039, !dbg !45
  br i1 %183, label %184, label %188, !dbg !45

184:                                              ; preds = %180
  %185 = fcmp oeq float %155, 0xFFF0000000000000, !dbg !45
  %186 = fadd float %155, %155, !dbg !45
  %187 = select i1 %185, float 0.000000e+00, float %186, !dbg !45
  br label %__devicelib_imf_exp2f.exit13, !dbg !45

188:                                              ; preds = %180
  %189 = tail call spir_func noundef float @_Z16__spirv_ocl_fminff(float noundef %155, float noundef 1.920000e+02) #7, !dbg !45
  %190 = tail call spir_func noundef float @_Z16__spirv_ocl_fmaxff(float noundef %189, float noundef -1.920000e+02) #7, !dbg !45
  %191 = tail call spir_func noundef float @_Z16__spirv_ocl_rintf(float noundef %190) #7, !dbg !45
  %192 = fptosi float %191 to i32, !dbg !45
  %193 = ashr i32 %192, 1, !dbg !45
  %194 = sub nsw i32 %192, %193, !dbg !45
  %195 = shl i32 %194, 23, !dbg !45
  %196 = add i32 %195, 1065353216, !dbg !45
  %197 = shl i32 %193, 23, !dbg !45
  %198 = add i32 %197, 1065353216, !dbg !45
  %199 = bitcast i32 %196 to float, !dbg !45
  %200 = fmul float %172, %199, !dbg !45
  %201 = bitcast i32 %198 to float, !dbg !45
  %202 = fmul float %200, %201, !dbg !45
  br label %__devicelib_imf_exp2f.exit13, !dbg !45

__devicelib_imf_exp2f.exit13:                     ; preds = %175, %184, %188
  %203 = phi float [ %202, %188 ], [ %179, %175 ], [ %187, %184 ], !dbg !45
  %204 = tail call spir_func noundef float @_Z16__spirv_ocl_rintf(float noundef %156) #7, !dbg !45
  %205 = fsub float %156, %204, !dbg !45
  %206 = fptosi float %204 to i32, !dbg !45
  %207 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef 0x3F24499000000000, float noundef %205, float noundef 0x3F55F48C60000000) #7, !dbg !45
  %208 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %205, float noundef 5.000000e-01, float noundef 1.000000e+00) #7, !dbg !45
  %209 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %207, float noundef %205, float noundef 0x3F83B29960000000) #7, !dbg !45
  %210 = fadd float %208, -1.000000e+00, !dbg !45
  %211 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %209, float noundef %205, float noundef 0x3FAC6AECC0000000) #7, !dbg !45
  %212 = fneg float %210, !dbg !45
  %213 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %205, float noundef 5.000000e-01, float noundef %212) #7, !dbg !45
  %214 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %211, float noundef %205, float noundef 0x3FCEBFBE20000000) #7, !dbg !45
  %215 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %214, float noundef %205, float noundef 0x3FC8B90C40000000) #7, !dbg !45
  %216 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %215, float noundef %205, float noundef %213) #7, !dbg !45
  %217 = fadd float %208, %216, !dbg !45
  %218 = add i32 %206, -127, !dbg !45
  %219 = icmp ult i32 %218, -252, !dbg !45
  br i1 %219, label %225, label %220, !dbg !45

220:                                              ; preds = %__devicelib_imf_exp2f.exit13
  %221 = bitcast float %217 to i32, !dbg !45
  %222 = shl nsw i32 %206, 23, !dbg !45
  %223 = add i32 %222, %221, !dbg !45
  %224 = bitcast i32 %223 to float, !dbg !45
  br label %__devicelib_imf_exp2f.exit12, !dbg !45

225:                                              ; preds = %__devicelib_imf_exp2f.exit13
  %226 = tail call float @llvm.fabs.f32(float %156), !dbg !45
  %227 = bitcast float %226 to i32, !dbg !45
  %228 = icmp samesign ugt i32 %227, 2139095039, !dbg !45
  br i1 %228, label %229, label %233, !dbg !45

229:                                              ; preds = %225
  %230 = fcmp oeq float %156, 0xFFF0000000000000, !dbg !45
  %231 = fadd float %156, %156, !dbg !45
  %232 = select i1 %230, float 0.000000e+00, float %231, !dbg !45
  br label %__devicelib_imf_exp2f.exit12, !dbg !45

233:                                              ; preds = %225
  %234 = tail call spir_func noundef float @_Z16__spirv_ocl_fminff(float noundef %156, float noundef 1.920000e+02) #7, !dbg !45
  %235 = tail call spir_func noundef float @_Z16__spirv_ocl_fmaxff(float noundef %234, float noundef -1.920000e+02) #7, !dbg !45
  %236 = tail call spir_func noundef float @_Z16__spirv_ocl_rintf(float noundef %235) #7, !dbg !45
  %237 = fptosi float %236 to i32, !dbg !45
  %238 = ashr i32 %237, 1, !dbg !45
  %239 = sub nsw i32 %237, %238, !dbg !45
  %240 = shl i32 %239, 23, !dbg !45
  %241 = add i32 %240, 1065353216, !dbg !45
  %242 = shl i32 %238, 23, !dbg !45
  %243 = add i32 %242, 1065353216, !dbg !45
  %244 = bitcast i32 %241 to float, !dbg !45
  %245 = fmul float %217, %244, !dbg !45
  %246 = bitcast i32 %243 to float, !dbg !45
  %247 = fmul float %245, %246, !dbg !45
  br label %__devicelib_imf_exp2f.exit12, !dbg !45

__devicelib_imf_exp2f.exit12:                     ; preds = %220, %229, %233
  %248 = phi float [ %247, %233 ], [ %224, %220 ], [ %232, %229 ], !dbg !45
  %249 = tail call spir_func noundef float @_Z16__spirv_ocl_rintf(float noundef %157) #7, !dbg !45
  %250 = fsub float %157, %249, !dbg !45
  %251 = fptosi float %249 to i32, !dbg !45
  %252 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef 0x3F24499000000000, float noundef %250, float noundef 0x3F55F48C60000000) #7, !dbg !45
  %253 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %250, float noundef 5.000000e-01, float noundef 1.000000e+00) #7, !dbg !45
  %254 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %252, float noundef %250, float noundef 0x3F83B29960000000) #7, !dbg !45
  %255 = fadd float %253, -1.000000e+00, !dbg !45
  %256 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %254, float noundef %250, float noundef 0x3FAC6AECC0000000) #7, !dbg !45
  %257 = fneg float %255, !dbg !45
  %258 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %250, float noundef 5.000000e-01, float noundef %257) #7, !dbg !45
  %259 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %256, float noundef %250, float noundef 0x3FCEBFBE20000000) #7, !dbg !45
  %260 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %259, float noundef %250, float noundef 0x3FC8B90C40000000) #7, !dbg !45
  %261 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %260, float noundef %250, float noundef %258) #7, !dbg !45
  %262 = fadd float %253, %261, !dbg !45
  %263 = add i32 %251, -127, !dbg !45
  %264 = icmp ult i32 %263, -252, !dbg !45
  br i1 %264, label %270, label %265, !dbg !45

265:                                              ; preds = %__devicelib_imf_exp2f.exit12
  %266 = bitcast float %262 to i32, !dbg !45
  %267 = shl nsw i32 %251, 23, !dbg !45
  %268 = add i32 %267, %266, !dbg !45
  %269 = bitcast i32 %268 to float, !dbg !45
  br label %__devicelib_imf_exp2f.exit11, !dbg !45

270:                                              ; preds = %__devicelib_imf_exp2f.exit12
  %271 = tail call float @llvm.fabs.f32(float %157), !dbg !45
  %272 = bitcast float %271 to i32, !dbg !45
  %273 = icmp samesign ugt i32 %272, 2139095039, !dbg !45
  br i1 %273, label %274, label %278, !dbg !45

274:                                              ; preds = %270
  %275 = fcmp oeq float %157, 0xFFF0000000000000, !dbg !45
  %276 = fadd float %157, %157, !dbg !45
  %277 = select i1 %275, float 0.000000e+00, float %276, !dbg !45
  br label %__devicelib_imf_exp2f.exit11, !dbg !45

278:                                              ; preds = %270
  %279 = tail call spir_func noundef float @_Z16__spirv_ocl_fminff(float noundef %157, float noundef 1.920000e+02) #7, !dbg !45
  %280 = tail call spir_func noundef float @_Z16__spirv_ocl_fmaxff(float noundef %279, float noundef -1.920000e+02) #7, !dbg !45
  %281 = tail call spir_func noundef float @_Z16__spirv_ocl_rintf(float noundef %280) #7, !dbg !45
  %282 = fptosi float %281 to i32, !dbg !45
  %283 = ashr i32 %282, 1, !dbg !45
  %284 = sub nsw i32 %282, %283, !dbg !45
  %285 = shl i32 %284, 23, !dbg !45
  %286 = add i32 %285, 1065353216, !dbg !45
  %287 = shl i32 %283, 23, !dbg !45
  %288 = add i32 %287, 1065353216, !dbg !45
  %289 = bitcast i32 %286 to float, !dbg !45
  %290 = fmul float %262, %289, !dbg !45
  %291 = bitcast i32 %288 to float, !dbg !45
  %292 = fmul float %290, %291, !dbg !45
  br label %__devicelib_imf_exp2f.exit11, !dbg !45

__devicelib_imf_exp2f.exit11:                     ; preds = %265, %274, %278
  %293 = phi float [ %292, %278 ], [ %269, %265 ], [ %277, %274 ], !dbg !45
  %294 = tail call spir_func noundef float @_Z16__spirv_ocl_rintf(float noundef %158) #7, !dbg !45
  %295 = fsub float %158, %294, !dbg !45
  %296 = fptosi float %294 to i32, !dbg !45
  %297 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef 0x3F24499000000000, float noundef %295, float noundef 0x3F55F48C60000000) #7, !dbg !45
  %298 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %295, float noundef 5.000000e-01, float noundef 1.000000e+00) #7, !dbg !45
  %299 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %297, float noundef %295, float noundef 0x3F83B29960000000) #7, !dbg !45
  %300 = fadd float %298, -1.000000e+00, !dbg !45
  %301 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %299, float noundef %295, float noundef 0x3FAC6AECC0000000) #7, !dbg !45
  %302 = fneg float %300, !dbg !45
  %303 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %295, float noundef 5.000000e-01, float noundef %302) #7, !dbg !45
  %304 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %301, float noundef %295, float noundef 0x3FCEBFBE20000000) #7, !dbg !45
  %305 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %304, float noundef %295, float noundef 0x3FC8B90C40000000) #7, !dbg !45
  %306 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %305, float noundef %295, float noundef %303) #7, !dbg !45
  %307 = fadd float %298, %306, !dbg !45
  %308 = add i32 %296, -127, !dbg !45
  %309 = icmp ult i32 %308, -252, !dbg !45
  br i1 %309, label %315, label %310, !dbg !45

310:                                              ; preds = %__devicelib_imf_exp2f.exit11
  %311 = bitcast float %307 to i32, !dbg !45
  %312 = shl nsw i32 %296, 23, !dbg !45
  %313 = add i32 %312, %311, !dbg !45
  %314 = bitcast i32 %313 to float, !dbg !45
  br label %__devicelib_imf_exp2f.exit, !dbg !45

315:                                              ; preds = %__devicelib_imf_exp2f.exit11
  %316 = tail call float @llvm.fabs.f32(float %158), !dbg !45
  %317 = bitcast float %316 to i32, !dbg !45
  %318 = icmp samesign ugt i32 %317, 2139095039, !dbg !45
  br i1 %318, label %319, label %323, !dbg !45

319:                                              ; preds = %315
  %320 = fcmp oeq float %158, 0xFFF0000000000000, !dbg !45
  %321 = fadd float %158, %158, !dbg !45
  %322 = select i1 %320, float 0.000000e+00, float %321, !dbg !45
  br label %__devicelib_imf_exp2f.exit, !dbg !45

323:                                              ; preds = %315
  %324 = tail call spir_func noundef float @_Z16__spirv_ocl_fminff(float noundef %158, float noundef 1.920000e+02) #7, !dbg !45
  %325 = tail call spir_func noundef float @_Z16__spirv_ocl_fmaxff(float noundef %324, float noundef -1.920000e+02) #7, !dbg !45
  %326 = tail call spir_func noundef float @_Z16__spirv_ocl_rintf(float noundef %325) #7, !dbg !45
  %327 = fptosi float %326 to i32, !dbg !45
  %328 = ashr i32 %327, 1, !dbg !45
  %329 = sub nsw i32 %327, %328, !dbg !45
  %330 = shl i32 %329, 23, !dbg !45
  %331 = add i32 %330, 1065353216, !dbg !45
  %332 = shl i32 %328, 23, !dbg !45
  %333 = add i32 %332, 1065353216, !dbg !45
  %334 = bitcast i32 %331 to float, !dbg !45
  %335 = fmul float %307, %334, !dbg !45
  %336 = bitcast i32 %333 to float, !dbg !45
  %337 = fmul float %335, %336, !dbg !45
  br label %__devicelib_imf_exp2f.exit, !dbg !45

__devicelib_imf_exp2f.exit:                       ; preds = %310, %319, %323
  %338 = phi float [ %337, %323 ], [ %314, %310 ], [ %322, %319 ], !dbg !45
  %339 = fmul float %51, %203, !dbg !46
  %340 = fmul float %52, %248, !dbg !46
  %341 = fmul float %53, %293, !dbg !46
  %342 = fmul float %54, %338, !dbg !46
  %343 = select i1 %27, float %339, float 0.000000e+00, !dbg !47
  %344 = select i1 %27, float %340, float 0.000000e+00, !dbg !47
  %345 = select i1 %27, float %341, float 0.000000e+00, !dbg !47
  %346 = select i1 %27, float %342, float 0.000000e+00, !dbg !47
  tail call spir_func void @_Z7barrierj(i32 1) #6, !dbg !48
  %347 = tail call spir_func float @_Z21sub_group_shuffle_xorfj(float %343, i32 16) #6, !dbg !48
  %348 = fadd float %343, %347, !dbg !52
  %349 = tail call spir_func float @_Z21sub_group_shuffle_xorfj(float %348, i32 8) #6, !dbg !48
  %350 = tail call spir_func float @_Z21sub_group_shuffle_xorfj(float %344, i32 16) #6, !dbg !48
  %351 = fadd float %344, %350, !dbg !52
  %352 = tail call spir_func float @_Z21sub_group_shuffle_xorfj(float %351, i32 8) #6, !dbg !48
  %353 = tail call spir_func float @_Z21sub_group_shuffle_xorfj(float %345, i32 16) #6, !dbg !48
  %354 = fadd float %345, %353, !dbg !52
  %355 = tail call spir_func float @_Z21sub_group_shuffle_xorfj(float %354, i32 8) #6, !dbg !48
  %356 = tail call spir_func float @_Z21sub_group_shuffle_xorfj(float %346, i32 16) #6, !dbg !48
  %357 = fadd float %346, %356, !dbg !52
  %358 = tail call spir_func float @_Z21sub_group_shuffle_xorfj(float %357, i32 8) #6, !dbg !48
  br i1 %79, label %.critedge, label %.critedge8, !dbg !48

.critedge:                                        ; preds = %__devicelib_imf_exp2f.exit
  %359 = fadd float %357, %358, !dbg !52
  %360 = fadd float %354, %355, !dbg !52
  %361 = fadd float %351, %352, !dbg !52
  %362 = fadd float %348, %349, !dbg !52
  store float %362, ptr addrspace(3) %83, align 4, !dbg !48
  store float %361, ptr addrspace(3) %110, align 4, !dbg !48
  store float %360, ptr addrspace(3) %111, align 4, !dbg !48
  store float %359, ptr addrspace(3) %109, align 4, !dbg !48
  br label %.critedge8, !dbg !48

.critedge8:                                       ; preds = %__devicelib_imf_exp2f.exit, %.critedge
  tail call spir_func void @_Z7barrierj(i32 1) #6, !dbg !48
  %363 = load float, ptr addrspace(3) %113, align 4, !dbg !48
  %364 = tail call spir_func float @_Z27__spirv_GroupNonUniformFAddiifj(i32 3, i32 3, float %363, i32 4) #6, !dbg !48
  br i1 %122, label %365, label %366, !dbg !48

365:                                              ; preds = %.critedge8
  store float %364, ptr addrspace(3) %113, align 4, !dbg !48
  br label %366, !dbg !48

366:                                              ; preds = %365, %.critedge8
  tail call spir_func void @_Z7barrierj(i32 1) #6, !dbg !48
  %367 = load float, ptr addrspace(3) %130, align 4, !dbg !48
  %368 = load float, ptr addrspace(3) %132, align 4, !dbg !48
  %369 = load float, ptr addrspace(3) %134, align 4, !dbg !48
  %370 = load float, ptr addrspace(3) %136, align 4, !dbg !48
  tail call spir_func void @_Z7barrierj(i32 1) #6, !dbg !53
  %371 = insertelement <4 x float> poison, float %367, i64 0, !dbg !53
  %372 = insertelement <4 x float> %371, float %368, i64 1, !dbg !53
  %373 = insertelement <4 x float> %372, float %369, i64 2, !dbg !53
  %374 = insertelement <4 x float> %373, float %370, i64 3, !dbg !53
  store <4 x float> %374, ptr addrspace(3) %140, align 16, !dbg !53
  tail call spir_func void @_Z7barrierj(i32 1) #6, !dbg !53
  %375 = icmp eq i32 %16, 0, !dbg !54
  %376 = and i1 %375, %23, !dbg !54
  br i1 %376, label %377, label %.critedge10, !dbg !54

377:                                              ; preds = %366
  %378 = load i32, ptr addrspace(3) %145, align 4, !dbg !53
  %379 = insertelement <1 x i32> poison, i32 %146, i64 0, !dbg !54
  %380 = sext i32 %21 to i64, !dbg !55
  %381 = getelementptr float, ptr addrspace(1) %2, i64 %380, !dbg !55
  store <1 x i32> %379, ptr addrspace(1) %381, align 4, !dbg !54
  %382 = insertelement <1 x i32> poison, i32 %378, i64 0, !dbg !56
  %383 = getelementptr float, ptr addrspace(1) %3, i64 %380, !dbg !57
  store <1 x i32> %382, ptr addrspace(1) %383, align 4, !dbg !56
  br label %.critedge10, !dbg !56

.critedge10:                                      ; preds = %366, %377
  ret void, !dbg !58
}

; Function Attrs: convergent mustprogress nofree nounwind willreturn memory(none)
declare dso_local spir_func noundef float @_Z16__spirv_ocl_rintf(float noundef) local_unnamed_addr #3

; Function Attrs: convergent mustprogress nofree nounwind willreturn memory(none)
declare dso_local spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef, float noundef, float noundef) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #4

; Function Attrs: convergent mustprogress nofree nounwind willreturn memory(none)
declare dso_local spir_func noundef float @_Z16__spirv_ocl_fminff(float noundef, float noundef) local_unnamed_addr #3

; Function Attrs: convergent mustprogress nofree nounwind willreturn memory(none)
declare dso_local spir_func noundef float @_Z16__spirv_ocl_fmaxff(float noundef, float noundef) local_unnamed_addr #3

attributes #0 = { convergent mustprogress nounwind willreturn }
attributes #1 = { mustprogress nofree nosync nounwind willreturn memory(none) }
attributes #2 = { mustprogress nounwind willreturn }
attributes #3 = { convergent mustprogress nofree nounwind willreturn memory(none) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #5 = { nounwind willreturn memory(none) }
attributes #6 = { convergent nounwind willreturn }
attributes #7 = { convergent nounwind willreturn memory(none) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3, !4, !5}
!opencl.spir.version = !{!6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6}
!spirv.Source = !{!7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7}
!llvm.ident = !{!8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "cybxcm2ysqqjeppp4gqjrwzvxkghmjsswnfi5vbuprncjjcw2hqd.py", directory: "/tmp/torchinductor_jovyan/yb")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 1, !"wchar_size", i32 4}
!4 = !{i32 1, !"sycl-device", i32 1}
!5 = !{i32 7, !"frame-pointer", i32 2}
!6 = !{i32 1, i32 2}
!7 = !{i32 3, i32 100000}
!8 = !{!"Intel(R) oneAPI DPC++/C++ Compiler 2025.0.0 (2025.0.0.20241008)"}
!9 = !DISubprogram(name: "_Z27__spirv_GroupNonUniformFAddiifj", linkageName: "_Z27__spirv_GroupNonUniformFAddiifj", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagOptimized)
!10 = !DISubroutineType(cc: DW_CC_normal, types: !11)
!11 = !{}
!12 = !DISubprogram(name: "_Z7barrierj", linkageName: "_Z7barrierj", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagOptimized)
!13 = !DISubprogram(name: "_Z21sub_group_shuffle_xorfj", linkageName: "_Z21sub_group_shuffle_xorfj", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagOptimized)
!14 = !DISubprogram(name: "_Z12get_local_idj", linkageName: "_Z12get_local_idj", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagOptimized)
!15 = !DISubprogram(name: "_Z12get_group_idj", linkageName: "_Z12get_group_idj", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagOptimized)
!16 = distinct !DISubprogram(name: "triton_per_fused__to_copy_add_cat_cos_mul_neg_sin_unsqueeze_6", linkageName: "triton_per_fused__to_copy_add_cat_cos_mul_neg_sin_unsqueeze_6", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!17 = !{i32 32}
!18 = !{i64 128, i64 1, i64 1}
!19 = !DILocation(line: 24, column: 28, scope: !16)
!20 = !DILocation(line: 24, column: 33, scope: !16)
!21 = !DILocation(line: 25, column: 44, scope: !16)
!22 = !DILocation(line: 25, column: 23, scope: !16)
!23 = !DILocation(line: 26, column: 21, scope: !16)
!24 = !DILocation(line: 27, column: 38, scope: !16)
!25 = !DILocation(line: 29, column: 25, scope: !16)
!26 = !DILocation(line: 34, column: 55, scope: !16)
!27 = !DILocation(line: 34, column: 45, scope: !16)
!28 = !DILocation(line: 34, column: 38, scope: !16)
!29 = !DILocation(line: 34, column: 35, scope: !16)
!30 = !DILocation(line: 34, column: 30, scope: !16)
!31 = !DILocation(line: 35, column: 30, scope: !16)
!32 = !DILocation(line: 35, column: 45, scope: !16)
!33 = !DILocation(line: 124, column: 29, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlockFile(scope: !16, file: !35, discriminator: 0)
!35 = !DIFile(filename: "triton_helpers.py", directory: "/home/jovyan/envs/miniforge3/envs/triton/lib/python3.10/site-packages/torch/_inductor/runtime")
!36 = !DILocation(line: 38, column: 37, scope: !16)
!37 = !DILocation(line: 111, column: 15, scope: !34, inlinedAt: !36)
!38 = !DILocation(line: 113, column: 21, scope: !34, inlinedAt: !36)
!39 = !DILocation(line: 113, column: 16, scope: !34, inlinedAt: !36)
!40 = !DILocation(line: 114, column: 29, scope: !34, inlinedAt: !36)
!41 = !DILocation(line: 38, column: 40, scope: !16)
!42 = !DILocation(line: 40, column: 19, scope: !16)
!43 = !DILocation(line: 41, column: 18, scope: !16)
!44 = !DILocation(line: 43, column: 33, scope: !16)
!45 = !DILocation(line: 44, column: 27, scope: !16)
!46 = !DILocation(line: 45, column: 19, scope: !16)
!47 = !DILocation(line: 47, column: 45, scope: !16)
!48 = !DILocation(line: 290, column: 36, scope: !49, inlinedAt: !51)
!49 = distinct !DILexicalBlockFile(scope: !16, file: !50, discriminator: 0)
!50 = !DIFile(filename: "standard.py", directory: "/home/jovyan/intel-xpu-backend-for-triton/python/triton/language")
!51 = !DILocation(line: 48, column: 26, scope: !16)
!52 = !DILocation(line: 260, column: 15, scope: !49, inlinedAt: !51)
!53 = !DILocation(line: 48, column: 29, scope: !16)
!54 = !DILocation(line: 49, column: 36, scope: !16)
!55 = !DILocation(line: 49, column: 25, scope: !16)
!56 = !DILocation(line: 50, column: 37, scope: !16)
!57 = !DILocation(line: 50, column: 25, scope: !16)
!58 = !DILocation(line: 50, column: 4, scope: !16)
