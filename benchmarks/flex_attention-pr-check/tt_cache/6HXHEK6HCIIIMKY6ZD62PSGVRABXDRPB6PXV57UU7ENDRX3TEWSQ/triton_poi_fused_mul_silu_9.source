#loc = loc("/tmp/torchinductor_jovyan/mn/cmnx2qxnd33y57yd7fd4m6ycgqctc2plmp6jx5kvkq4n7vku2aox.py":18:0)
#loc19 = loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":46:0)
module {
  tt.func public @triton_poi_fused_mul_silu_9(%arg0: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_jovyan/mn/cmnx2qxnd33y57yd7fd4m6ycgqctc2plmp6jx5kvkq4n7vku2aox.py":18:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_jovyan/mn/cmnx2qxnd33y57yd7fd4m6ycgqctc2plmp6jx5kvkq4n7vku2aox.py":18:0), %arg2: i32 {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_jovyan/mn/cmnx2qxnd33y57yd7fd4m6ycgqctc2plmp6jx5kvkq4n7vku2aox.py":18:0)) attributes {noinline = false} {
    %c14336_i32 = arith.constant 14336 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %c128_i32 = arith.constant 128 : i32 loc(#loc3)
    %c128_i32_0 = arith.constant 128 : i32 loc(#loc3)
    %1 = arith.muli %0, %c128_i32_0 : i32 loc(#loc3)
    %2 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<128xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<128xi32> loc(#loc5)
    %cst = arith.constant dense<14336> : tensor<128xi32> loc(#loc6)
    %5 = arith.cmpi slt, %4, %cst : tensor<128xi32> loc(#loc6)
    %6 = tt.splat %arg0 : !tt.ptr<bf16> -> tensor<128x!tt.ptr<bf16>> loc(#loc7)
    %7 = tt.addptr %6, %4 : tensor<128x!tt.ptr<bf16>>, tensor<128xi32> loc(#loc7)
    %8 = tt.load %7, %5 : tensor<128x!tt.ptr<bf16>> loc(#loc8)
    %9 = arith.extf %8 : tensor<128xbf16> to tensor<128xf32> loc(#loc9)
    %10 = tt.splat %arg1 : !tt.ptr<bf16> -> tensor<128x!tt.ptr<bf16>> loc(#loc10)
    %11 = tt.addptr %10, %4 : tensor<128x!tt.ptr<bf16>>, tensor<128xi32> loc(#loc10)
    %12 = tt.load %11, %5 : tensor<128x!tt.ptr<bf16>> loc(#loc11)
    %13 = arith.extf %12 : tensor<128xbf16> to tensor<128xf32> loc(#loc12)
    %14 = tt.call @triton.language.standard.sigmoid__fp32S128S__(%9) : (tensor<128xf32>) -> tensor<128xf32> loc(#loc13)
    %15 = arith.mulf %9, %14 : tensor<128xf32> loc(#loc14)
    %16 = arith.mulf %15, %13 : tensor<128xf32> loc(#loc15)
    %17 = tt.splat %arg0 : !tt.ptr<bf16> -> tensor<128x!tt.ptr<bf16>> loc(#loc16)
    %18 = tt.addptr %17, %4 : tensor<128x!tt.ptr<bf16>>, tensor<128xi32> loc(#loc16)
    %19 = arith.truncf %16 : tensor<128xf32> to tensor<128xbf16> loc(#loc17)
    tt.store %18, %19, %5 : tensor<128x!tt.ptr<bf16>> loc(#loc17)
    tt.return loc(#loc18)
  } loc(#loc)
  tt.func private @triton.language.standard.sigmoid__fp32S128S__(%arg0: tensor<128xf32> loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":46:0)) -> tensor<128xf32> attributes {noinline = false} {
    %cst = arith.constant 0.000000e+00 : f32 loc(#loc20)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<128xf32> loc(#loc20)
    %0 = arith.subf %cst_0, %arg0 : tensor<128xf32> loc(#loc20)
    %1 = math.exp %0 : tensor<128xf32> loc(#loc21)
    %c1_i32 = arith.constant 1 : i32 loc(#loc22)
    %cst_1 = arith.constant 1.000000e+00 : f32 loc(#loc22)
    %cst_2 = arith.constant dense<1.000000e+00> : tensor<128xf32> loc(#loc22)
    %2 = arith.addf %cst_2, %1 : tensor<128xf32> loc(#loc22)
    %c1_i32_3 = arith.constant 1 : i32 loc(#loc23)
    %cst_4 = arith.constant 1.000000e+00 : f32 loc(#loc23)
    %cst_5 = arith.constant dense<1.000000e+00> : tensor<128xf32> loc(#loc23)
    %3 = arith.divf %cst_5, %2 : tensor<128xf32> loc(#loc23)
    tt.return %3 : tensor<128xf32> loc(#loc24)
  ^bb1:  // no predecessors
    %4 = ub.poison : tensor<128xf32> loc(#loc25)
    tt.return %4 : tensor<128xf32> loc(#loc25)
  } loc(#loc19)
} loc(#loc)
#loc1 = loc("/tmp/torchinductor_jovyan/mn/cmnx2qxnd33y57yd7fd4m6ycgqctc2plmp6jx5kvkq4n7vku2aox.py":19:13)
#loc2 = loc("/tmp/torchinductor_jovyan/mn/cmnx2qxnd33y57yd7fd4m6ycgqctc2plmp6jx5kvkq4n7vku2aox.py":20:28)
#loc3 = loc("/tmp/torchinductor_jovyan/mn/cmnx2qxnd33y57yd7fd4m6ycgqctc2plmp6jx5kvkq4n7vku2aox.py":20:33)
#loc4 = loc("/tmp/torchinductor_jovyan/mn/cmnx2qxnd33y57yd7fd4m6ycgqctc2plmp6jx5kvkq4n7vku2aox.py":21:36)
#loc5 = loc("/tmp/torchinductor_jovyan/mn/cmnx2qxnd33y57yd7fd4m6ycgqctc2plmp6jx5kvkq4n7vku2aox.py":21:23)
#loc6 = loc("/tmp/torchinductor_jovyan/mn/cmnx2qxnd33y57yd7fd4m6ycgqctc2plmp6jx5kvkq4n7vku2aox.py":22:21)
#loc7 = loc("/tmp/torchinductor_jovyan/mn/cmnx2qxnd33y57yd7fd4m6ycgqctc2plmp6jx5kvkq4n7vku2aox.py":24:34)
#loc8 = loc("/tmp/torchinductor_jovyan/mn/cmnx2qxnd33y57yd7fd4m6ycgqctc2plmp6jx5kvkq4n7vku2aox.py":24:39)
#loc9 = loc("/tmp/torchinductor_jovyan/mn/cmnx2qxnd33y57yd7fd4m6ycgqctc2plmp6jx5kvkq4n7vku2aox.py":24:49)
#loc10 = loc("/tmp/torchinductor_jovyan/mn/cmnx2qxnd33y57yd7fd4m6ycgqctc2plmp6jx5kvkq4n7vku2aox.py":25:30)
#loc11 = loc("/tmp/torchinductor_jovyan/mn/cmnx2qxnd33y57yd7fd4m6ycgqctc2plmp6jx5kvkq4n7vku2aox.py":25:35)
#loc12 = loc("/tmp/torchinductor_jovyan/mn/cmnx2qxnd33y57yd7fd4m6ycgqctc2plmp6jx5kvkq4n7vku2aox.py":25:45)
#loc13 = loc("/tmp/torchinductor_jovyan/mn/cmnx2qxnd33y57yd7fd4m6ycgqctc2plmp6jx5kvkq4n7vku2aox.py":27:22)
#loc14 = loc("/tmp/torchinductor_jovyan/mn/cmnx2qxnd33y57yd7fd4m6ycgqctc2plmp6jx5kvkq4n7vku2aox.py":28:18)
#loc15 = loc("/tmp/torchinductor_jovyan/mn/cmnx2qxnd33y57yd7fd4m6ycgqctc2plmp6jx5kvkq4n7vku2aox.py":30:18)
#loc16 = loc("/tmp/torchinductor_jovyan/mn/cmnx2qxnd33y57yd7fd4m6ycgqctc2plmp6jx5kvkq4n7vku2aox.py":31:28)
#loc17 = loc("/tmp/torchinductor_jovyan/mn/cmnx2qxnd33y57yd7fd4m6ycgqctc2plmp6jx5kvkq4n7vku2aox.py":31:39)
#loc18 = loc("/tmp/torchinductor_jovyan/mn/cmnx2qxnd33y57yd7fd4m6ycgqctc2plmp6jx5kvkq4n7vku2aox.py":31:4)
#loc20 = loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":47:30)
#loc21 = loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":47:29)
#loc22 = loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":47:20)
#loc23 = loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":47:16)
#loc24 = loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":47:11)
#loc25 = loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":47:4)
