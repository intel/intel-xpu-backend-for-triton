; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-n8:16:32:64"
target triple = "spir64-unknown-unknown"

; Function Attrs: convergent mustprogress nounwind willreturn
declare !dbg !9 spir_func float @_Z27__spirv_GroupNonUniformFAddiifj(i32, i32, float, i32) local_unnamed_addr #0

; Function Attrs: convergent mustprogress nounwind willreturn
declare !dbg !12 spir_func void @_Z7barrierj(i32) local_unnamed_addr #0

; Function Attrs: convergent mustprogress nounwind willreturn
declare !dbg !13 spir_func float @_Z21sub_group_shuffle_xorfj(float, i32) local_unnamed_addr #0

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(none)
declare !dbg !14 spir_func i64 @_Z12get_local_idj(i32) local_unnamed_addr #1

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(none)
declare !dbg !15 spir_func i64 @_Z12get_group_idj(i32) local_unnamed_addr #1

; Function Attrs: mustprogress nounwind willreturn
define spir_kernel void @triton_per_fused__to_copy_add_cat_cos_mul_neg_sin_unsqueeze_6(ptr addrspace(1) readonly captures(none) %0, ptr addrspace(1) readonly captures(none) %1, ptr addrspace(1) writeonly captures(none) %2, ptr addrspace(1) writeonly captures(none) %3, i32 %4, i32 %5, ptr addrspace(1) readnone captures(none) %6, ptr addrspace(3) captures(none) %7) local_unnamed_addr #2 !dbg !16 !intel_reqd_sub_group_size !17 !max_work_group_size !18 {
  %9 = tail call spir_func i64 @_Z12get_group_idj(i32 0) #5, !dbg !19
  %10 = trunc i64 %9 to i32, !dbg !19
  %11 = shl i32 %10, 3, !dbg !20
  %12 = tail call spir_func i64 @_Z12get_local_idj(i32 0) #5, !dbg !21
  %13 = trunc i64 %12 to i32, !dbg !21
  %14 = and i32 %13, 63, !dbg !21
  %15 = and i32 %13, 28, !dbg !21
  %16 = lshr i32 %14, 5, !dbg !21
  %17 = shl i32 %13, 1, !dbg !21
  %18 = and i32 %17, 6, !dbg !21
  %19 = and i32 %13, 7, !dbg !21
  %20 = or disjoint i32 %18, %11, !dbg !22
  %21 = or disjoint i32 %19, %11, !dbg !22
  %22 = icmp slt i32 %20, 32, !dbg !23
  %23 = icmp slt i32 %21, 32, !dbg !23
  %24 = lshr i32 %13, 2, !dbg !24
  %25 = and i32 %24, 15, !dbg !24
  %26 = icmp samesign ult i32 %25, 14, !dbg !25
  %27 = and i1 %26, %22, !dbg !26
  br i1 %27, label %28, label %38, !dbg !27

28:                                               ; preds = %8
  %29 = shl nuw nsw i32 %25, 5, !dbg !28
  %30 = add nsw i32 %20, %29, !dbg !29
  %31 = sext i32 %30 to i64, !dbg !30
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !30
  %33 = load float, ptr addrspace(1) %32, align 8, !dbg !27
  %34 = getelementptr inbounds nuw i8, ptr addrspace(1) %32, i64 4, !dbg !27
  %35 = load float, ptr addrspace(1) %34, align 4, !dbg !27
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !31
  %37 = load <2 x float>, ptr addrspace(1) %36, align 8, !dbg !32
  br label %38, !dbg !32

38:                                               ; preds = %8, %28
  %39 = phi float [ %35, %28 ], [ 0.000000e+00, %8 ]
  %40 = phi float [ %33, %28 ], [ 0.000000e+00, %8 ]
  %41 = phi float [ %35, %28 ], [ 0xFFF0000000000000, %8 ], !dbg !32
  %42 = phi float [ %33, %28 ], [ 0xFFF0000000000000, %8 ], !dbg !32
  %bc2 = phi <2 x float> [ %37, %28 ], [ zeroinitializer, %8 ], !dbg !32
  %43 = extractelement <2 x float> %bc2, i64 0, !dbg !32
  %44 = extractelement <2 x float> %bc2, i64 1, !dbg !32
  %45 = tail call spir_func float @_Z21sub_group_shuffle_xorfj(float %42, i32 16) #6, !dbg !33
  %46 = fcmp ogt float %42, %45, !dbg !37
  %47 = fcmp uno float %42, 0.000000e+00, !dbg !38
  %48 = or i1 %47, %46, !dbg !39
  %49 = select i1 %48, float %42, float %45, !dbg !40
  %50 = tail call spir_func float @_Z21sub_group_shuffle_xorfj(float %49, i32 8) #6, !dbg !33
  %51 = fcmp ogt float %49, %50, !dbg !37
  %52 = fcmp uno float %49, 0.000000e+00, !dbg !38
  %53 = or i1 %51, %52, !dbg !39
  %54 = select i1 %53, float %49, float %50, !dbg !40
  %55 = tail call spir_func float @_Z21sub_group_shuffle_xorfj(float %54, i32 4) #6, !dbg !33
  %56 = tail call spir_func float @_Z21sub_group_shuffle_xorfj(float %41, i32 16) #6, !dbg !33
  %57 = fcmp ogt float %41, %56, !dbg !37
  %58 = fcmp uno float %41, 0.000000e+00, !dbg !38
  %59 = or i1 %58, %57, !dbg !39
  %60 = select i1 %59, float %41, float %56, !dbg !40
  %61 = tail call spir_func float @_Z21sub_group_shuffle_xorfj(float %60, i32 8) #6, !dbg !33
  %62 = fcmp ogt float %60, %61, !dbg !37
  %63 = fcmp uno float %60, 0.000000e+00, !dbg !38
  %64 = or i1 %62, %63, !dbg !39
  %65 = select i1 %64, float %60, float %61, !dbg !40
  %66 = tail call spir_func float @_Z21sub_group_shuffle_xorfj(float %65, i32 4) #6, !dbg !33
  %67 = icmp eq i32 %15, 0, !dbg !33
  %68 = shl nuw nsw i32 %18, 1, !dbg !33
  %69 = or disjoint i32 %68, %16, !dbg !33
  %70 = zext nneg i32 %69 to i64, !dbg !33
  %71 = getelementptr float, ptr addrspace(3) %7, i64 %70, !dbg !33
  br i1 %67, label %74, label %72, !dbg !33

72:                                               ; preds = %38
  %73 = getelementptr i8, ptr addrspace(3) %71, i64 8, !dbg !33
  br label %84, !dbg !33

74:                                               ; preds = %38
  %75 = fcmp ogt float %65, %66, !dbg !37
  %76 = fcmp uno float %65, 0.000000e+00, !dbg !38
  %77 = or i1 %75, %76, !dbg !39
  %78 = select i1 %77, float %65, float %66, !dbg !40
  %79 = fcmp ogt float %54, %55, !dbg !37
  %80 = fcmp uno float %54, 0.000000e+00, !dbg !38
  %81 = or i1 %79, %80, !dbg !39
  %82 = select i1 %81, float %54, float %55, !dbg !40
  store float %82, ptr addrspace(3) %71, align 4, !dbg !33
  %83 = getelementptr i8, ptr addrspace(3) %71, i64 8, !dbg !33
  store float %78, ptr addrspace(3) %83, align 4, !dbg !33
  br label %84, !dbg !33

84:                                               ; preds = %72, %74
  %85 = phi ptr addrspace(3) [ %83, %74 ], [ %73, %72 ]
  tail call spir_func void @_Z7barrierj(i32 1) #6, !dbg !33
  %86 = icmp samesign ult i32 %14, 16, !dbg !33
  %87 = and i64 %12, 63, !dbg !33
  %88 = getelementptr float, ptr addrspace(3) %7, i64 %87, !dbg !33
  br i1 %86, label %89, label %91, !dbg !33

89:                                               ; preds = %84
  %90 = load float, ptr addrspace(3) %88, align 4, !dbg !33
  br label %91, !dbg !33

91:                                               ; preds = %89, %84
  %92 = phi float [ %90, %89 ], [ undef, %84 ], !dbg !36
  %93 = tail call spir_func float @_Z21sub_group_shuffle_xorfj(float %92, i32 1) #6, !dbg !33
  %94 = and i32 %13, 1, !dbg !33
  %95 = icmp eq i32 %94, 0, !dbg !33
  %96 = and i1 %86, %95, !dbg !33
  br i1 %96, label %97, label %102, !dbg !33

97:                                               ; preds = %91
  %98 = fcmp ogt float %92, %93, !dbg !37
  %99 = fcmp uno float %92, 0.000000e+00, !dbg !38
  %100 = or i1 %99, %98, !dbg !39
  %101 = select i1 %100, float %92, float %93, !dbg !40
  store float %101, ptr addrspace(3) %88, align 4, !dbg !33
  br label %102, !dbg !33

102:                                              ; preds = %97, %91
  tail call spir_func void @_Z7barrierj(i32 1) #6, !dbg !33
  %103 = zext nneg i32 %68 to i64, !dbg !33
  %104 = getelementptr float, ptr addrspace(3) %7, i64 %103, !dbg !33
  %105 = load float, ptr addrspace(3) %104, align 4, !dbg !33
  %106 = getelementptr i8, ptr addrspace(3) %104, i64 8, !dbg !33
  %107 = load float, ptr addrspace(3) %106, align 4, !dbg !33
  tail call spir_func void @_Z7barrierj(i32 1) #6, !dbg !41
  %108 = and i64 %12, 7, !dbg !41
  %109 = zext nneg i32 %18 to i64, !dbg !41
  %110 = getelementptr inbounds nuw float, ptr addrspace(3) %7, i64 %109, !dbg !41
  %111 = insertelement <2 x float> poison, float %105, i64 0, !dbg !41
  %112 = insertelement <2 x float> %111, float %107, i64 1, !dbg !41
  store <2 x float> %112, ptr addrspace(3) %110, align 8, !dbg !41
  tail call spir_func void @_Z7barrierj(i32 1) #6, !dbg !41
  %113 = getelementptr inbounds nuw float, ptr addrspace(3) %7, i64 %108, !dbg !41
  %114 = load i32, ptr addrspace(3) %113, align 4, !dbg !41
  %115 = fcmp oeq float %105, 0xFFF0000000000000, !dbg !42
  %116 = fcmp oeq float %107, 0xFFF0000000000000, !dbg !42
  %117 = fsub float %40, %105, !dbg !43
  %118 = fsub float %39, %107, !dbg !43
  %119 = select i1 %115, float 0.000000e+00, float %117, !dbg !44
  %120 = select i1 %116, float 0.000000e+00, float %118, !dbg !44
  %121 = tail call spir_func noundef float @_Z16__spirv_ocl_rintf(float noundef %119) #7, !dbg !45
  %122 = fsub float %119, %121, !dbg !45
  %123 = fptosi float %121 to i32, !dbg !45
  %124 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef 0x3F24499000000000, float noundef %122, float noundef 0x3F55F48C60000000) #7, !dbg !45
  %125 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %122, float noundef 5.000000e-01, float noundef 1.000000e+00) #7, !dbg !45
  %126 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %124, float noundef %122, float noundef 0x3F83B29960000000) #7, !dbg !45
  %127 = fadd float %125, -1.000000e+00, !dbg !45
  %128 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %126, float noundef %122, float noundef 0x3FAC6AECC0000000) #7, !dbg !45
  %129 = fneg float %127, !dbg !45
  %130 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %122, float noundef 5.000000e-01, float noundef %129) #7, !dbg !45
  %131 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %128, float noundef %122, float noundef 0x3FCEBFBE20000000) #7, !dbg !45
  %132 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %131, float noundef %122, float noundef 0x3FC8B90C40000000) #7, !dbg !45
  %133 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %132, float noundef %122, float noundef %130) #7, !dbg !45
  %134 = fadd float %125, %133, !dbg !45
  %135 = add i32 %123, -127, !dbg !45
  %136 = icmp ult i32 %135, -252, !dbg !45
  br i1 %136, label %142, label %137, !dbg !45

137:                                              ; preds = %102
  %138 = bitcast float %134 to i32, !dbg !45
  %139 = shl nsw i32 %123, 23, !dbg !45
  %140 = add i32 %139, %138, !dbg !45
  %141 = bitcast i32 %140 to float, !dbg !45
  br label %__devicelib_imf_exp2f.exit5, !dbg !45

142:                                              ; preds = %102
  %143 = tail call float @llvm.fabs.f32(float %119), !dbg !45
  %144 = bitcast float %143 to i32, !dbg !45
  %145 = icmp samesign ugt i32 %144, 2139095039, !dbg !45
  br i1 %145, label %146, label %150, !dbg !45

146:                                              ; preds = %142
  %147 = fcmp oeq float %119, 0xFFF0000000000000, !dbg !45
  %148 = fadd float %119, %119, !dbg !45
  %149 = select i1 %147, float 0.000000e+00, float %148, !dbg !45
  br label %__devicelib_imf_exp2f.exit5, !dbg !45

150:                                              ; preds = %142
  %151 = tail call spir_func noundef float @_Z16__spirv_ocl_fminff(float noundef %119, float noundef 1.920000e+02) #7, !dbg !45
  %152 = tail call spir_func noundef float @_Z16__spirv_ocl_fmaxff(float noundef %151, float noundef -1.920000e+02) #7, !dbg !45
  %153 = tail call spir_func noundef float @_Z16__spirv_ocl_rintf(float noundef %152) #7, !dbg !45
  %154 = fptosi float %153 to i32, !dbg !45
  %155 = ashr i32 %154, 1, !dbg !45
  %156 = sub nsw i32 %154, %155, !dbg !45
  %157 = shl i32 %156, 23, !dbg !45
  %158 = add i32 %157, 1065353216, !dbg !45
  %159 = shl i32 %155, 23, !dbg !45
  %160 = add i32 %159, 1065353216, !dbg !45
  %161 = bitcast i32 %158 to float, !dbg !45
  %162 = fmul float %134, %161, !dbg !45
  %163 = bitcast i32 %160 to float, !dbg !45
  %164 = fmul float %162, %163, !dbg !45
  br label %__devicelib_imf_exp2f.exit5, !dbg !45

__devicelib_imf_exp2f.exit5:                      ; preds = %137, %146, %150
  %165 = phi float [ %164, %150 ], [ %141, %137 ], [ %149, %146 ], !dbg !45
  %166 = tail call spir_func noundef float @_Z16__spirv_ocl_rintf(float noundef %120) #7, !dbg !45
  %167 = fsub float %120, %166, !dbg !45
  %168 = fptosi float %166 to i32, !dbg !45
  %169 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef 0x3F24499000000000, float noundef %167, float noundef 0x3F55F48C60000000) #7, !dbg !45
  %170 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %167, float noundef 5.000000e-01, float noundef 1.000000e+00) #7, !dbg !45
  %171 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %169, float noundef %167, float noundef 0x3F83B29960000000) #7, !dbg !45
  %172 = fadd float %170, -1.000000e+00, !dbg !45
  %173 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %171, float noundef %167, float noundef 0x3FAC6AECC0000000) #7, !dbg !45
  %174 = fneg float %172, !dbg !45
  %175 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %167, float noundef 5.000000e-01, float noundef %174) #7, !dbg !45
  %176 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %173, float noundef %167, float noundef 0x3FCEBFBE20000000) #7, !dbg !45
  %177 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %176, float noundef %167, float noundef 0x3FC8B90C40000000) #7, !dbg !45
  %178 = tail call spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef %177, float noundef %167, float noundef %175) #7, !dbg !45
  %179 = fadd float %170, %178, !dbg !45
  %180 = add i32 %168, -127, !dbg !45
  %181 = icmp ult i32 %180, -252, !dbg !45
  br i1 %181, label %187, label %182, !dbg !45

182:                                              ; preds = %__devicelib_imf_exp2f.exit5
  %183 = bitcast float %179 to i32, !dbg !45
  %184 = shl nsw i32 %168, 23, !dbg !45
  %185 = add i32 %184, %183, !dbg !45
  %186 = bitcast i32 %185 to float, !dbg !45
  br label %__devicelib_imf_exp2f.exit, !dbg !45

187:                                              ; preds = %__devicelib_imf_exp2f.exit5
  %188 = tail call float @llvm.fabs.f32(float %120), !dbg !45
  %189 = bitcast float %188 to i32, !dbg !45
  %190 = icmp samesign ugt i32 %189, 2139095039, !dbg !45
  br i1 %190, label %191, label %195, !dbg !45

191:                                              ; preds = %187
  %192 = fcmp oeq float %120, 0xFFF0000000000000, !dbg !45
  %193 = fadd float %120, %120, !dbg !45
  %194 = select i1 %192, float 0.000000e+00, float %193, !dbg !45
  br label %__devicelib_imf_exp2f.exit, !dbg !45

195:                                              ; preds = %187
  %196 = tail call spir_func noundef float @_Z16__spirv_ocl_fminff(float noundef %120, float noundef 1.920000e+02) #7, !dbg !45
  %197 = tail call spir_func noundef float @_Z16__spirv_ocl_fmaxff(float noundef %196, float noundef -1.920000e+02) #7, !dbg !45
  %198 = tail call spir_func noundef float @_Z16__spirv_ocl_rintf(float noundef %197) #7, !dbg !45
  %199 = fptosi float %198 to i32, !dbg !45
  %200 = ashr i32 %199, 1, !dbg !45
  %201 = sub nsw i32 %199, %200, !dbg !45
  %202 = shl i32 %201, 23, !dbg !45
  %203 = add i32 %202, 1065353216, !dbg !45
  %204 = shl i32 %200, 23, !dbg !45
  %205 = add i32 %204, 1065353216, !dbg !45
  %206 = bitcast i32 %203 to float, !dbg !45
  %207 = fmul float %179, %206, !dbg !45
  %208 = bitcast i32 %205 to float, !dbg !45
  %209 = fmul float %207, %208, !dbg !45
  br label %__devicelib_imf_exp2f.exit, !dbg !45

__devicelib_imf_exp2f.exit:                       ; preds = %182, %191, %195
  %210 = phi float [ %209, %195 ], [ %186, %182 ], [ %194, %191 ], !dbg !45
  %211 = fmul float %43, %165, !dbg !46
  %212 = fmul float %44, %210, !dbg !46
  %213 = select i1 %27, float %211, float 0.000000e+00, !dbg !47
  %214 = select i1 %27, float %212, float 0.000000e+00, !dbg !47
  tail call spir_func void @_Z7barrierj(i32 1) #6, !dbg !48
  %215 = tail call spir_func float @_Z21sub_group_shuffle_xorfj(float %213, i32 16) #6, !dbg !48
  %216 = fadd float %213, %215, !dbg !52
  %217 = tail call spir_func float @_Z21sub_group_shuffle_xorfj(float %216, i32 8) #6, !dbg !48
  %218 = fadd float %216, %217, !dbg !52
  %219 = tail call spir_func float @_Z21sub_group_shuffle_xorfj(float %218, i32 4) #6, !dbg !48
  %220 = tail call spir_func float @_Z21sub_group_shuffle_xorfj(float %214, i32 16) #6, !dbg !48
  %221 = fadd float %214, %220, !dbg !52
  %222 = tail call spir_func float @_Z21sub_group_shuffle_xorfj(float %221, i32 8) #6, !dbg !48
  %223 = fadd float %221, %222, !dbg !52
  %224 = tail call spir_func float @_Z21sub_group_shuffle_xorfj(float %223, i32 4) #6, !dbg !48
  br i1 %67, label %225, label %.critedge, !dbg !48

225:                                              ; preds = %__devicelib_imf_exp2f.exit
  %226 = fadd float %223, %224, !dbg !52
  %227 = fadd float %218, %219, !dbg !52
  store float %227, ptr addrspace(3) %71, align 4, !dbg !48
  store float %226, ptr addrspace(3) %85, align 4, !dbg !48
  br label %.critedge, !dbg !48

.critedge:                                        ; preds = %__devicelib_imf_exp2f.exit, %225
  tail call spir_func void @_Z7barrierj(i32 1) #6, !dbg !48
  br i1 %86, label %228, label %230, !dbg !48

228:                                              ; preds = %.critedge
  %229 = load float, ptr addrspace(3) %88, align 4, !dbg !48
  br label %230, !dbg !48

230:                                              ; preds = %228, %.critedge
  %231 = phi float [ %229, %228 ], [ undef, %.critedge ], !dbg !51
  %232 = tail call spir_func float @_Z27__spirv_GroupNonUniformFAddiifj(i32 3, i32 3, float %231, i32 2) #6, !dbg !48
  br i1 %96, label %233, label %234, !dbg !48

233:                                              ; preds = %230
  store float %232, ptr addrspace(3) %88, align 4, !dbg !48
  br label %234, !dbg !48

234:                                              ; preds = %233, %230
  tail call spir_func void @_Z7barrierj(i32 1) #6, !dbg !48
  %235 = load float, ptr addrspace(3) %104, align 4, !dbg !48
  %236 = load float, ptr addrspace(3) %106, align 4, !dbg !48
  tail call spir_func void @_Z7barrierj(i32 1) #6, !dbg !53
  %237 = insertelement <2 x float> poison, float %235, i64 0, !dbg !53
  %238 = insertelement <2 x float> %237, float %236, i64 1, !dbg !53
  store <2 x float> %238, ptr addrspace(3) %110, align 8, !dbg !53
  tail call spir_func void @_Z7barrierj(i32 1) #6, !dbg !53
  %239 = and i32 %13, 24, !dbg !54
  %240 = icmp eq i32 %239, 0, !dbg !54
  %241 = icmp samesign ult i32 %14, 32, !dbg !54
  %242 = and i1 %240, %241, !dbg !54
  %243 = and i1 %242, %23, !dbg !54
  br i1 %243, label %244, label %.critedge4, !dbg !54

244:                                              ; preds = %234
  %245 = load i32, ptr addrspace(3) %113, align 4, !dbg !53
  %246 = insertelement <1 x i32> poison, i32 %114, i64 0, !dbg !54
  %247 = sext i32 %21 to i64, !dbg !55
  %248 = getelementptr float, ptr addrspace(1) %2, i64 %247, !dbg !55
  store <1 x i32> %246, ptr addrspace(1) %248, align 4, !dbg !54
  %249 = insertelement <1 x i32> poison, i32 %245, i64 0, !dbg !56
  %250 = getelementptr float, ptr addrspace(1) %3, i64 %247, !dbg !57
  store <1 x i32> %249, ptr addrspace(1) %250, align 4, !dbg !56
  br label %.critedge4, !dbg !56

.critedge4:                                       ; preds = %234, %244
  ret void, !dbg !58
}

; Function Attrs: convergent mustprogress nofree nounwind willreturn memory(none)
declare dso_local spir_func noundef float @_Z16__spirv_ocl_rintf(float noundef) local_unnamed_addr #3

; Function Attrs: convergent mustprogress nofree nounwind willreturn memory(none)
declare dso_local spir_func noundef float @_Z15__spirv_ocl_fmafff(float noundef, float noundef, float noundef) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #4

; Function Attrs: convergent mustprogress nofree nounwind willreturn memory(none)
declare dso_local spir_func noundef float @_Z16__spirv_ocl_fminff(float noundef, float noundef) local_unnamed_addr #3

; Function Attrs: convergent mustprogress nofree nounwind willreturn memory(none)
declare dso_local spir_func noundef float @_Z16__spirv_ocl_fmaxff(float noundef, float noundef) local_unnamed_addr #3

attributes #0 = { convergent mustprogress nounwind willreturn }
attributes #1 = { mustprogress nofree nosync nounwind willreturn memory(none) }
attributes #2 = { mustprogress nounwind willreturn }
attributes #3 = { convergent mustprogress nofree nounwind willreturn memory(none) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #5 = { nounwind willreturn memory(none) }
attributes #6 = { convergent nounwind willreturn }
attributes #7 = { convergent nounwind willreturn memory(none) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3, !4, !5}
!opencl.spir.version = !{!6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6}
!spirv.Source = !{!7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7}
!llvm.ident = !{!8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "cybxcm2ysqqjeppp4gqjrwzvxkghmjsswnfi5vbuprncjjcw2hqd.py", directory: "/tmp/torchinductor_jovyan/yb")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 1, !"wchar_size", i32 4}
!4 = !{i32 1, !"sycl-device", i32 1}
!5 = !{i32 7, !"frame-pointer", i32 2}
!6 = !{i32 1, i32 2}
!7 = !{i32 3, i32 100000}
!8 = !{!"Intel(R) oneAPI DPC++/C++ Compiler 2025.0.0 (2025.0.0.20241008)"}
!9 = !DISubprogram(name: "_Z27__spirv_GroupNonUniformFAddiifj", linkageName: "_Z27__spirv_GroupNonUniformFAddiifj", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagOptimized)
!10 = !DISubroutineType(cc: DW_CC_normal, types: !11)
!11 = !{}
!12 = !DISubprogram(name: "_Z7barrierj", linkageName: "_Z7barrierj", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagOptimized)
!13 = !DISubprogram(name: "_Z21sub_group_shuffle_xorfj", linkageName: "_Z21sub_group_shuffle_xorfj", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagOptimized)
!14 = !DISubprogram(name: "_Z12get_local_idj", linkageName: "_Z12get_local_idj", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagOptimized)
!15 = !DISubprogram(name: "_Z12get_group_idj", linkageName: "_Z12get_group_idj", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagOptimized)
!16 = distinct !DISubprogram(name: "triton_per_fused__to_copy_add_cat_cos_mul_neg_sin_unsqueeze_6", linkageName: "triton_per_fused__to_copy_add_cat_cos_mul_neg_sin_unsqueeze_6", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!17 = !{i32 32}
!18 = !{i64 64, i64 1, i64 1}
!19 = !DILocation(line: 24, column: 28, scope: !16)
!20 = !DILocation(line: 24, column: 33, scope: !16)
!21 = !DILocation(line: 25, column: 44, scope: !16)
!22 = !DILocation(line: 25, column: 23, scope: !16)
!23 = !DILocation(line: 26, column: 21, scope: !16)
!24 = !DILocation(line: 27, column: 38, scope: !16)
!25 = !DILocation(line: 29, column: 25, scope: !16)
!26 = !DILocation(line: 34, column: 55, scope: !16)
!27 = !DILocation(line: 34, column: 45, scope: !16)
!28 = !DILocation(line: 34, column: 38, scope: !16)
!29 = !DILocation(line: 34, column: 35, scope: !16)
!30 = !DILocation(line: 34, column: 30, scope: !16)
!31 = !DILocation(line: 35, column: 30, scope: !16)
!32 = !DILocation(line: 35, column: 45, scope: !16)
!33 = !DILocation(line: 124, column: 29, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlockFile(scope: !16, file: !35, discriminator: 0)
!35 = !DIFile(filename: "triton_helpers.py", directory: "/home/jovyan/envs/miniforge3/envs/triton/lib/python3.10/site-packages/torch/_inductor/runtime")
!36 = !DILocation(line: 38, column: 37, scope: !16)
!37 = !DILocation(line: 111, column: 15, scope: !34, inlinedAt: !36)
!38 = !DILocation(line: 113, column: 21, scope: !34, inlinedAt: !36)
!39 = !DILocation(line: 113, column: 16, scope: !34, inlinedAt: !36)
!40 = !DILocation(line: 114, column: 29, scope: !34, inlinedAt: !36)
!41 = !DILocation(line: 38, column: 40, scope: !16)
!42 = !DILocation(line: 40, column: 19, scope: !16)
!43 = !DILocation(line: 41, column: 18, scope: !16)
!44 = !DILocation(line: 43, column: 33, scope: !16)
!45 = !DILocation(line: 44, column: 27, scope: !16)
!46 = !DILocation(line: 45, column: 19, scope: !16)
!47 = !DILocation(line: 47, column: 45, scope: !16)
!48 = !DILocation(line: 290, column: 36, scope: !49, inlinedAt: !51)
!49 = distinct !DILexicalBlockFile(scope: !16, file: !50, discriminator: 0)
!50 = !DIFile(filename: "standard.py", directory: "/home/jovyan/intel-xpu-backend-for-triton/python/triton/language")
!51 = !DILocation(line: 48, column: 26, scope: !16)
!52 = !DILocation(line: 260, column: 15, scope: !49, inlinedAt: !51)
!53 = !DILocation(line: 48, column: 29, scope: !16)
!54 = !DILocation(line: 49, column: 36, scope: !16)
!55 = !DILocation(line: 49, column: 25, scope: !16)
!56 = !DILocation(line: 50, column: 37, scope: !16)
!57 = !DILocation(line: 50, column: 25, scope: !16)
!58 = !DILocation(line: 50, column: 4, scope: !16)
