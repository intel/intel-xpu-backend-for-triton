; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-n8:16:32:64"
target triple = "spir64-unknown-unknown"

@assertFunc_ = internal addrspace(1) constant [8 x i8] c"unknown\00"
@assertFile_ = internal addrspace(1) constant [85 x i8] c"/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py\00"
@assertMessage_ = internal addrspace(1) constant [114 x i8] c"index out of bounds: 0 <= tl.where(ks4 + r0_2 + ks0*x0 < 0, ks4 + ks5 + r0_2 + ks0*x0, ks4 + r0_2 + ks0*x0) < ks5\00"
@__spirv_BuiltInGlobalInvocationId = external dso_local local_unnamed_addr addrspace(1) constant <3 x i64>, align 32
@__spirv_BuiltInLocalInvocationId = external dso_local local_unnamed_addr addrspace(1) constant <3 x i64>, align 32

; Function Attrs: convergent mustprogress nounwind willreturn
declare !dbg !9 spir_func i64 @_Z27__spirv_GroupNonUniformIAddiimj(i32, i32, i64, i32) local_unnamed_addr #0

; Function Attrs: convergent mustprogress nounwind willreturn
declare !dbg !12 spir_func void @_Z7barrierj(i32) local_unnamed_addr #0

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(none)
declare !dbg !13 spir_func i64 @_Z12get_local_idj(i32) local_unnamed_addr #1

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(none)
declare !dbg !14 spir_func i64 @_Z12get_group_idj(i32) local_unnamed_addr #1

; Function Attrs: nounwind
define spir_kernel void @triton_red_fused__to_copy_add_arange_bitwise_and_constant_pad_nd_eq_gt_index_le_lt_permute_sum_view_1(ptr addrspace(1) readonly captures(none) %0, ptr addrspace(1) readonly captures(none) %1, ptr addrspace(1) writeonly captures(none) %2, ptr addrspace(1) writeonly captures(none) %3, i64 %4, i64 %5, i64 %6, i64 %7, i64 %8, i64 %9, i32 %10, i32 %11, ptr addrspace(1) readnone captures(none) %12, ptr addrspace(3) captures(none) %13) local_unnamed_addr #2 !dbg !15 !intel_reqd_sub_group_size !16 !max_work_group_size !17 {
  %15 = tail call spir_func i64 @_Z12get_group_idj(i32 0) #4, !dbg !18
  %16 = trunc i64 %15 to i32, !dbg !18
  %17 = shl i32 %16, 6, !dbg !19
  %18 = tail call spir_func i64 @_Z12get_local_idj(i32 0) #4, !dbg !20
  %19 = trunc i64 %18 to i32, !dbg !20
  %20 = lshr i32 %19, 2, !dbg !20
  %21 = and i32 %20, 63, !dbg !20
  %22 = and i32 %19, 63, !dbg !20
  %23 = or disjoint i32 %21, %17, !dbg !21
  %24 = or disjoint i32 %22, %17, !dbg !21
  %25 = icmp slt i32 %23, %10, !dbg !22
  %26 = icmp slt i32 %24, %10, !dbg !22
  %27 = and i32 %19, 3, !dbg !23
  %28 = sext i32 %23 to i64, !dbg !24
  %.frozen = freeze i64 %28, !dbg !24
  %.frozen14 = freeze i64 %5, !dbg !24
  %29 = sdiv i64 %.frozen, %.frozen14, !dbg !24
  %30 = mul i64 %29, %.frozen14, !dbg !25
  %.decomposed = sub i64 %.frozen, %30, !dbg !25
  %31 = icmp slt i64 %4, 0, !dbg !26
  %32 = mul i64 %29, %4, !dbg !30
  %33 = mul i64 %.decomposed, %4, !dbg !31
  %34 = icmp sgt i32 %11, 0, !dbg !32
  br i1 %34, label %.lr.ph, label %._crit_edge, !dbg !32

.lr.ph:                                           ; preds = %14
  %35 = add i64 %33, %8
  %36 = add i64 %35, %9
  %37 = load i64, ptr addrspace(1) @__spirv_BuiltInGlobalInvocationId, align 32
  %38 = load i64, ptr addrspace(1) getelementptr inbounds nuw (i8, ptr addrspace(1) @__spirv_BuiltInGlobalInvocationId, i64 8), align 8
  %39 = load i64, ptr addrspace(1) getelementptr inbounds nuw (i8, ptr addrspace(1) @__spirv_BuiltInGlobalInvocationId, i64 16), align 16
  %40 = load i64, ptr addrspace(1) @__spirv_BuiltInLocalInvocationId, align 32
  %41 = load i64, ptr addrspace(1) getelementptr inbounds nuw (i8, ptr addrspace(1) @__spirv_BuiltInLocalInvocationId, i64 8), align 8
  %42 = load i64, ptr addrspace(1) getelementptr inbounds nuw (i8, ptr addrspace(1) @__spirv_BuiltInLocalInvocationId, i64 16), align 16
  br label %43, !dbg !32

43:                                               ; preds = %.lr.ph, %78
  %44 = phi i64 [ 0, %.lr.ph ], [ %84, %78 ]
  %45 = phi i32 [ 0, %.lr.ph ], [ %85, %78 ]
  %46 = or disjoint i32 %45, %27, !dbg !33
  %47 = icmp slt i32 %46, %11, !dbg !34
  %48 = sext i32 %46 to i64, !dbg !35
  %.frozen15 = freeze i64 %48, !dbg !35
  %.frozen16 = freeze i64 %4, !dbg !35
  %49 = sdiv i64 %.frozen15, %.frozen16, !dbg !35
  %50 = mul i64 %49, %.frozen16, !dbg !36
  %.decomposed17 = sub i64 %.frozen15, %50, !dbg !36
  %.not = icmp ne i64 %.decomposed17, 0, !dbg !37
  %51 = icmp slt i32 %45, 0, !dbg !38
  %52 = xor i1 %31, %51, !dbg !39
  %narrow = and i1 %52, %.not, !dbg !40
  %53 = sext i1 %narrow to i64, !dbg !40
  %54 = add i64 %49, %32, !dbg !40
  %55 = add i64 %54, %53, !dbg !41
  %56 = icmp slt i64 %55, %6, !dbg !42
  %57 = add i64 %.decomposed17, %33, !dbg !43
  %58 = icmp slt i64 %57, %7, !dbg !44
  %59 = and i1 %58, %56, !dbg !45
  %60 = load i64, ptr addrspace(1) %0, align 8, !dbg !46
  %61 = select i1 %59, i64 %60, i64 0, !dbg !47
  %62 = add i64 %61, %55, !dbg !48
  %63 = add i64 %35, %.decomposed17, !dbg !49
  %64 = icmp sle i64 %63, %62, !dbg !50
  %65 = icmp slt i64 %63, 0, !dbg !51
  %66 = add i64 %36, %.decomposed17, !dbg !52
  %67 = select i1 %65, i64 %66, i64 %63, !dbg !53
  %68 = icmp slt i64 %67, 0, !dbg !54
  %69 = icmp sge i64 %67, %9, !dbg !55
  %.not7 = or i1 %68, %69, !dbg !56
  %70 = and i1 %47, %59, !dbg !56
  %71 = and i1 %25, %70, !dbg !57
  %.not4 = and i1 %.not7, %71, !dbg !58
  br i1 %.not4, label %72, label %73, !dbg !58

72:                                               ; preds = %43
  tail call spir_func void @__devicelib_assert_fail(ptr addrspace(4) noundef addrspacecast (ptr addrspace(1) @assertMessage_ to ptr addrspace(4)), ptr addrspace(4) noundef addrspacecast (ptr addrspace(1) @assertFile_ to ptr addrspace(4)), i32 noundef 53, ptr addrspace(4) noundef addrspacecast (ptr addrspace(1) @assertFunc_ to ptr addrspace(4)), i64 noundef %37, i64 noundef %38, i64 noundef %39, i64 noundef %40, i64 noundef %41, i64 noundef %42) #5, !dbg !58
  br label %73, !dbg !58

73:                                               ; preds = %72, %43
  tail call spir_func void @_Z7barrierj(i32 1) #6, !dbg !58
  br i1 %71, label %74, label %78, !dbg !59

74:                                               ; preds = %73
  %75 = getelementptr i1, ptr addrspace(1) %1, i64 %67, !dbg !60
  %76 = load i8, ptr addrspace(1) %75, align 1, !dbg !59
  %77 = icmp ne i8 %76, 0, !dbg !59
  br label %78, !dbg !59

78:                                               ; preds = %74, %73
  %79 = phi i1 [ %77, %74 ], [ false, %73 ], !dbg !59
  %80 = and i1 %64, %79, !dbg !61
  %81 = and i1 %25, %47, !dbg !62
  %82 = and i1 %81, %59, !dbg !63
  %narrow8 = select i1 %82, i1 %80, i1 false, !dbg !63
  %83 = zext i1 %narrow8 to i64, !dbg !63
  %84 = add i64 %44, %83, !dbg !63
  %85 = add i32 %45, 4, !dbg !32
  %86 = icmp slt i32 %85, %11, !dbg !32
  br i1 %86, label %43, label %._crit_edge, !dbg !32

._crit_edge:                                      ; preds = %78, %14
  %.lcssa = phi i64 [ 0, %14 ], [ %84, %78 ], !dbg !64
  %87 = tail call spir_func i64 @_Z27__spirv_GroupNonUniformIAddiimj(i32 3, i32 3, i64 %.lcssa, i32 4) #6, !dbg !65
  %88 = icmp sgt i64 %87, 0, !dbg !69
  %89 = mul i64 %4, %4, !dbg !70
  %90 = icmp slt i64 %87, %89, !dbg !71
  %91 = and i1 %88, %90, !dbg !72
  %92 = zext i1 %91 to i8, !dbg !73
  %93 = lshr i64 %18, 1, !dbg !73
  %94 = and i64 %93, 126, !dbg !73
  %95 = getelementptr inbounds nuw i8, ptr addrspace(3) %13, i64 %94, !dbg !73
  %96 = insertelement <1 x i8> poison, i8 %92, i64 0, !dbg !73
  store <1 x i8> %96, ptr addrspace(3) %95, align 1, !dbg !73
  tail call spir_func void @_Z7barrierj(i32 1) #6, !dbg !73
  %97 = shl i64 %18, 1, !dbg !73
  %98 = and i64 %97, 126, !dbg !73
  %99 = getelementptr inbounds nuw i8, ptr addrspace(3) %13, i64 %98, !dbg !73
  %100 = load <1 x i8>, ptr addrspace(3) %99, align 1, !dbg !73
  %101 = icmp eq i64 %87, %89, !dbg !74
  tail call spir_func void @_Z7barrierj(i32 1) #6, !dbg !73
  %102 = zext i1 %101 to i8, !dbg !73
  %103 = insertelement <1 x i8> poison, i8 %102, i64 0, !dbg !73
  store <1 x i8> %103, ptr addrspace(3) %95, align 1, !dbg !73
  tail call spir_func void @_Z7barrierj(i32 1) #6, !dbg !73
  %104 = and i32 %19, 192, !dbg !75
  %105 = icmp eq i32 %104, 0, !dbg !75
  %106 = and i1 %105, %26, !dbg !75
  br i1 %106, label %107, label %.critedge, !dbg !75

107:                                              ; preds = %._crit_edge
  %108 = load i8, ptr addrspace(3) %99, align 1, !dbg !73
  %109 = icmp ne i8 %108, 0, !dbg !73
  %110 = zext i1 %109 to i32, !dbg !73
  %111 = extractelement <1 x i8> %100, i64 0, !dbg !73
  %112 = icmp ne i8 %111, 0, !dbg !73
  %113 = zext i1 %112 to i32, !dbg !73
  %114 = insertelement <1 x i32> poison, i32 %113, i64 0, !dbg !75
  %115 = sext i32 %24 to i64, !dbg !76
  %116 = getelementptr i32, ptr addrspace(1) %2, i64 %115, !dbg !76
  store <1 x i32> %114, ptr addrspace(1) %116, align 4, !dbg !75
  %117 = insertelement <1 x i32> poison, i32 %110, i64 0, !dbg !77
  %118 = getelementptr i32, ptr addrspace(1) %3, i64 %115, !dbg !78
  store <1 x i32> %117, ptr addrspace(1) %118, align 4, !dbg !77
  br label %.critedge, !dbg !77

.critedge:                                        ; preds = %._crit_edge, %107
  ret void, !dbg !79
}

; Function Attrs: convergent mustprogress norecurse nounwind
declare extern_weak dso_local spir_func void @__devicelib_assert_fail(ptr addrspace(4) noundef, ptr addrspace(4) noundef, i32 noundef, ptr addrspace(4) noundef, i64 noundef, i64 noundef, i64 noundef, i64 noundef, i64 noundef, i64 noundef) local_unnamed_addr #3

attributes #0 = { convergent mustprogress nounwind willreturn }
attributes #1 = { mustprogress nofree nosync nounwind willreturn memory(none) }
attributes #2 = { nounwind }
attributes #3 = { convergent mustprogress norecurse nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "sycl-module-id"="/netbatch/donb74095_00/dir/workspace/NIT/xmain-rel/LX/xmainefi2linux_release/ws/icsws/llvm/libdevice/fallback-cassert.cpp" "sycl-optlevel"="2" }
attributes #4 = { nounwind willreturn memory(none) }
attributes #5 = { convergent nounwind }
attributes #6 = { convergent nounwind willreturn }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3, !4, !5}
!opencl.spir.version = !{!6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6}
!spirv.Source = !{!7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7}
!llvm.ident = !{!8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py", directory: "/tmp/torchinductor_jovyan/xy")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 1, !"wchar_size", i32 4}
!4 = !{i32 1, !"sycl-device", i32 1}
!5 = !{i32 7, !"frame-pointer", i32 2}
!6 = !{i32 1, i32 2}
!7 = !{i32 3, i32 100000}
!8 = !{!"Intel(R) oneAPI DPC++/C++ Compiler 2025.0.0 (2025.0.0.20241008)"}
!9 = !DISubprogram(name: "_Z27__spirv_GroupNonUniformIAddiimj", linkageName: "_Z27__spirv_GroupNonUniformIAddiimj", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagOptimized)
!10 = !DISubroutineType(cc: DW_CC_normal, types: !11)
!11 = !{}
!12 = !DISubprogram(name: "_Z7barrierj", linkageName: "_Z7barrierj", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagOptimized)
!13 = !DISubprogram(name: "_Z12get_local_idj", linkageName: "_Z12get_local_idj", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagOptimized)
!14 = !DISubprogram(name: "_Z12get_group_idj", linkageName: "_Z12get_group_idj", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagOptimized)
!15 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_arange_bitwise_and_constant_pad_nd_eq_gt_index_le_lt_permute_sum_view_1", linkageName: "triton_red_fused__to_copy_add_arange_bitwise_and_constant_pad_nd_eq_gt_index_le_lt_permute_sum_view_1", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!16 = !{i32 32}
!17 = !{i64 256, i64 1, i64 1}
!18 = !DILocation(line: 21, column: 28, scope: !15)
!19 = !DILocation(line: 21, column: 33, scope: !15)
!20 = !DILocation(line: 22, column: 44, scope: !15)
!21 = !DILocation(line: 22, column: 23, scope: !15)
!22 = !DILocation(line: 23, column: 21, scope: !15)
!23 = !DILocation(line: 24, column: 37, scope: !15)
!24 = !DILocation(line: 26, column: 19, scope: !15)
!25 = !DILocation(line: 27, column: 19, scope: !15)
!26 = !DILocation(line: 76, column: 36, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !15, file: !28, discriminator: 0)
!28 = !DIFile(filename: "triton_helpers.py", directory: "/home/jovyan/envs/miniforge3/envs/triton/lib/python3.10/site-packages/torch/_inductor/runtime")
!29 = !DILocation(line: 35, column: 59, scope: !15)
!30 = !DILocation(line: 37, column: 26, scope: !15)
!31 = !DILocation(line: 40, column: 26, scope: !15)
!32 = !DILocation(line: 30, column: 40, scope: !15)
!33 = !DILocation(line: 31, column: 31, scope: !15)
!34 = !DILocation(line: 32, column: 29, scope: !15)
!35 = !DILocation(line: 73, column: 16, scope: !27, inlinedAt: !29)
!36 = !DILocation(line: 74, column: 20, scope: !27, inlinedAt: !29)
!37 = !DILocation(line: 75, column: 34, scope: !27, inlinedAt: !29)
!38 = !DILocation(line: 76, column: 25, scope: !27, inlinedAt: !29)
!39 = !DILocation(line: 76, column: 32, scope: !27, inlinedAt: !29)
!40 = !DILocation(line: 76, column: 47, scope: !27, inlinedAt: !29)
!41 = !DILocation(line: 37, column: 22, scope: !15)
!42 = !DILocation(line: 39, column: 22, scope: !15)
!43 = !DILocation(line: 40, column: 22, scope: !15)
!44 = !DILocation(line: 42, column: 22, scope: !15)
!45 = !DILocation(line: 43, column: 22, scope: !15)
!46 = !DILocation(line: 44, column: 23, scope: !15)
!47 = !DILocation(line: 46, column: 36, scope: !15)
!48 = !DILocation(line: 48, column: 24, scope: !15)
!49 = !DILocation(line: 49, column: 29, scope: !15)
!50 = !DILocation(line: 50, column: 25, scope: !15)
!51 = !DILocation(line: 53, column: 63, scope: !15)
!52 = !DILocation(line: 53, column: 85, scope: !15)
!53 = !DILocation(line: 53, column: 93, scope: !15)
!54 = !DILocation(line: 53, column: 32, scope: !15)
!55 = !DILocation(line: 53, column: 202, scope: !15)
!56 = !DILocation(line: 53, column: 222, scope: !15)
!57 = !DILocation(line: 53, column: 229, scope: !15)
!58 = !DILocation(line: 53, column: 237, scope: !15)
!59 = !DILocation(line: 54, column: 119, scope: !15)
!60 = !DILocation(line: 54, column: 35, scope: !15)
!61 = !DILocation(line: 55, column: 24, scope: !15)
!62 = !DILocation(line: 61, column: 36, scope: !15)
!63 = !DILocation(line: 61, column: 50, scope: !15)
!64 = !DILocation(line: 28, column: 44, scope: !15)
!65 = !DILocation(line: 290, column: 36, scope: !66, inlinedAt: !68)
!66 = distinct !DILexicalBlockFile(scope: !15, file: !67, discriminator: 0)
!67 = !DIFile(filename: "standard.py", directory: "/home/jovyan/intel-xpu-backend-for-triton/python/triton/language")
!68 = !DILocation(line: 62, column: 27, scope: !15)
!69 = !DILocation(line: 64, column: 20, scope: !15)
!70 = !DILocation(line: 65, column: 16, scope: !15)
!71 = !DILocation(line: 66, column: 20, scope: !15)
!72 = !DILocation(line: 67, column: 20, scope: !15)
!73 = !DILocation(line: 0, scope: !15)
!74 = !DILocation(line: 70, column: 21, scope: !15)
!75 = !DILocation(line: 73, column: 37, scope: !15)
!76 = !DILocation(line: 73, column: 25, scope: !15)
!77 = !DILocation(line: 74, column: 37, scope: !15)
!78 = !DILocation(line: 74, column: 25, scope: !15)
!79 = !DILocation(line: 74, column: 4, scope: !15)
