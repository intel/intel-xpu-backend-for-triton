#loc = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":18:0)
#loc110 = loc("/home/jovyan/envs/miniforge3/envs/triton/lib/python3.10/site-packages/torch/_inductor/runtime/triton_helpers.py":70:0)
#loc122 = loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":284:0)
#loc124 = loc(unknown)
#loc127 = loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":259:0)
module {
  tt.func public @triton_red_fused__to_copy_add_arange_bitwise_and_constant_pad_nd_eq_gt_index_le_lt_permute_sum_view_1(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":18:0), %arg1: !tt.ptr<i1> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":18:0), %arg2: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":18:0), %arg3: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":18:0), %arg4: i64 loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":18:0), %arg5: i64 loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":18:0), %arg6: i64 loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":18:0), %arg7: i64 loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":18:0), %arg8: i64 loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":18:0), %arg9: i64 loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":18:0), %arg10: i32 loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":18:0), %arg11: i32 loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":18:0)) attributes {noinline = false} {
    %0 = tt.get_program_id x : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc2)
    %c64_i32_0 = arith.constant 64 : i32 loc(#loc2)
    %1 = arith.muli %0, %c64_i32_0 : i32 loc(#loc2)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc3)
    %3 = tt.expand_dims %2 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc4)
    %4 = tt.splat %1 : i32 -> tensor<64x1xi32> loc(#loc5)
    %5 = arith.addi %4, %3 : tensor<64x1xi32> loc(#loc5)
    %6 = tt.splat %arg10 : i32 -> tensor<64x1xi32> loc(#loc6)
    %7 = arith.cmpi slt, %5, %6 : tensor<64x1xi32> loc(#loc6)
    %8 = tt.make_range {end = 4 : i32, start = 0 : i32} : tensor<4xi32> loc(#loc7)
    %9 = tt.expand_dims %8 {axis = 0 : i32} : tensor<4xi32> -> tensor<1x4xi32> loc(#loc8)
    %10 = arith.extsi %5 : tensor<64x1xi32> to tensor<64x1xi64> loc(#loc9)
    %11 = tt.splat %arg5 : i64 -> tensor<64x1xi64> loc(#loc9)
    %12 = arith.divsi %10, %11 : tensor<64x1xi64> loc(#loc9)
    %13 = arith.extsi %5 : tensor<64x1xi32> to tensor<64x1xi64> loc(#loc10)
    %14 = tt.splat %arg5 : i64 -> tensor<64x1xi64> loc(#loc10)
    %15 = arith.remsi %13, %14 : tensor<64x1xi64> loc(#loc10)
    %c0_i64 = arith.constant 0 : i64 loc(#loc11)
    %cst = arith.constant dense<0> : tensor<64x4xi64> loc(#loc11)
    %c0_i32 = arith.constant 0 : i32 loc(#loc12)
    %c4_i32 = arith.constant 4 : i32 loc(#loc12)
    %16 = arith.bitcast %c0_i32 : i32 to i32 loc(#loc12)
    %17 = arith.bitcast %arg11 : i32 to i32 loc(#loc12)
    %18 = arith.bitcast %c4_i32 : i32 to i32 loc(#loc12)
    %19 = ub.poison : i32 loc(#loc12)
    %20 = scf.for %arg12 = %16 to %17 step %18 iter_args(%arg13 = %cst) -> (tensor<64x4xi64>)  : i32 {
      %38 = tt.splat %arg12 : i32 -> tensor<1x4xi32> loc(#loc13)
      %39 = arith.addi %38, %9 : tensor<1x4xi32> loc(#loc13)
      %40 = tt.splat %arg11 : i32 -> tensor<1x4xi32> loc(#loc14)
      %41 = arith.cmpi slt, %39, %40 : tensor<1x4xi32> loc(#loc14)
      %42 = tt.call @torch._inductor.runtime.triton_helpers.div_floor_integer__i32S1_4S_i64__(%39, %arg4) : (tensor<1x4xi32>, i64) -> tensor<1x4xi64> loc(#loc15)
      %43 = arith.extsi %39 : tensor<1x4xi32> to tensor<1x4xi64> loc(#loc16)
      %44 = tt.splat %arg4 : i64 -> tensor<1x4xi64> loc(#loc16)
      %45 = arith.remsi %43, %44 : tensor<1x4xi64> loc(#loc16)
      %46 = tt.splat %arg4 : i64 -> tensor<64x1xi64> loc(#loc17)
      %47 = arith.muli %46, %12 : tensor<64x1xi64> loc(#loc17)
      %48 = tt.broadcast %42 : tensor<1x4xi64> -> tensor<64x4xi64> loc(#loc18)
      %49 = tt.broadcast %47 : tensor<64x1xi64> -> tensor<64x4xi64> loc(#loc18)
      %50 = arith.addi %48, %49 : tensor<64x4xi64> loc(#loc18)
      %51 = tt.splat %arg6 : i64 -> tensor<64x4xi64> loc(#loc19)
      %52 = arith.cmpi slt, %50, %51 : tensor<64x4xi64> loc(#loc19)
      %53 = tt.splat %arg4 : i64 -> tensor<64x1xi64> loc(#loc20)
      %54 = arith.muli %53, %15 : tensor<64x1xi64> loc(#loc20)
      %55 = tt.broadcast %45 : tensor<1x4xi64> -> tensor<64x4xi64> loc(#loc21)
      %56 = tt.broadcast %54 : tensor<64x1xi64> -> tensor<64x4xi64> loc(#loc21)
      %57 = arith.addi %55, %56 : tensor<64x4xi64> loc(#loc21)
      %58 = tt.splat %arg7 : i64 -> tensor<64x4xi64> loc(#loc22)
      %59 = arith.cmpi slt, %57, %58 : tensor<64x4xi64> loc(#loc22)
      %60 = arith.andi %52, %59 : tensor<64x4xi1> loc(#loc23)
      %c0_i32_4 = arith.constant 0 : i32 loc(#loc24)
      %61 = tt.addptr %arg0, %c0_i32_4 : !tt.ptr<i64>, i32 loc(#loc24)
      %62 = tt.load %61 : !tt.ptr<i64> loc(#loc25)
      %63 = tt.splat %62 : i64 -> tensor<64x4xi64> loc(#loc26)
      %c0_i32_5 = arith.constant 0 : i32 loc(#loc27)
      %c0_i64_6 = arith.constant 0 : i64 loc(#loc27)
      %cst_7 = arith.constant dense<0> : tensor<64x4xi64> loc(#loc27)
      %64 = arith.select %60, %63, %cst_7 : tensor<64x4xi1>, tensor<64x4xi64> loc(#loc27)
      %65 = tt.splat %arg4 : i64 -> tensor<64x1xi64> loc(#loc28)
      %66 = arith.muli %65, %12 : tensor<64x1xi64> loc(#loc28)
      %67 = tt.broadcast %42 : tensor<1x4xi64> -> tensor<64x4xi64> loc(#loc29)
      %68 = tt.broadcast %66 : tensor<64x1xi64> -> tensor<64x4xi64> loc(#loc29)
      %69 = arith.addi %67, %68 : tensor<64x4xi64> loc(#loc29)
      %70 = arith.addi %69, %64 : tensor<64x4xi64> loc(#loc30)
      %71 = tt.splat %arg8 : i64 -> tensor<1x4xi64> loc(#loc31)
      %72 = arith.addi %71, %45 : tensor<1x4xi64> loc(#loc31)
      %73 = tt.splat %arg4 : i64 -> tensor<64x1xi64> loc(#loc32)
      %74 = arith.muli %73, %15 : tensor<64x1xi64> loc(#loc32)
      %75 = tt.broadcast %72 : tensor<1x4xi64> -> tensor<64x4xi64> loc(#loc33)
      %76 = tt.broadcast %74 : tensor<64x1xi64> -> tensor<64x4xi64> loc(#loc33)
      %77 = arith.addi %75, %76 : tensor<64x4xi64> loc(#loc33)
      %78 = arith.cmpi sle, %77, %70 : tensor<64x4xi64> loc(#loc34)
      %true = arith.constant true loc(#loc35)
      %cst_8 = arith.constant dense<true> : tensor<1x1xi1> loc(#loc35)
      %cst_9 = arith.constant dense<true> : tensor<64x4xi1> loc(#loc36)
      %79 = arith.andi %cst_9, %78 : tensor<64x4xi1> loc(#loc36)
      %80 = tt.splat %arg8 : i64 -> tensor<1x4xi64> loc(#loc37)
      %81 = arith.addi %80, %45 : tensor<1x4xi64> loc(#loc37)
      %82 = tt.splat %arg4 : i64 -> tensor<64x1xi64> loc(#loc38)
      %83 = arith.muli %82, %15 : tensor<64x1xi64> loc(#loc38)
      %84 = tt.broadcast %81 : tensor<1x4xi64> -> tensor<64x4xi64> loc(#loc39)
      %85 = tt.broadcast %83 : tensor<64x1xi64> -> tensor<64x4xi64> loc(#loc39)
      %86 = arith.addi %84, %85 : tensor<64x4xi64> loc(#loc39)
      %c0_i32_10 = arith.constant 0 : i32 loc(#loc40)
      %87 = arith.extsi %c0_i32_10 : i32 to i64 loc(#loc40)
      %88 = tt.splat %87 : i64 -> tensor<64x4xi64> loc(#loc40)
      %89 = arith.cmpi slt, %86, %88 : tensor<64x4xi64> loc(#loc40)
      %90 = arith.addi %arg8, %arg9 : i64 loc(#loc41)
      %91 = tt.splat %90 : i64 -> tensor<1x4xi64> loc(#loc42)
      %92 = arith.addi %91, %45 : tensor<1x4xi64> loc(#loc42)
      %93 = tt.splat %arg4 : i64 -> tensor<64x1xi64> loc(#loc43)
      %94 = arith.muli %93, %15 : tensor<64x1xi64> loc(#loc43)
      %95 = tt.broadcast %92 : tensor<1x4xi64> -> tensor<64x4xi64> loc(#loc44)
      %96 = tt.broadcast %94 : tensor<64x1xi64> -> tensor<64x4xi64> loc(#loc44)
      %97 = arith.addi %95, %96 : tensor<64x4xi64> loc(#loc44)
      %98 = tt.splat %arg8 : i64 -> tensor<1x4xi64> loc(#loc45)
      %99 = arith.addi %98, %45 : tensor<1x4xi64> loc(#loc45)
      %100 = tt.splat %arg4 : i64 -> tensor<64x1xi64> loc(#loc46)
      %101 = arith.muli %100, %15 : tensor<64x1xi64> loc(#loc46)
      %102 = tt.broadcast %99 : tensor<1x4xi64> -> tensor<64x4xi64> loc(#loc47)
      %103 = tt.broadcast %101 : tensor<64x1xi64> -> tensor<64x4xi64> loc(#loc47)
      %104 = arith.addi %102, %103 : tensor<64x4xi64> loc(#loc47)
      %105 = arith.select %89, %97, %104 : tensor<64x4xi1>, tensor<64x4xi64> loc(#loc48)
      %c0_i32_11 = arith.constant 0 : i32 loc(#loc49)
      %106 = arith.extsi %c0_i32_11 : i32 to i64 loc(#loc49)
      %107 = tt.splat %106 : i64 -> tensor<64x4xi64> loc(#loc49)
      %108 = arith.cmpi sle, %107, %105 : tensor<64x4xi64> loc(#loc49)
      %109 = tt.splat %arg8 : i64 -> tensor<1x4xi64> loc(#loc50)
      %110 = arith.addi %109, %45 : tensor<1x4xi64> loc(#loc50)
      %111 = tt.splat %arg4 : i64 -> tensor<64x1xi64> loc(#loc51)
      %112 = arith.muli %111, %15 : tensor<64x1xi64> loc(#loc51)
      %113 = tt.broadcast %110 : tensor<1x4xi64> -> tensor<64x4xi64> loc(#loc52)
      %114 = tt.broadcast %112 : tensor<64x1xi64> -> tensor<64x4xi64> loc(#loc52)
      %115 = arith.addi %113, %114 : tensor<64x4xi64> loc(#loc52)
      %c0_i32_12 = arith.constant 0 : i32 loc(#loc53)
      %116 = arith.extsi %c0_i32_12 : i32 to i64 loc(#loc53)
      %117 = tt.splat %116 : i64 -> tensor<64x4xi64> loc(#loc53)
      %118 = arith.cmpi slt, %115, %117 : tensor<64x4xi64> loc(#loc53)
      %119 = arith.addi %arg8, %arg9 : i64 loc(#loc54)
      %120 = tt.splat %119 : i64 -> tensor<1x4xi64> loc(#loc55)
      %121 = arith.addi %120, %45 : tensor<1x4xi64> loc(#loc55)
      %122 = tt.splat %arg4 : i64 -> tensor<64x1xi64> loc(#loc56)
      %123 = arith.muli %122, %15 : tensor<64x1xi64> loc(#loc56)
      %124 = tt.broadcast %121 : tensor<1x4xi64> -> tensor<64x4xi64> loc(#loc57)
      %125 = tt.broadcast %123 : tensor<64x1xi64> -> tensor<64x4xi64> loc(#loc57)
      %126 = arith.addi %124, %125 : tensor<64x4xi64> loc(#loc57)
      %127 = tt.splat %arg8 : i64 -> tensor<1x4xi64> loc(#loc58)
      %128 = arith.addi %127, %45 : tensor<1x4xi64> loc(#loc58)
      %129 = tt.splat %arg4 : i64 -> tensor<64x1xi64> loc(#loc59)
      %130 = arith.muli %129, %15 : tensor<64x1xi64> loc(#loc59)
      %131 = tt.broadcast %128 : tensor<1x4xi64> -> tensor<64x4xi64> loc(#loc60)
      %132 = tt.broadcast %130 : tensor<64x1xi64> -> tensor<64x4xi64> loc(#loc60)
      %133 = arith.addi %131, %132 : tensor<64x4xi64> loc(#loc60)
      %134 = arith.select %118, %126, %133 : tensor<64x4xi1>, tensor<64x4xi64> loc(#loc61)
      %135 = tt.splat %arg9 : i64 -> tensor<64x4xi64> loc(#loc62)
      %136 = arith.cmpi slt, %134, %135 : tensor<64x4xi64> loc(#loc62)
      %137 = arith.andi %108, %136 : tensor<64x4xi1> loc(#loc63)
      %138 = tt.broadcast %41 : tensor<1x4xi1> -> tensor<64x4xi1> loc(#loc64)
      %139 = arith.andi %138, %60 : tensor<64x4xi1> loc(#loc64)
      %140 = tt.broadcast %7 : tensor<64x1xi1> -> tensor<64x4xi1> loc(#loc65)
      %141 = arith.andi %139, %140 : tensor<64x4xi1> loc(#loc65)
      %true_13 = arith.constant true loc(#loc66)
      %cst_14 = arith.constant dense<true> : tensor<64x4xi1> loc(#loc66)
      %142 = arith.xori %141, %cst_14 : tensor<64x4xi1> loc(#loc66)
      %143 = arith.ori %137, %142 : tensor<64x4xi1> loc(#loc67)
      tt.assert %143, "index out of bounds: 0 <= tl.where(ks4 + r0_2 + ks0*x0 < 0, ks4 + ks5 + r0_2 + ks0*x0, ks4 + r0_2 + ks0*x0) < ks5" : tensor<64x4xi1> loc(#loc68)
      %144 = tt.splat %arg8 : i64 -> tensor<1x4xi64> loc(#loc69)
      %145 = arith.addi %144, %45 : tensor<1x4xi64> loc(#loc69)
      %146 = tt.splat %arg4 : i64 -> tensor<64x1xi64> loc(#loc70)
      %147 = arith.muli %146, %15 : tensor<64x1xi64> loc(#loc70)
      %148 = tt.broadcast %145 : tensor<1x4xi64> -> tensor<64x4xi64> loc(#loc71)
      %149 = tt.broadcast %147 : tensor<64x1xi64> -> tensor<64x4xi64> loc(#loc71)
      %150 = arith.addi %148, %149 : tensor<64x4xi64> loc(#loc71)
      %c0_i32_15 = arith.constant 0 : i32 loc(#loc72)
      %151 = arith.extsi %c0_i32_15 : i32 to i64 loc(#loc72)
      %152 = tt.splat %151 : i64 -> tensor<64x4xi64> loc(#loc72)
      %153 = arith.cmpi slt, %150, %152 : tensor<64x4xi64> loc(#loc72)
      %154 = arith.addi %arg8, %arg9 : i64 loc(#loc73)
      %155 = tt.splat %154 : i64 -> tensor<1x4xi64> loc(#loc74)
      %156 = arith.addi %155, %45 : tensor<1x4xi64> loc(#loc74)
      %157 = tt.splat %arg4 : i64 -> tensor<64x1xi64> loc(#loc75)
      %158 = arith.muli %157, %15 : tensor<64x1xi64> loc(#loc75)
      %159 = tt.broadcast %156 : tensor<1x4xi64> -> tensor<64x4xi64> loc(#loc76)
      %160 = tt.broadcast %158 : tensor<64x1xi64> -> tensor<64x4xi64> loc(#loc76)
      %161 = arith.addi %159, %160 : tensor<64x4xi64> loc(#loc76)
      %162 = tt.splat %arg8 : i64 -> tensor<1x4xi64> loc(#loc77)
      %163 = arith.addi %162, %45 : tensor<1x4xi64> loc(#loc77)
      %164 = tt.splat %arg4 : i64 -> tensor<64x1xi64> loc(#loc78)
      %165 = arith.muli %164, %15 : tensor<64x1xi64> loc(#loc78)
      %166 = tt.broadcast %163 : tensor<1x4xi64> -> tensor<64x4xi64> loc(#loc79)
      %167 = tt.broadcast %165 : tensor<64x1xi64> -> tensor<64x4xi64> loc(#loc79)
      %168 = arith.addi %166, %167 : tensor<64x4xi64> loc(#loc79)
      %169 = arith.select %153, %161, %168 : tensor<64x4xi1>, tensor<64x4xi64> loc(#loc80)
      %170 = tt.splat %arg1 : !tt.ptr<i1> -> tensor<64x4x!tt.ptr<i1>> loc(#loc81)
      %171 = tt.addptr %170, %169 : tensor<64x4x!tt.ptr<i1>>, tensor<64x4xi64> loc(#loc81)
      %172 = tt.broadcast %41 : tensor<1x4xi1> -> tensor<64x4xi1> loc(#loc82)
      %173 = arith.andi %172, %60 : tensor<64x4xi1> loc(#loc82)
      %174 = tt.broadcast %7 : tensor<64x1xi1> -> tensor<64x4xi1> loc(#loc83)
      %175 = arith.andi %173, %174 : tensor<64x4xi1> loc(#loc83)
      %cst_16 = arith.constant 0.000000e+00 : f32 loc(#loc84)
      %cst_17 = arith.constant dense<0.000000e+00> : tensor<64x4xf32> loc(#loc84)
      %176 = tt.bitcast %171 : tensor<64x4x!tt.ptr<i1>> -> tensor<64x4x!tt.ptr<i8>> loc(#loc84)
      %177 = arith.fptosi %cst_17 : tensor<64x4xf32> to tensor<64x4xi8> loc(#loc84)
      %178 = tt.load %176, %175, %177 evictionPolicy = evict_last : tensor<64x4x!tt.ptr<i8>> loc(#loc84)
      %c0_i8 = arith.constant 0 : i8 loc(#loc84)
      %cst_18 = arith.constant dense<0> : tensor<64x4xi8> loc(#loc84)
      %179 = arith.cmpi ne, %178, %cst_18 : tensor<64x4xi8> loc(#loc84)
      %180 = arith.andi %79, %179 : tensor<64x4xi1> loc(#loc85)
      %false = arith.constant false loc(#loc86)
      %cst_19 = arith.constant dense<false> : tensor<64x4xi1> loc(#loc86)
      %181 = arith.select %60, %180, %cst_19 : tensor<64x4xi1>, tensor<64x4xi1> loc(#loc87)
      %182 = arith.extui %181 : tensor<64x4xi1> to tensor<64x4xi64> loc(#loc88)
      %183 = arith.addi %arg13, %182 : tensor<64x4xi64> loc(#loc89)
      %184 = tt.broadcast %41 : tensor<1x4xi1> -> tensor<64x4xi1> loc(#loc90)
      %185 = tt.broadcast %7 : tensor<64x1xi1> -> tensor<64x4xi1> loc(#loc90)
      %186 = arith.andi %184, %185 : tensor<64x4xi1> loc(#loc90)
      %187 = arith.select %186, %183, %arg13 : tensor<64x4xi1>, tensor<64x4xi64> loc(#loc91)
      scf.yield %187 : tensor<64x4xi64> loc(#loc92)
    } loc(#loc12)
    %21 = tt.call @"triton.language.standard.sum__i64S64_4S__(1,)cconstexpr_1__(2,)cconstexpr_False__(3,)cNone"(%20) : (tensor<64x4xi64>) -> tensor<64xi64> loc(#loc93)
    %22 = tt.expand_dims %21 {axis = 1 : i32} : tensor<64xi64> -> tensor<64x1xi64> loc(#loc94)
    %c0_i64_1 = arith.constant 0 : i64 loc(#loc95)
    %cst_2 = arith.constant dense<0> : tensor<1x1xi64> loc(#loc95)
    %cst_3 = arith.constant dense<0> : tensor<64x1xi64> loc(#loc96)
    %23 = arith.cmpi sgt, %22, %cst_3 : tensor<64x1xi64> loc(#loc96)
    %24 = arith.muli %arg4, %arg4 : i64 loc(#loc97)
    %25 = tt.splat %24 : i64 -> tensor<64x1xi64> loc(#loc98)
    %26 = arith.cmpi slt, %22, %25 : tensor<64x1xi64> loc(#loc98)
    %27 = arith.andi %23, %26 : tensor<64x1xi1> loc(#loc99)
    %28 = arith.extui %27 : tensor<64x1xi1> to tensor<64x1xi8> loc(#loc100)
    %29 = arith.extsi %28 : tensor<64x1xi8> to tensor<64x1xi32> loc(#loc101)
    %30 = tt.splat %24 : i64 -> tensor<64x1xi64> loc(#loc102)
    %31 = arith.cmpi eq, %22, %30 : tensor<64x1xi64> loc(#loc102)
    %32 = arith.extui %31 : tensor<64x1xi1> to tensor<64x1xi8> loc(#loc103)
    %33 = arith.extsi %32 : tensor<64x1xi8> to tensor<64x1xi32> loc(#loc104)
    %34 = tt.splat %arg2 : !tt.ptr<i32> -> tensor<64x1x!tt.ptr<i32>> loc(#loc105)
    %35 = tt.addptr %34, %5 : tensor<64x1x!tt.ptr<i32>>, tensor<64x1xi32> loc(#loc105)
    tt.store %35, %29, %7 : tensor<64x1x!tt.ptr<i32>> loc(#loc106)
    %36 = tt.splat %arg3 : !tt.ptr<i32> -> tensor<64x1x!tt.ptr<i32>> loc(#loc107)
    %37 = tt.addptr %36, %5 : tensor<64x1x!tt.ptr<i32>>, tensor<64x1xi32> loc(#loc107)
    tt.store %37, %33, %7 : tensor<64x1x!tt.ptr<i32>> loc(#loc108)
    tt.return loc(#loc109)
  } loc(#loc)
  tt.func private @torch._inductor.runtime.triton_helpers.div_floor_integer__i32S1_4S_i64__(%arg0: tensor<1x4xi32> loc("/home/jovyan/envs/miniforge3/envs/triton/lib/python3.10/site-packages/torch/_inductor/runtime/triton_helpers.py":70:0), %arg1: i64 loc("/home/jovyan/envs/miniforge3/envs/triton/lib/python3.10/site-packages/torch/_inductor/runtime/triton_helpers.py":70:0)) -> tensor<1x4xi64> attributes {noinline = false} {
    %0 = arith.extsi %arg0 : tensor<1x4xi32> to tensor<1x4xi64> loc(#loc111)
    %1 = tt.splat %arg1 : i64 -> tensor<1x4xi64> loc(#loc111)
    %2 = arith.divsi %0, %1 : tensor<1x4xi64> loc(#loc111)
    %3 = arith.extsi %arg0 : tensor<1x4xi32> to tensor<1x4xi64> loc(#loc112)
    %4 = tt.splat %arg1 : i64 -> tensor<1x4xi64> loc(#loc112)
    %5 = arith.remsi %3, %4 : tensor<1x4xi64> loc(#loc112)
    %c0_i32 = arith.constant 0 : i32 loc(#loc113)
    %6 = arith.extsi %c0_i32 : i32 to i64 loc(#loc113)
    %7 = tt.splat %6 : i64 -> tensor<1x4xi64> loc(#loc113)
    %8 = arith.cmpi ne, %5, %7 : tensor<1x4xi64> loc(#loc113)
    %c1_i32 = arith.constant 1 : i32 loc(#loc114)
    %c1_i64 = arith.constant 1 : i64 loc(#loc114)
    %cst = arith.constant dense<1> : tensor<1x4xi64> loc(#loc114)
    %9 = arith.subi %2, %cst : tensor<1x4xi64> loc(#loc114)
    %10 = arith.select %8, %9, %2 : tensor<1x4xi1>, tensor<1x4xi64> loc(#loc115)
    %c0_i32_0 = arith.constant 0 : i32 loc(#loc116)
    %cst_1 = arith.constant dense<0> : tensor<1x4xi32> loc(#loc116)
    %11 = arith.cmpi slt, %arg0, %cst_1 : tensor<1x4xi32> loc(#loc116)
    %c0_i32_2 = arith.constant 0 : i32 loc(#loc117)
    %12 = arith.extsi %c0_i32_2 : i32 to i64 loc(#loc117)
    %13 = arith.cmpi slt, %arg1, %12 : i64 loc(#loc117)
    %14 = tt.splat %13 : i1 -> tensor<1x4xi1> loc(#loc118)
    %15 = arith.cmpi ne, %11, %14 : tensor<1x4xi1> loc(#loc118)
    %16 = arith.select %15, %10, %2 : tensor<1x4xi1>, tensor<1x4xi64> loc(#loc119)
    tt.return %16 : tensor<1x4xi64> loc(#loc120)
  ^bb1:  // no predecessors
    %17 = ub.poison : tensor<1x4xi64> loc(#loc121)
    tt.return %17 : tensor<1x4xi64> loc(#loc121)
  } loc(#loc110)
  tt.func private @"triton.language.standard.sum__i64S64_4S__(1,)cconstexpr_1__(2,)cconstexpr_False__(3,)cNone"(%arg0: tensor<64x4xi64> loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":284:0)) -> tensor<64xi64> attributes {noinline = false} {
    %0 = "tt.reduce"(%arg0) <{axis = 1 : i32}> ({
    ^bb0(%arg1: i64 loc(unknown), %arg2: i64 loc(unknown)):
      %2 = tt.call @triton.language.standard._sum_combine__i64_i64__(%arg1, %arg2) : (i64, i64) -> i64 loc(#loc123)
      tt.reduce.return %2 : i64 loc(#loc123)
    }) : (tensor<64x4xi64>) -> tensor<64xi64> loc(#loc123)
    tt.return %0 : tensor<64xi64> loc(#loc125)
  ^bb1:  // no predecessors
    %1 = ub.poison : tensor<64xi64> loc(#loc126)
    tt.return %1 : tensor<64xi64> loc(#loc126)
  } loc(#loc122)
  tt.func private @triton.language.standard._sum_combine__i64_i64__(%arg0: i64 loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":259:0), %arg1: i64 loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":259:0)) -> i64 attributes {noinline = false} {
    %0 = arith.addi %arg0, %arg1 : i64 loc(#loc128)
    tt.return %0 : i64 loc(#loc129)
  ^bb1:  // no predecessors
    %1 = ub.poison : i64 loc(#loc130)
    tt.return %1 : i64 loc(#loc130)
  } loc(#loc127)
} loc(#loc)
#loc1 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":21:28)
#loc2 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":21:33)
#loc3 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":22:36)
#loc4 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":22:44)
#loc5 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":22:23)
#loc6 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":23:21)
#loc7 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":24:27)
#loc8 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":24:37)
#loc9 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":26:19)
#loc10 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":27:19)
#loc11 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":28:44)
#loc12 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":30:40)
#loc13 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":31:31)
#loc14 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":32:29)
#loc15 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":35:59)
#loc16 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":36:27)
#loc17 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":37:26)
#loc18 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":37:22)
#loc19 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":39:22)
#loc20 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":40:26)
#loc21 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":40:22)
#loc22 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":42:22)
#loc23 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":43:22)
#loc24 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":44:34)
#loc25 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":44:23)
#loc26 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":45:37)
#loc27 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":46:36)
#loc28 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":47:27)
#loc29 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":47:23)
#loc30 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":48:24)
#loc31 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":49:22)
#loc32 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":49:33)
#loc33 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":49:29)
#loc34 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":50:25)
#loc35 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":51:38)
#loc36 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":52:24)
#loc37 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":53:47)
#loc38 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":53:58)
#loc39 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":53:54)
#loc40 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":53:63)
#loc41 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":53:72)
#loc42 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":53:78)
#loc43 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":53:89)
#loc44 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":53:85)
#loc45 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":53:99)
#loc46 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":53:110)
#loc47 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":53:106)
#loc48 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":53:93)
#loc49 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":53:32)
#loc50 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":53:133)
#loc51 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":53:144)
#loc52 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":53:140)
#loc53 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":53:149)
#loc54 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":53:158)
#loc55 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":53:164)
#loc56 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":53:175)
#loc57 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":53:171)
#loc58 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":53:185)
#loc59 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":53:196)
#loc60 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":53:192)
#loc61 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":53:179)
#loc62 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":53:202)
#loc63 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":53:118)
#loc64 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":53:222)
#loc65 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":53:229)
#loc66 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":53:212)
#loc67 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":53:210)
#loc68 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":53:237)
#loc69 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":54:50)
#loc70 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":54:61)
#loc71 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":54:57)
#loc72 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":54:66)
#loc73 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":54:75)
#loc74 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":54:81)
#loc75 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":54:92)
#loc76 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":54:88)
#loc77 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":54:102)
#loc78 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":54:113)
#loc79 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":54:109)
#loc80 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":54:96)
#loc81 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":54:35)
#loc82 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":54:129)
#loc83 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":54:136)
#loc84 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":54:119)
#loc85 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":55:24)
#loc86 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":56:44)
#loc87 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":57:38)
#loc88 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":58:25)
#loc89 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":60:25)
#loc90 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":61:36)
#loc91 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":61:50)
#loc92 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":61:8)
#loc93 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":62:27)
#loc94 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":62:30)
#loc95 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":63:31)
#loc96 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":64:20)
#loc97 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":65:16)
#loc98 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":66:20)
#loc99 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":67:20)
#loc100 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":68:21)
#loc101 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":69:21)
#loc102 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":70:21)
#loc103 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":71:21)
#loc104 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":72:21)
#loc105 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":73:25)
#loc106 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":73:37)
#loc107 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":74:25)
#loc108 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":74:37)
#loc109 = loc("/tmp/torchinductor_jovyan/xy/cxyoogamh7dg7j34p4loxlxkukmxdlc3ahbomu6gjvshyzn4v5uk.py":74:4)
#loc111 = loc("/home/jovyan/envs/miniforge3/envs/triton/lib/python3.10/site-packages/torch/_inductor/runtime/triton_helpers.py":73:16)
#loc112 = loc("/home/jovyan/envs/miniforge3/envs/triton/lib/python3.10/site-packages/torch/_inductor/runtime/triton_helpers.py":74:20)
#loc113 = loc("/home/jovyan/envs/miniforge3/envs/triton/lib/python3.10/site-packages/torch/_inductor/runtime/triton_helpers.py":75:34)
#loc114 = loc("/home/jovyan/envs/miniforge3/envs/triton/lib/python3.10/site-packages/torch/_inductor/runtime/triton_helpers.py":75:44)
#loc115 = loc("/home/jovyan/envs/miniforge3/envs/triton/lib/python3.10/site-packages/torch/_inductor/runtime/triton_helpers.py":75:47)
#loc116 = loc("/home/jovyan/envs/miniforge3/envs/triton/lib/python3.10/site-packages/torch/_inductor/runtime/triton_helpers.py":76:25)
#loc117 = loc("/home/jovyan/envs/miniforge3/envs/triton/lib/python3.10/site-packages/torch/_inductor/runtime/triton_helpers.py":76:36)
#loc118 = loc("/home/jovyan/envs/miniforge3/envs/triton/lib/python3.10/site-packages/torch/_inductor/runtime/triton_helpers.py":76:32)
#loc119 = loc("/home/jovyan/envs/miniforge3/envs/triton/lib/python3.10/site-packages/torch/_inductor/runtime/triton_helpers.py":76:47)
#loc120 = loc("/home/jovyan/envs/miniforge3/envs/triton/lib/python3.10/site-packages/torch/_inductor/runtime/triton_helpers.py":76:11)
#loc121 = loc("/home/jovyan/envs/miniforge3/envs/triton/lib/python3.10/site-packages/torch/_inductor/runtime/triton_helpers.py":76:4)
#loc123 = loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":290:36)
#loc125 = loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":290:11)
#loc126 = loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":290:4)
#loc128 = loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":260:15)
#loc129 = loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":260:11)
#loc130 = loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":260:4)
