; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-n8:16:32:64"
target triple = "spir64-unknown-unknown"

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(none)
declare !dbg !9 spir_func i16 @_Z27__spirv_ConvertFToBF16INTELf(float) local_unnamed_addr #0

; Function Attrs: convergent mustprogress nounwind willreturn
declare !dbg !12 spir_func float @_Z27__spirv_GroupNonUniformFAddiifj(i32, i32, float, i32) local_unnamed_addr #1

; Function Attrs: convergent mustprogress nounwind willreturn
declare !dbg !13 spir_func void @_Z7barrierj(i32) local_unnamed_addr #1

; Function Attrs: convergent mustprogress nounwind willreturn
declare !dbg !14 spir_func float @_Z27__spirv_GroupNonUniformFAddiif(i32, i32, float) local_unnamed_addr #1

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(none)
declare !dbg !15 spir_func float @_Z27__spirv_ConvertBF16ToFINTELs(i16) local_unnamed_addr #0

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(none)
declare !dbg !16 spir_func i64 @_Z12get_local_idj(i32) local_unnamed_addr #0

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(none)
declare !dbg !17 spir_func i64 @_Z12get_group_idj(i32) local_unnamed_addr #0

; Function Attrs: nounwind
define spir_kernel void @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_9(ptr addrspace(1) readonly captures(none) %0, ptr addrspace(1) readonly captures(none) %1, ptr addrspace(1) readonly captures(none) %2, ptr addrspace(1) readonly captures(none) %3, ptr addrspace(1) readonly captures(none) %4, double %5, ptr addrspace(1) writeonly captures(none) %6, i32 %7, i32 %8, ptr addrspace(1) readnone captures(none) %9, ptr addrspace(3) captures(none) %10) local_unnamed_addr #2 !dbg !18 !intel_reqd_sub_group_size !19 !max_work_group_size !20 {
  %12 = tail call spir_func i64 @_Z12get_group_idj(i32 0) #4, !dbg !21
  %13 = trunc i64 %12 to i32, !dbg !21
  %14 = icmp sgt i32 %7, %13, !dbg !22
  %15 = tail call spir_func i64 @_Z12get_local_idj(i32 0) #4, !dbg !23
  %16 = trunc i64 %15 to i32, !dbg !23
  %17 = shl i32 %16, 2, !dbg !23
  %18 = and i32 %17, 1020, !dbg !23
  %19 = shl i32 %13, 12, !dbg !24
  %20 = or disjoint i32 %18, %19
  %21 = sext i32 %20 to i64, !dbg !25
  br label %22, !dbg !25

22:                                               ; preds = %11, %67
  %indvars.iv = phi i64 [ 0, %11 ], [ %indvars.iv.next, %67 ]
  %23 = phi float [ 0.000000e+00, %11 ], [ %96, %67 ]
  %24 = phi float [ 0.000000e+00, %11 ], [ %97, %67 ]
  %25 = phi float [ 0.000000e+00, %11 ], [ %98, %67 ]
  %26 = phi float [ 0.000000e+00, %11 ], [ %99, %67 ]
  %27 = or disjoint i64 %indvars.iv, %21, !dbg !26
  br i1 %14, label %28, label %31, !dbg !27

28:                                               ; preds = %22
  %29 = getelementptr bfloat, ptr addrspace(1) %0, i64 %27, !dbg !28
  %30 = load <4 x i16>, ptr addrspace(1) %29, align 8, !dbg !27
  br label %31, !dbg !27

31:                                               ; preds = %28, %22
  %bc25 = phi <4 x i16> [ %30, %28 ], [ zeroinitializer, %22 ], !dbg !27
  %32 = extractelement <4 x i16> %bc25, i64 0, !dbg !29
  %33 = tail call spir_func float @_Z27__spirv_ConvertBF16ToFINTELs(i16 %32) #4
  %34 = extractelement <4 x i16> %bc25, i64 1, !dbg !29
  %35 = tail call spir_func float @_Z27__spirv_ConvertBF16ToFINTELs(i16 %34) #4
  %36 = extractelement <4 x i16> %bc25, i64 2, !dbg !29
  %37 = tail call spir_func float @_Z27__spirv_ConvertBF16ToFINTELs(i16 %36) #4
  %38 = extractelement <4 x i16> %bc25, i64 3, !dbg !29
  %39 = tail call spir_func float @_Z27__spirv_ConvertBF16ToFINTELs(i16 %38) #4
  br i1 %14, label %40, label %43, !dbg !30

40:                                               ; preds = %31
  %41 = getelementptr bfloat, ptr addrspace(1) %1, i64 %27, !dbg !31
  %42 = load <4 x i16>, ptr addrspace(1) %41, align 8, !dbg !30
  br label %43, !dbg !30

43:                                               ; preds = %40, %31
  %bc29 = phi <4 x i16> [ %42, %40 ], [ zeroinitializer, %31 ], !dbg !30
  %44 = extractelement <4 x i16> %bc29, i64 0, !dbg !32
  %45 = tail call spir_func float @_Z27__spirv_ConvertBF16ToFINTELs(i16 %44) #4
  %46 = extractelement <4 x i16> %bc29, i64 1, !dbg !32
  %47 = tail call spir_func float @_Z27__spirv_ConvertBF16ToFINTELs(i16 %46) #4
  %48 = extractelement <4 x i16> %bc29, i64 2, !dbg !32
  %49 = tail call spir_func float @_Z27__spirv_ConvertBF16ToFINTELs(i16 %48) #4
  %50 = extractelement <4 x i16> %bc29, i64 3, !dbg !32
  %51 = tail call spir_func float @_Z27__spirv_ConvertBF16ToFINTELs(i16 %50) #4
  br i1 %14, label %52, label %55, !dbg !33

52:                                               ; preds = %43
  %53 = getelementptr bfloat, ptr addrspace(1) %2, i64 %27, !dbg !34
  %54 = load <4 x i16>, ptr addrspace(1) %53, align 8, !dbg !33
  br label %55, !dbg !33

55:                                               ; preds = %52, %43
  %bc33 = phi <4 x i16> [ %54, %52 ], [ zeroinitializer, %43 ], !dbg !33
  %56 = extractelement <4 x i16> %bc33, i64 0, !dbg !35
  %57 = tail call spir_func float @_Z27__spirv_ConvertBF16ToFINTELs(i16 %56) #4
  %58 = extractelement <4 x i16> %bc33, i64 1, !dbg !35
  %59 = tail call spir_func float @_Z27__spirv_ConvertBF16ToFINTELs(i16 %58) #4
  %60 = extractelement <4 x i16> %bc33, i64 2, !dbg !35
  %61 = tail call spir_func float @_Z27__spirv_ConvertBF16ToFINTELs(i16 %60) #4
  %62 = extractelement <4 x i16> %bc33, i64 3, !dbg !35
  %63 = tail call spir_func float @_Z27__spirv_ConvertBF16ToFINTELs(i16 %62) #4
  br i1 %14, label %64, label %67, !dbg !36

64:                                               ; preds = %55
  %65 = getelementptr bfloat, ptr addrspace(1) %3, i64 %27, !dbg !37
  %66 = load <4 x i16>, ptr addrspace(1) %65, align 8, !dbg !36
  br label %67, !dbg !36

67:                                               ; preds = %64, %55
  %bc37 = phi <4 x i16> [ %66, %64 ], [ zeroinitializer, %55 ], !dbg !36
  %68 = extractelement <4 x i16> %bc37, i64 0, !dbg !38
  %69 = tail call spir_func float @_Z27__spirv_ConvertBF16ToFINTELs(i16 %68) #4
  %70 = extractelement <4 x i16> %bc37, i64 1, !dbg !38
  %71 = tail call spir_func float @_Z27__spirv_ConvertBF16ToFINTELs(i16 %70) #4
  %72 = extractelement <4 x i16> %bc37, i64 2, !dbg !38
  %73 = tail call spir_func float @_Z27__spirv_ConvertBF16ToFINTELs(i16 %72) #4
  %74 = extractelement <4 x i16> %bc37, i64 3, !dbg !38
  %75 = tail call spir_func float @_Z27__spirv_ConvertBF16ToFINTELs(i16 %74) #4
  %76 = fadd float %33, %45, !dbg !39
  %77 = fadd float %35, %47, !dbg !39
  %78 = fadd float %37, %49, !dbg !39
  %79 = fadd float %39, %51, !dbg !39
  %80 = fadd float %76, %57, !dbg !40
  %81 = fadd float %77, %59, !dbg !40
  %82 = fadd float %78, %61, !dbg !40
  %83 = fadd float %79, %63, !dbg !40
  %84 = fadd float %80, %69, !dbg !41
  %85 = fadd float %81, %71, !dbg !41
  %86 = fadd float %82, %73, !dbg !41
  %87 = fadd float %83, %75, !dbg !41
  %88 = fmul float %84, %84, !dbg !42
  %89 = fmul float %85, %85, !dbg !42
  %90 = fmul float %86, %86, !dbg !42
  %91 = fmul float %87, %87, !dbg !42
  %92 = fadd float %23, %88, !dbg !43
  %93 = fadd float %24, %89, !dbg !43
  %94 = fadd float %25, %90, !dbg !43
  %95 = fadd float %26, %91, !dbg !43
  %96 = select i1 %14, float %92, float %23, !dbg !44
  %97 = select i1 %14, float %93, float %24, !dbg !44
  %98 = select i1 %14, float %94, float %25, !dbg !44
  %99 = select i1 %14, float %95, float %26, !dbg !44
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1024, !dbg !25
  %100 = icmp samesign ult i64 %indvars.iv, 3072, !dbg !25
  br i1 %100, label %22, label %101, !dbg !25

101:                                              ; preds = %67
  %102 = and i32 %16, 255, !dbg !23
  %103 = and i32 %16, 31, !dbg !23
  %104 = fadd float %96, %97, !dbg !45
  %105 = fadd float %98, %104, !dbg !45
  %106 = fadd float %99, %105, !dbg !45
  %107 = tail call spir_func float @_Z27__spirv_GroupNonUniformFAddiif(i32 3, i32 0, float %106) #5, !dbg !49
  %108 = icmp eq i32 %103, 0, !dbg !49
  br i1 %108, label %109, label %113, !dbg !49

109:                                              ; preds = %101
  %110 = lshr exact i32 %102, 5, !dbg !23
  %111 = zext nneg i32 %110 to i64, !dbg !49
  %112 = getelementptr float, ptr addrspace(3) %10, i64 %111, !dbg !49
  store float %107, ptr addrspace(3) %112, align 4, !dbg !49
  br label %113, !dbg !49

113:                                              ; preds = %109, %101
  tail call spir_func void @_Z7barrierj(i32 1) #5, !dbg !49
  %114 = icmp samesign ult i32 %102, 8, !dbg !49
  %115 = and i64 %15, 255, !dbg !49
  %116 = getelementptr float, ptr addrspace(3) %10, i64 %115, !dbg !49
  br i1 %114, label %117, label %119, !dbg !49

117:                                              ; preds = %113
  %118 = load float, ptr addrspace(3) %116, align 4, !dbg !49
  br label %119, !dbg !49

119:                                              ; preds = %117, %113
  %120 = phi float [ %118, %117 ], [ undef, %113 ], !dbg !48
  %121 = tail call spir_func float @_Z27__spirv_GroupNonUniformFAddiifj(i32 3, i32 3, float %120, i32 8) #5, !dbg !49
  %122 = and i32 %16, 7, !dbg !49
  %123 = icmp eq i32 %122, 0, !dbg !49
  %124 = and i1 %114, %123, !dbg !49
  br i1 %124, label %125, label %126, !dbg !49

125:                                              ; preds = %119
  store float %121, ptr addrspace(3) %116, align 4, !dbg !49
  br label %126, !dbg !49

126:                                              ; preds = %125, %119
  tail call spir_func void @_Z7barrierj(i32 1) #5, !dbg !49
  %127 = load float, ptr addrspace(3) %10, align 4, !dbg !49
  %128 = fmul float %127, 0x3F30000000000000, !dbg !50
  %129 = fptrunc double %5 to float, !dbg !51
  %130 = fadd float %128, %129, !dbg !52
  %131 = tail call spir_func noundef float @_Z17__spirv_ocl_rsqrtf(float noundef %130) #6, !dbg !53
  %132 = zext nneg i32 %18 to i64, !dbg !54
  %invariant.gep = getelementptr bfloat, ptr addrspace(1) %4, i64 %132, !dbg !54
  br label %133, !dbg !54

133:                                              ; preds = %126, %226
  %indvars.iv43 = phi i64 [ 0, %126 ], [ %indvars.iv.next44, %226 ]
  %gep = getelementptr bfloat, ptr addrspace(1) %invariant.gep, i64 %indvars.iv43, !dbg !55
  %134 = load i16, ptr addrspace(1) %gep, align 8, !dbg !56
  %135 = tail call spir_func float @_Z27__spirv_ConvertBF16ToFINTELs(i16 %134) #4
  %136 = getelementptr inbounds nuw i8, ptr addrspace(1) %gep, i64 2, !dbg !56
  %137 = load i16, ptr addrspace(1) %136, align 2, !dbg !56
  %138 = tail call spir_func float @_Z27__spirv_ConvertBF16ToFINTELs(i16 %137) #4
  %139 = getelementptr inbounds nuw i8, ptr addrspace(1) %gep, i64 4, !dbg !56
  %140 = load i16, ptr addrspace(1) %139, align 4, !dbg !56
  %141 = tail call spir_func float @_Z27__spirv_ConvertBF16ToFINTELs(i16 %140) #4
  %142 = getelementptr inbounds nuw i8, ptr addrspace(1) %gep, i64 6, !dbg !56
  %143 = load i16, ptr addrspace(1) %142, align 2, !dbg !56
  %144 = tail call spir_func float @_Z27__spirv_ConvertBF16ToFINTELs(i16 %143) #4
  %145 = or disjoint i64 %indvars.iv43, %21
  br i1 %14, label %146, label %149, !dbg !57

146:                                              ; preds = %133
  %147 = getelementptr bfloat, ptr addrspace(1) %0, i64 %145, !dbg !58
  %148 = load <4 x i16>, ptr addrspace(1) %147, align 8, !dbg !57
  br label %149, !dbg !57

149:                                              ; preds = %146, %133
  %bc9 = phi <4 x i16> [ %148, %146 ], [ zeroinitializer, %133 ], !dbg !57
  %150 = extractelement <4 x i16> %bc9, i64 0, !dbg !59
  %151 = tail call spir_func float @_Z27__spirv_ConvertBF16ToFINTELs(i16 %150) #4
  %152 = extractelement <4 x i16> %bc9, i64 1, !dbg !59
  %153 = tail call spir_func float @_Z27__spirv_ConvertBF16ToFINTELs(i16 %152) #4
  %154 = extractelement <4 x i16> %bc9, i64 2, !dbg !59
  %155 = tail call spir_func float @_Z27__spirv_ConvertBF16ToFINTELs(i16 %154) #4
  %156 = extractelement <4 x i16> %bc9, i64 3, !dbg !59
  %157 = tail call spir_func float @_Z27__spirv_ConvertBF16ToFINTELs(i16 %156) #4
  br i1 %14, label %158, label %161, !dbg !60

158:                                              ; preds = %149
  %159 = getelementptr bfloat, ptr addrspace(1) %1, i64 %145, !dbg !61
  %160 = load <4 x i16>, ptr addrspace(1) %159, align 8, !dbg !60
  br label %161, !dbg !60

161:                                              ; preds = %158, %149
  %bc13 = phi <4 x i16> [ %160, %158 ], [ zeroinitializer, %149 ], !dbg !60
  br i1 %14, label %162, label %226, !dbg !62

162:                                              ; preds = %161
  %163 = extractelement <4 x i16> %bc13, i64 3, !dbg !63
  %164 = tail call spir_func float @_Z27__spirv_ConvertBF16ToFINTELs(i16 %163) #4
  %165 = extractelement <4 x i16> %bc13, i64 2, !dbg !63
  %166 = tail call spir_func float @_Z27__spirv_ConvertBF16ToFINTELs(i16 %165) #4
  %167 = extractelement <4 x i16> %bc13, i64 1, !dbg !63
  %168 = tail call spir_func float @_Z27__spirv_ConvertBF16ToFINTELs(i16 %167) #4
  %169 = extractelement <4 x i16> %bc13, i64 0, !dbg !63
  %170 = tail call spir_func float @_Z27__spirv_ConvertBF16ToFINTELs(i16 %169) #4
  %171 = getelementptr bfloat, ptr addrspace(1) %2, i64 %145, !dbg !64
  %172 = getelementptr inbounds nuw i8, ptr addrspace(1) %171, i64 6, !dbg !65
  %173 = load i16, ptr addrspace(1) %172, align 2, !dbg !65
  %174 = tail call spir_func float @_Z27__spirv_ConvertBF16ToFINTELs(i16 %173) #4
  %175 = getelementptr inbounds nuw i8, ptr addrspace(1) %171, i64 4, !dbg !65
  %176 = load i16, ptr addrspace(1) %175, align 4, !dbg !65
  %177 = tail call spir_func float @_Z27__spirv_ConvertBF16ToFINTELs(i16 %176) #4
  %178 = getelementptr inbounds nuw i8, ptr addrspace(1) %171, i64 2, !dbg !65
  %179 = load i16, ptr addrspace(1) %178, align 2, !dbg !65
  %180 = tail call spir_func float @_Z27__spirv_ConvertBF16ToFINTELs(i16 %179) #4
  %181 = load i16, ptr addrspace(1) %171, align 8, !dbg !65
  %182 = tail call spir_func float @_Z27__spirv_ConvertBF16ToFINTELs(i16 %181) #4
  %183 = getelementptr bfloat, ptr addrspace(1) %3, i64 %145, !dbg !66
  %184 = load <4 x i16>, ptr addrspace(1) %183, align 8, !dbg !67
  %185 = fadd float %151, %170, !dbg !68
  %186 = fadd float %185, %182, !dbg !69
  %187 = extractelement <4 x i16> %184, i64 0, !dbg !70
  %188 = tail call spir_func float @_Z27__spirv_ConvertBF16ToFINTELs(i16 %187) #4
  %189 = fadd float %186, %188, !dbg !71
  %190 = fmul float %131, %189, !dbg !72
  %191 = fmul float %135, %190, !dbg !73
  %192 = tail call spir_func i16 @_Z27__spirv_ConvertFToBF16INTELf(float %191) #4
  %193 = insertelement <2 x i16> poison, i16 %192, i64 0, !dbg !74
  %194 = fadd float %153, %168, !dbg !68
  %195 = fadd float %194, %180, !dbg !69
  %196 = extractelement <4 x i16> %184, i64 1, !dbg !70
  %197 = tail call spir_func float @_Z27__spirv_ConvertBF16ToFINTELs(i16 %196) #4
  %198 = fadd float %195, %197, !dbg !71
  %199 = fmul float %131, %198, !dbg !72
  %200 = fmul float %138, %199, !dbg !73
  %201 = tail call spir_func i16 @_Z27__spirv_ConvertFToBF16INTELf(float %200) #4
  %202 = insertelement <2 x i16> %193, i16 %201, i64 1, !dbg !74
  %203 = bitcast <2 x i16> %202 to i32, !dbg !74
  %204 = insertelement <2 x i32> poison, i32 %203, i64 0, !dbg !74
  %205 = fadd float %155, %166, !dbg !68
  %206 = fadd float %205, %177, !dbg !69
  %207 = extractelement <4 x i16> %184, i64 2, !dbg !70
  %208 = tail call spir_func float @_Z27__spirv_ConvertBF16ToFINTELs(i16 %207) #4
  %209 = fadd float %206, %208, !dbg !71
  %210 = fmul float %131, %209, !dbg !72
  %211 = fmul float %141, %210, !dbg !73
  %212 = tail call spir_func i16 @_Z27__spirv_ConvertFToBF16INTELf(float %211) #4
  %213 = insertelement <2 x i16> poison, i16 %212, i64 0, !dbg !74
  %214 = fadd float %157, %164, !dbg !68
  %215 = fadd float %214, %174, !dbg !69
  %216 = extractelement <4 x i16> %184, i64 3, !dbg !70
  %217 = tail call spir_func float @_Z27__spirv_ConvertBF16ToFINTELs(i16 %216) #4
  %218 = fadd float %215, %217, !dbg !71
  %219 = fmul float %131, %218, !dbg !72
  %220 = fmul float %144, %219, !dbg !73
  %221 = tail call spir_func i16 @_Z27__spirv_ConvertFToBF16INTELf(float %220) #4
  %222 = insertelement <2 x i16> %213, i16 %221, i64 1, !dbg !74
  %223 = bitcast <2 x i16> %222 to i32, !dbg !74
  %224 = insertelement <2 x i32> %204, i32 %223, i64 1, !dbg !74
  %225 = getelementptr bfloat, ptr addrspace(1) %6, i64 %145, !dbg !75
  store <2 x i32> %224, ptr addrspace(1) %225, align 8, !dbg !74
  br label %226, !dbg !74

226:                                              ; preds = %161, %162
  %indvars.iv.next44 = add nuw nsw i64 %indvars.iv43, 1024, !dbg !54
  %227 = icmp samesign ult i64 %indvars.iv43, 3072, !dbg !54
  br i1 %227, label %133, label %228, !dbg !54

228:                                              ; preds = %226
  ret void, !dbg !76
}

; Function Attrs: convergent mustprogress nofree nounwind willreturn memory(none)
declare dso_local spir_func noundef float @_Z17__spirv_ocl_rsqrtf(float noundef) local_unnamed_addr #3

attributes #0 = { mustprogress nofree nosync nounwind willreturn memory(none) }
attributes #1 = { convergent mustprogress nounwind willreturn }
attributes #2 = { nounwind }
attributes #3 = { convergent mustprogress nofree nounwind willreturn memory(none) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #4 = { nounwind willreturn memory(none) }
attributes #5 = { convergent nounwind willreturn }
attributes #6 = { convergent nounwind willreturn memory(none) }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3, !4, !5}
!opencl.spir.version = !{!6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6}
!spirv.Source = !{!7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7, !7}
!llvm.ident = !{!8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8, !8}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!1 = !DIFile(filename: "cqbqfd3bw3t2dqtgp56zhl2bhqt2pjubciyfi3jrf72cztoqpum7.py", directory: "/tmp/torchinductor_jovyan/qb")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 1, !"wchar_size", i32 4}
!4 = !{i32 1, !"sycl-device", i32 1}
!5 = !{i32 7, !"frame-pointer", i32 2}
!6 = !{i32 1, i32 2}
!7 = !{i32 3, i32 100000}
!8 = !{!"Intel(R) oneAPI DPC++/C++ Compiler 2025.0.0 (2025.0.0.20241008)"}
!9 = !DISubprogram(name: "_Z27__spirv_ConvertFToBF16INTELf", linkageName: "_Z27__spirv_ConvertFToBF16INTELf", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagOptimized)
!10 = !DISubroutineType(cc: DW_CC_normal, types: !11)
!11 = !{}
!12 = !DISubprogram(name: "_Z27__spirv_GroupNonUniformFAddiifj", linkageName: "_Z27__spirv_GroupNonUniformFAddiifj", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagOptimized)
!13 = !DISubprogram(name: "_Z7barrierj", linkageName: "_Z7barrierj", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagOptimized)
!14 = !DISubprogram(name: "_Z27__spirv_GroupNonUniformFAddiif", linkageName: "_Z27__spirv_GroupNonUniformFAddiif", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagOptimized)
!15 = !DISubprogram(name: "_Z27__spirv_ConvertBF16ToFINTELs", linkageName: "_Z27__spirv_ConvertBF16ToFINTELs", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagOptimized)
!16 = !DISubprogram(name: "_Z12get_local_idj", linkageName: "_Z12get_local_idj", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagOptimized)
!17 = !DISubprogram(name: "_Z12get_group_idj", linkageName: "_Z12get_group_idj", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagOptimized)
!18 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_9", linkageName: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_9", scope: !1, file: !1, line: 18, type: !10, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0)
!19 = !{i32 32}
!20 = !{i64 256, i64 1, i64 1}
!21 = !DILocation(line: 22, column: 28, scope: !18)
!22 = !DILocation(line: 24, column: 21, scope: !18)
!23 = !DILocation(line: 25, column: 37, scope: !18)
!24 = !DILocation(line: 35, column: 46, scope: !18)
!25 = !DILocation(line: 29, column: 40, scope: !18)
!26 = !DILocation(line: 35, column: 41, scope: !18)
!27 = !DILocation(line: 35, column: 51, scope: !18)
!28 = !DILocation(line: 35, column: 34, scope: !18)
!29 = !DILocation(line: 35, column: 112, scope: !18)
!30 = !DILocation(line: 36, column: 51, scope: !18)
!31 = !DILocation(line: 36, column: 34, scope: !18)
!32 = !DILocation(line: 36, column: 112, scope: !18)
!33 = !DILocation(line: 37, column: 51, scope: !18)
!34 = !DILocation(line: 37, column: 34, scope: !18)
!35 = !DILocation(line: 37, column: 112, scope: !18)
!36 = !DILocation(line: 38, column: 51, scope: !18)
!37 = !DILocation(line: 38, column: 34, scope: !18)
!38 = !DILocation(line: 38, column: 112, scope: !18)
!39 = !DILocation(line: 39, column: 22, scope: !18)
!40 = !DILocation(line: 40, column: 22, scope: !18)
!41 = !DILocation(line: 41, column: 22, scope: !18)
!42 = !DILocation(line: 43, column: 22, scope: !18)
!43 = !DILocation(line: 45, column: 25, scope: !18)
!44 = !DILocation(line: 46, column: 50, scope: !18)
!45 = !DILocation(line: 260, column: 15, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlockFile(scope: !18, file: !47, discriminator: 0)
!47 = !DIFile(filename: "standard.py", directory: "/home/jovyan/intel-xpu-backend-for-triton/python/triton/language")
!48 = !DILocation(line: 47, column: 27, scope: !18)
!49 = !DILocation(line: 290, column: 36, scope: !46, inlinedAt: !48)
!50 = !DILocation(line: 65, column: 25, scope: !18)
!51 = !DILocation(line: 66, column: 25, scope: !18)
!52 = !DILocation(line: 67, column: 24, scope: !18)
!53 = !DILocation(line: 68, column: 32, scope: !18)
!54 = !DILocation(line: 49, column: 40, scope: !18)
!55 = !DILocation(line: 55, column: 35, scope: !18)
!56 = !DILocation(line: 55, column: 95, scope: !18)
!57 = !DILocation(line: 56, column: 52, scope: !18)
!58 = !DILocation(line: 56, column: 35, scope: !18)
!59 = !DILocation(line: 56, column: 114, scope: !18)
!60 = !DILocation(line: 57, column: 52, scope: !18)
!61 = !DILocation(line: 57, column: 35, scope: !18)
!62 = !DILocation(line: 58, column: 52, scope: !18)
!63 = !DILocation(line: 57, column: 114, scope: !18)
!64 = !DILocation(line: 58, column: 35, scope: !18)
!65 = !DILocation(line: 58, column: 114, scope: !18)
!66 = !DILocation(line: 59, column: 35, scope: !18)
!67 = !DILocation(line: 59, column: 52, scope: !18)
!68 = !DILocation(line: 60, column: 24, scope: !18)
!69 = !DILocation(line: 61, column: 24, scope: !18)
!70 = !DILocation(line: 59, column: 114, scope: !18)
!71 = !DILocation(line: 62, column: 24, scope: !18)
!72 = !DILocation(line: 69, column: 24, scope: !18)
!73 = !DILocation(line: 71, column: 24, scope: !18)
!74 = !DILocation(line: 72, column: 53, scope: !18)
!75 = !DILocation(line: 72, column: 29, scope: !18)
!76 = !DILocation(line: 49, column: 4, scope: !18)
