#loc = loc("/tmp/torchinductor_jovyan/mq/cmqt3lj56pfodmyqkqmp6lxdyf63hgnotrf4nescs54cnsgdn2ah.py":18:0)
#loc18 = loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":46:0)
module {
  tt.func public @triton_poi_fused_mul_silu_7(%arg0: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_jovyan/mq/cmqt3lj56pfodmyqkqmp6lxdyf63hgnotrf4nescs54cnsgdn2ah.py":18:0), %arg1: !tt.ptr<bf16> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_jovyan/mq/cmqt3lj56pfodmyqkqmp6lxdyf63hgnotrf4nescs54cnsgdn2ah.py":18:0), %arg2: i32 {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_jovyan/mq/cmqt3lj56pfodmyqkqmp6lxdyf63hgnotrf4nescs54cnsgdn2ah.py":18:0)) attributes {noinline = false} {
    %0 = tt.get_program_id x : i32 loc(#loc1)
    %c512_i32 = arith.constant 512 : i32 loc(#loc2)
    %c512_i32_0 = arith.constant 512 : i32 loc(#loc2)
    %1 = arith.muli %0, %c512_i32_0 : i32 loc(#loc2)
    %2 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32> loc(#loc3)
    %3 = tt.splat %1 : i32 -> tensor<512xi32> loc(#loc4)
    %4 = arith.addi %3, %2 : tensor<512xi32> loc(#loc4)
    %5 = tt.splat %arg2 : i32 -> tensor<512xi32> loc(#loc5)
    %6 = arith.cmpi slt, %4, %5 : tensor<512xi32> loc(#loc5)
    %7 = tt.splat %arg0 : !tt.ptr<bf16> -> tensor<512x!tt.ptr<bf16>> loc(#loc6)
    %8 = tt.addptr %7, %4 : tensor<512x!tt.ptr<bf16>>, tensor<512xi32> loc(#loc6)
    %9 = tt.load %8, %6 : tensor<512x!tt.ptr<bf16>> loc(#loc7)
    %10 = arith.extf %9 : tensor<512xbf16> to tensor<512xf32> loc(#loc8)
    %11 = tt.splat %arg1 : !tt.ptr<bf16> -> tensor<512x!tt.ptr<bf16>> loc(#loc9)
    %12 = tt.addptr %11, %4 : tensor<512x!tt.ptr<bf16>>, tensor<512xi32> loc(#loc9)
    %13 = tt.load %12, %6 : tensor<512x!tt.ptr<bf16>> loc(#loc10)
    %14 = arith.extf %13 : tensor<512xbf16> to tensor<512xf32> loc(#loc11)
    %15 = tt.call @triton.language.standard.sigmoid__fp32S512S__(%10) : (tensor<512xf32>) -> tensor<512xf32> loc(#loc12)
    %16 = arith.mulf %10, %15 : tensor<512xf32> loc(#loc13)
    %17 = arith.mulf %16, %14 : tensor<512xf32> loc(#loc14)
    %18 = tt.splat %arg0 : !tt.ptr<bf16> -> tensor<512x!tt.ptr<bf16>> loc(#loc15)
    %19 = tt.addptr %18, %4 : tensor<512x!tt.ptr<bf16>>, tensor<512xi32> loc(#loc15)
    %20 = arith.truncf %17 : tensor<512xf32> to tensor<512xbf16> loc(#loc16)
    tt.store %19, %20, %6 : tensor<512x!tt.ptr<bf16>> loc(#loc16)
    tt.return loc(#loc17)
  } loc(#loc)
  tt.func private @triton.language.standard.sigmoid__fp32S512S__(%arg0: tensor<512xf32> loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":46:0)) -> tensor<512xf32> attributes {noinline = false} {
    %cst = arith.constant 0.000000e+00 : f32 loc(#loc19)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<512xf32> loc(#loc19)
    %0 = arith.subf %cst_0, %arg0 : tensor<512xf32> loc(#loc19)
    %1 = math.exp %0 : tensor<512xf32> loc(#loc20)
    %c1_i32 = arith.constant 1 : i32 loc(#loc21)
    %cst_1 = arith.constant 1.000000e+00 : f32 loc(#loc21)
    %cst_2 = arith.constant dense<1.000000e+00> : tensor<512xf32> loc(#loc21)
    %2 = arith.addf %cst_2, %1 : tensor<512xf32> loc(#loc21)
    %c1_i32_3 = arith.constant 1 : i32 loc(#loc22)
    %cst_4 = arith.constant 1.000000e+00 : f32 loc(#loc22)
    %cst_5 = arith.constant dense<1.000000e+00> : tensor<512xf32> loc(#loc22)
    %3 = arith.divf %cst_5, %2 : tensor<512xf32> loc(#loc22)
    tt.return %3 : tensor<512xf32> loc(#loc23)
  ^bb1:  // no predecessors
    %4 = ub.poison : tensor<512xf32> loc(#loc24)
    tt.return %4 : tensor<512xf32> loc(#loc24)
  } loc(#loc18)
} loc(#loc)
#loc1 = loc("/tmp/torchinductor_jovyan/mq/cmqt3lj56pfodmyqkqmp6lxdyf63hgnotrf4nescs54cnsgdn2ah.py":19:28)
#loc2 = loc("/tmp/torchinductor_jovyan/mq/cmqt3lj56pfodmyqkqmp6lxdyf63hgnotrf4nescs54cnsgdn2ah.py":19:33)
#loc3 = loc("/tmp/torchinductor_jovyan/mq/cmqt3lj56pfodmyqkqmp6lxdyf63hgnotrf4nescs54cnsgdn2ah.py":20:36)
#loc4 = loc("/tmp/torchinductor_jovyan/mq/cmqt3lj56pfodmyqkqmp6lxdyf63hgnotrf4nescs54cnsgdn2ah.py":20:23)
#loc5 = loc("/tmp/torchinductor_jovyan/mq/cmqt3lj56pfodmyqkqmp6lxdyf63hgnotrf4nescs54cnsgdn2ah.py":21:21)
#loc6 = loc("/tmp/torchinductor_jovyan/mq/cmqt3lj56pfodmyqkqmp6lxdyf63hgnotrf4nescs54cnsgdn2ah.py":23:34)
#loc7 = loc("/tmp/torchinductor_jovyan/mq/cmqt3lj56pfodmyqkqmp6lxdyf63hgnotrf4nescs54cnsgdn2ah.py":23:39)
#loc8 = loc("/tmp/torchinductor_jovyan/mq/cmqt3lj56pfodmyqkqmp6lxdyf63hgnotrf4nescs54cnsgdn2ah.py":23:49)
#loc9 = loc("/tmp/torchinductor_jovyan/mq/cmqt3lj56pfodmyqkqmp6lxdyf63hgnotrf4nescs54cnsgdn2ah.py":24:30)
#loc10 = loc("/tmp/torchinductor_jovyan/mq/cmqt3lj56pfodmyqkqmp6lxdyf63hgnotrf4nescs54cnsgdn2ah.py":24:35)
#loc11 = loc("/tmp/torchinductor_jovyan/mq/cmqt3lj56pfodmyqkqmp6lxdyf63hgnotrf4nescs54cnsgdn2ah.py":24:45)
#loc12 = loc("/tmp/torchinductor_jovyan/mq/cmqt3lj56pfodmyqkqmp6lxdyf63hgnotrf4nescs54cnsgdn2ah.py":26:22)
#loc13 = loc("/tmp/torchinductor_jovyan/mq/cmqt3lj56pfodmyqkqmp6lxdyf63hgnotrf4nescs54cnsgdn2ah.py":27:18)
#loc14 = loc("/tmp/torchinductor_jovyan/mq/cmqt3lj56pfodmyqkqmp6lxdyf63hgnotrf4nescs54cnsgdn2ah.py":29:18)
#loc15 = loc("/tmp/torchinductor_jovyan/mq/cmqt3lj56pfodmyqkqmp6lxdyf63hgnotrf4nescs54cnsgdn2ah.py":30:28)
#loc16 = loc("/tmp/torchinductor_jovyan/mq/cmqt3lj56pfodmyqkqmp6lxdyf63hgnotrf4nescs54cnsgdn2ah.py":30:39)
#loc17 = loc("/tmp/torchinductor_jovyan/mq/cmqt3lj56pfodmyqkqmp6lxdyf63hgnotrf4nescs54cnsgdn2ah.py":30:4)
#loc19 = loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":47:30)
#loc20 = loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":47:29)
#loc21 = loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":47:20)
#loc22 = loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":47:16)
#loc23 = loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":47:11)
#loc24 = loc("/home/jovyan/intel-xpu-backend-for-triton/python/triton/language/standard.py":47:4)
