diff --git a/torch/_higher_order_ops/triton_kernel_wrap.py b/torch/_higher_order_ops/triton_kernel_wrap.py
index ace56135fe1..7e925dd6e45 100644
--- a/torch/_higher_order_ops/triton_kernel_wrap.py
+++ b/torch/_higher_order_ops/triton_kernel_wrap.py
@@ -238,7 +238,7 @@ def generate_ttir(
 
             target = triton.runtime.driver.active.get_current_target()
             backend = triton.compiler.compiler.make_backend(target)
-            return backend.get_attrs_descriptor(args, kernel.params)
+            return backend.get_attrs_descriptor(kernel.params, args)
         except ImportError:
             return kernel._get_config(*args)
 
@@ -247,7 +247,8 @@ def generate_ttir(
         name: arg for name, arg in ordered_args.items() if not isinstance(arg, Tensor)
     }
 
-    # Build kernel signature -- doesn't include constexpr arguments.
+    # Build kernel signature; it should also include `constexpr` arguments but `kernel._key_of`
+    # doesn't work correctly with them. They will be added in `fixup_signature` function later.
     signature = {
         name: kernel._type_of(kernel._key_of(arg))
         for i, (name, arg) in enumerate(ordered_args.items())
@@ -257,7 +258,18 @@ def generate_ttir(
     triton._C.libtriton.ir.load_dialects(context)
     backend.load_dialects(context)
 
-    src = ASTSource(kernel, signature, constants, specialization)
+    def fixup_signature(arg_names, signature, constants):
+        new_signature = {arg_name: None for arg_name in arg_names}
+        for arg_name in arg_names:
+            if arg_name in constants and arg_name not in signature:
+                # If it's not in the signature already, it's a constexpr
+                # argument that we need to add in
+                new_signature[arg_name] = "constexpr"
+            else:
+                new_signature[arg_name] = signature[arg_name]
+        return new_signature
+
+    src = ASTSource(kernel, fixup_signature(kernel.arg_names, signature, constants), constants, specialization)
 
     # Triton changes ASTSource.make_ir to take 3/4 arguments. Handle
     # backward compatibility here.
