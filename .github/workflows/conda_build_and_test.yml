name: Conda build and test

on:
  workflow_dispatch:
  schedule:
    - cron: "5 2 * * *"

permissions: read-all

env:
  BASE: /home/runner
  LLVM_SYSPATH: /home/runner/packages/llvm
  BACKEND: XPU
  TRITON_DISABLE_LINE_INFO: 1

jobs:

  integration-tests:
    name: Integration tests
    runs-on:
      - glados
      - spr
      - conda-0.0.1
    strategy:
      matrix:
        python:
          - 3.9
            #          - "3.10"
    defaults:
      run:
        shell: bash -noprofile --norc -eo pipefail -c "source /home/runner/intel/oneapi/setvars.sh > /dev/null; source {0}"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Load pip cache
        id: pip-cache
        uses: ./.github/actions/load
        env:
          # Increase this value to reset cache
          CACHE_NUMBER: 1
        with:
          path: $HOME/.cache/pip
          key: pip-${{ matrix.python }}-${{ hashFiles('python/pyproject.toml', 'python/setup.py') }}-${{ env.CACHE_NUMBER }}

      - name: Calculate env
        run: |
          LLVM_COMMIT_ID=$(git ls-remote https://github.com/intel/llvm.git refs/heads/genx | cut -f1)
          echo "Latest llvm genx commit id: $LLVM_COMMIT_ID"
          PACKAGES_CACHE_KEY=$(echo $LLVM_COMMIT_ID ${{ hashFiles('scripts/compile-triton.sh') }} | sha256sum - | cut -d\  -f1)
          echo "PACKAGES_CACHE_KEY=$PACKAGES_CACHE_KEY" >>$GITHUB_ENV
          echo $HOME/miniconda3/bin >>$GITHUB_PATH

      - name: Load packages cache
        id: packages-cache
        uses: ./.github/actions/load
        env:
          # Increase this value to reset cache
          CACHE_NUMBER: 2
        with:
          path: $HOME/packages
          key: conda-packages-${{ env.PACKAGES_CACHE_KEY }}-${{ env.CACHE_NUMBER }}

      - name: Load conda cache
        id: conda-cache
        uses: ./.github/actions/load
        env:
          CACHE_NUMBER: 2
        with:
          path: $HOME/miniconda3/envs/triton
          key: conda-py${{ matrix.python }}-${{ hashFiles('scripts/triton.yml') }}-${{ env.CACHE_NUMBER }}

      - name: Update conda env
        if: ${{ steps.conda-cache.outputs.status == 'miss' }}
        run: |
          conda create -n triton --override-channels -c conda-forge python=${{ matrix.python }}.*
          conda env update -f scripts/triton.yml

      - name: Add conda info to log
        run: |
          conda info
          conda list -n triton          

      - name: Build packages
        if: ${{ steps.packages-cache.outputs.status == 'miss' }}
        run: |
          conda run --no-capture-output -n triton ./scripts/compile-triton.sh --llvm

      - name: Save packages cache
        if: ${{ steps.packages-cache.outputs.status == 'miss' }}
        uses: ./.github/actions/save
        with:
          path: ${{ steps.packages-cache.outputs.path }}
          dest: ${{ steps.packages-cache.outputs.dest }}

      - name: Build Triton
        run: |
          cd python
          conda run --no-capture-output -n triton pip install wheel
          conda run --no-capture-output -n triton pip install --no-build-isolation '.[tests]'

      - name: Save conda cache
        if: ${{ steps.conda-cache.outputs.status == 'miss' }}
        uses: ./.github/actions/save
        with:
          path: ${{ steps.conda-cache.outputs.path }}
          dest: ${{ steps.conda-cache.outputs.dest }}

#      - name: Run lit tests
#        run: |
#          pip install lit
#          cd python
#          conda run --no-capture-output -n triton lit -v build/*/test
#
#      - name: Create directory for tests reports
#        run: |
#          mkdir ~/reports
#
#      - name: Run core tests
#        run: |
#          conda run --no-capture-output -n triton pip install pytest pytest-xdist
#          conda run --no-capture-output -n triton pip install torch==2.1.0a0+cxx11.abi intel_extension_for_pytorch==2.1.10+xpu -f https://developer.intel.com/ipex-whl-stable-xpu
#          cd python/test/unit
#          conda run --no-capture-output -n triton python3 -m pytest --junitxml=~/reports/language.xml -n 8 --verbose --device xpu language/ --ignore=language/test_line_info.py
#          # run runtime tests serially to avoid race condition with cache handling.
#          conda run --no-capture-output -n triton python3 -m pytest --junitxml=~/reports/runtime.xml --device xpu runtime/
#          # run test_line_info.py separately with TRITON_DISABLE_LINE_INFO=0
#          export TRITON_DISABLE_LINE_INFO=0
#          conda run --no-capture-output -n triton python3 -m pytest --junitxml=~/reports/line_info.xml --verbose --device xpu language/test_line_info.py
#
#      - name: Clear cache
#        run: |
#          rm -rf ~/.triton
#
#      - name: Run interpreter tests
#        env:
#          # TRITON_INTERPRET: "1"
#          CUA_VISIBLE_DEVICES: ""
#        run: |
#          cd python/test/unit
#          conda run --no-capture-output -n triton python3 -m pytest --junitxml=~/reports/flash_attention.xml -vs --device xpu operators/test_flash_attention.py
#
#      - name: Run partial operators tests
#        run: |
#          cd python/test/unit
#          conda run --no-capture-output -n triton python3 -m pytest --junitxml=~/reports/operators.xml -n 8 --verbose --device xpu operators
#
#      - name: Regression tests
#        run: |
#          pip install pytest-rerunfailures
#          cd python/test/regression
#          conda run --no-capture-output -n triton python3 -m pytest --junitxml=~/reports/regression.xml -vvv -s --device xpu . --reruns 10 --ignore=test_performance.py
#
#      - name: Run XPU python tests
#        run: |
#          cd python/test/backend/third_party_backends
#          conda run --no-capture-output -n triton python3 -m pytest -n auto --verbose test_xpu_backend.py
#
#      - name: Run Tutorials
#        run: |
#          conda run --no-capture-output -n triton pip install matplotlib pandas tabulate
#          cd python/tutorials
#          conda run --no-capture-output -n triton python3 01-vector-add.py
#          conda run --no-capture-output -n triton python3 02-fused-softmax.py
#          conda run --no-capture-output -n triton python3 03-matrix-multiplication.py
#          conda run --no-capture-output -n triton python3 04-low-memory-dropout.py
#          conda run --no-capture-output -n triton python3 05-layer-norm.py
#          conda run --no-capture-output -n triton python3 06-fused-attention.py
#          conda run --no-capture-output -n triton python3 07-math-functions.py
#          conda run --no-capture-output -n triton python3 08-experimental-block-pointer.py
#          conda run --no-capture-output -n triton python3 09-experimental-tma-matrix-multiplication.py
#          conda run --no-capture-output -n triton python3 10-experimental-tma-store-matrix-multiplication.py
#          conda run --no-capture-output -n triton python3 11-grouped-gemm.py
#
#      - name: Run CXX unittests
#        run: |
#          cd python/build/*cmake*
#          conda run --no-capture-output -n triton ctest
#
      - name: Save pip cache
        if: ${{ steps.pip-cache.outputs.status == 'miss' }}
        uses: ./.github/actions/save
        with:
          path: ${{ steps.pip-cache.outputs.path }}
          dest: ${{ steps.pip-cache.outputs.dest }}

#      - name: Pass rate
#        run: |
#          python3 scripts/pass_rate.py --reports ~/reports
#          mkdir -p /cache/reports/pass-rate
#          TMPFILE=$(mktemp -p /cache/reports/pass-rate XXXXXXXXXX)
#          python3 scripts/pass_rate.py --reports ~/reports --json > $TMPFILE
#          mv $TMPFILE $TMPFILE.json
