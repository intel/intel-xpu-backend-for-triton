name: Third party benchmarks

on:
  workflow_dispatch:
    inputs:
      runner_label:
        description: Runner label, keep empty for default
        type: string
        default: ""
      tag:
        description: Tag for benchmark results
        type: string
        default: "test"
      use_pyenv_python:
        description: Use Python built with pyenv
        type: boolean
        default: false
  schedule:
    # About midnight PST (UTC-8)
    - cron: "5 10 * * *"

permissions: read-all

env:
  PYTHON_VERSION: "3.10"
  TAG: ${{ inputs.tag || (github.event_name == 'pull_request' && format('pr-{0}', github.event.number)) || (github.event_name == 'schedule' && 'ci') || 'test' }}

jobs:
  build:
    name: Triton benchmarks
    runs-on:
      - linux
      - ${{ inputs.runner_label || 'max1550' }}
    timeout-minutes: 720
    defaults:
      run:
        shell: bash -noprofile --norc -eo pipefail -c "source /opt/intel/oneapi/setvars.sh > /dev/null; source {0}"
    steps:
      - name: Print inputs
        run: |
          cat <<EOF
          ${{ toJSON(inputs) }}
          EOF

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Python
        if: ${{ !(inputs.use_pyenv_python || false) }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Python (from pyenv) ${{ inputs.python_version }}
        if: ${{ inputs.use_pyenv_python }}
        uses: ./.github/actions/setup-pyenv-python
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Identify Python version
        run: |
          PYTHON_VERSION="$(python -c 'import sys; print(f"{sys.version_info[0]}.{ sys.version_info[1]}")')"
          echo "PYTHON_VERSION=$PYTHON_VERSION" | tee -a $GITHUB_ENV

      - name: Install Python build dependencies
        run: |
          pip install wheel cmake

      - name: Setup PyTorch
        uses: ./.github/actions/setup-pytorch

      - name: Setup Triton
        uses: ./.github/actions/setup-triton

      - name: Install benchmark dependencies
        id: install
        run: |
          pip install transformers pandas pytest

      - name: Create reports dir
        run: |
          mkdir reports
          echo "REPORTS=$PWD/reports" >> $GITHUB_ENV

      # - name: Run Liger-Kernel benchmarks
      #   if: ${{ steps.install.outcome == 'success' && !cancelled() }}
      #   run: |
      #     source ./scripts/capture-hw-details.sh

      #     cd benchmarks/third_party/liger_kernels

      #     git clone https://github.com/linkedin/Liger-Kernel
      #     pip install -e Liger-Kernel

      #     # To remember return code, but still copy results
      #     RET_CODE=0
      #     bash ./run_benchmarks.sh || RET_CODE=$?

      #     cp Liger-Kernel/benchmark/data/all_benchmark_data.csv $REPORTS/liger-raw.csv
      #     python transform.py $REPORTS/liger-raw.csv $REPORTS/liger-report.csv --tag $TAG

      #     # Return the captured return code at the end
      #     exit "$RET_CODE"

      - name: Run Llama 3.1 performance benchmark
        if: ${{ steps.install.outcome == 'success' && !cancelled() }}
        # if: ${{ steps.install.outcome == 'success' && !cancelled() && (inputs.benchmarks == '' || contains(fromJson(inputs.benchmarks || '[]'), 'run_llm_inductor_greedy.py')) && !contains(fromJson(inputs.skip_benchmarks || '[]'), 'run_llm_inductor_greedy.py') }}
        run: |
          export LD_LIBRARY_PATH=$PTI_LIBS_DIR:$LD_LIBRARY_PATH

          rm -rfv benchmarks/flex_attention-pr-check
          git clone https://github.com/LiyangLingIntel/flex_attention-pr-check.git benchmarks/flex_attention-pr-check

          git clone https://github.com/huggingface/transformers.git

          cd transformers

          git checkout $(<../benchmarks/flex_attention-pr-check/transformers-commit.txt)
          git apply ../benchmarks/flex_attention-pr-check/transformers-patch-for-timing.diff

          git submodule sync
          git submodule update --init --recursive
          python setup.py develop

          cd ../benchmarks/flex_attention-pr-check
          
          IGC_VectorizerAllowEXP2=1 IGC_VectorizerAllowMAXNUM=1 IGC_VectorizerAllowWAVEALL=1 IGC_VectorizerAllowCMP=1 IGC_VectorizerAllowSelect=1 TRITON_INTEL_ENABLE_BLOCK_IO_STORE_ON_REGULAR_PTR=1 TRITON_INTEL_ONE_MATRIX_PER_LOAD_BT=1 IGC_DisableCodeScheduling=0 \
          python run_llm_inductor_greedy.py -m meta-llama/Llama-3.1-8B --max-new-tokens 128 --input-tokens 1024 --num-warmup 2 --num-iter 7 --compile --profile | tee llama31.compile.xpu.profile.log

          echo "llama profiling log is stored into $PWD/llama31.compile.xpu.profile.log"

          cp llama31.compile.xpu.profile.log $REPORTS/llama31.compile.xpu.profile.log
          python transform_results.py $REPORTS/llama31.compile.xpu.profile.log $REPORTS/llama31-triton-report.csv --tag $TAG

      - name: Upload benchmark reports
        if: ${{ steps.install.outcome == 'success' && !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-reports
          path: reports
