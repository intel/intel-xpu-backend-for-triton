name: Third party benchmarks

on:
  workflow_dispatch:
    inputs:
      runner_label:
        description: Runner label, keep empty for default
        type: string
        default: ""
      tag:
        description: Tag for benchmark results
        type: string
        default: "test"
      use_pyenv_python:
        description: Use Python built with pyenv
        type: boolean
        default: false
  schedule:
    # About midnight PST (UTC-8)
    - cron: "5 10 * * *"

permissions: read-all

env:
  PYTHON_VERSION: "3.10"
  TAG: ${{ inputs.tag || (github.event_name == 'pull_request' && format('pr-{0}', github.event.number)) || (github.event_name == 'schedule' && 'ci') || 'test' }}

jobs:
  build:
    name: Triton benchmarks
    runs-on:
      - linux
      - ${{ inputs.runner_label || 'max1550' }}
    timeout-minutes: 720
    defaults:
      run:
        shell: bash -noprofile --norc -eo pipefail -c "source /opt/intel/oneapi/setvars.sh > /dev/null; source {0}"
    steps:
      - name: Print inputs
        run: |
          cat <<EOF
          ${{ toJSON(inputs) }}
          EOF

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Python
        if: ${{ !(inputs.use_pyenv_python || false) }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Python (from pyenv) ${{ inputs.python_version }}
        if: ${{ inputs.use_pyenv_python }}
        uses: ./.github/actions/setup-pyenv-python
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Identify Python version
        run: |
          PYTHON_VERSION="$(python -c 'import sys; print(f"{sys.version_info[0]}.{ sys.version_info[1]}")')"
          echo "PYTHON_VERSION=$PYTHON_VERSION" | tee -a $GITHUB_ENV

      - name: Install Python build dependencies
        run: |
          pip install wheel cmake

      - name: Setup PyTorch
        uses: ./.github/actions/setup-pytorch

      - name: Setup Triton
        uses: ./.github/actions/setup-triton

      - name: Install benchmarks
        id: install
        run: |
          cd benchmarks
          pip install .

      - name: Install benchmark dependencies
        id: install_deps
        run: |
          pip install transformers pandas pytest

      - name: Create reports dir
        run: |
          mkdir reports
          echo "REPORTS=$PWD/reports" >> $GITHUB_ENV

      - name: Run Liger-Kernel benchmarks
        if: ${{ steps.install_deps.outcome == 'success' && !cancelled() }}
        run: |
          source ./scripts/capture-hw-details.sh

          cd benchmarks/third_party/liger_kernels

          git clone https://github.com/linkedin/Liger-Kernel
          pip install -e Liger-Kernel

          # To remember return code, but still copy results
          RET_CODE=0
          bash ./run_benchmarks.sh || RET_CODE=$?

          cp Liger-Kernel/benchmark/data/all_benchmark_data.csv $REPORTS/liger-raw.csv
          python transform.py $REPORTS/liger-raw.csv $REPORTS/liger-report.csv --tag $TAG

          # Return the captured return code at the end
          exit "$RET_CODE"

      - name: Install SGLANG
        run: |
          git clone https://github.com/sgl-project/sglang.git
          pip install sglang/python[srt_xpu]

      - name: Run SGLANG attention prefill stage benchmark
        if: ${{ steps.install.outcome == 'success' && !cancelled() }}
        run: |
          cd benchmarks/third_party/sglang
          python prefill_attention_benchmark.py --reports $REPORTS

          source ../../../scripts/capture-hw-details.sh
          python ../../triton_kernels_benchmark/build_report.py $REPORTS/prefill-attn-performance.csv $REPORTS/attn-prefill-triton-report.csv --benchmark sglang-prefill-attn --compiler triton --param_cols "B,SEQ_LENS,H_Q,H_KV,D,CAUSAL" --tflops_col Triton-TFlops --hbm_col "Triton-GB/s" --tag $TAG

      - name: Run SGLANG attention decode stage benchmark
        if: ${{ steps.install.outcome == 'success' && !cancelled() }}
        run: |
          cd benchmarks/third_party/sglang
          python decode_attention_benchmark.py --reports $REPORTS

          source ../../../scripts/capture-hw-details.sh
          python ../../triton_kernels_benchmark/build_report.py $REPORTS/decode-attn-performance.csv $REPORTS/attn-decode-triton-report.csv --benchmark sglang-decode-attn --compiler triton --param_cols "B,SEQ_LENS,H_Q,H_KV,D" --tflops_col Triton-TFlops --hbm_col "Triton-GB/s" --tag $TAG

      - name: Run SGLANG attention append stage benchmark
        if: ${{ steps.install.outcome == 'success' && !cancelled() }}
        run: |
          cd benchmarks/third_party/sglang
          python extended_attention_benchmark.py --reports $REPORTS

          source ../../../scripts/capture-hw-details.sh
          python ../../triton_kernels_benchmark/build_report.py $REPORTS/extended-attn-performance.csv $REPORTS/attn-append-triton-report.csv --benchmark sglang-extended-attn --compiler triton --param_cols "B,SEQ_LENS,H_Q,H_KV,D" --tflops_col Triton-TFlops --hbm_col "Triton-GB/s" --tag $TAG

      - name: Upload benchmark reports
        if: ${{ steps.install.outcome == 'success' && !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-reports
          path: reports
