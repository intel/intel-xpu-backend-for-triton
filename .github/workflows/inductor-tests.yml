name: Pytorch inductor tests

on:
  workflow_dispatch:
    inputs:
      suite:
        description: Test suite
        type: string
        default: "all"
      runner_label:
        description: Runner label, keep empty for default
        type: string
        default: ""

permissions: read-all

env:
  PYTHON_VERSION: "3.10"
  PYTORCH_REPO: "pytorch/pytorch"
  PYTORCH_COMMIT_ID: "6c503f1dbbf9ef1bf99f19f0048c287f419df600"
  PYTORCH_XPU_OPS_COMMIT_ID: "39522db63ce045f52c9d61a286018c266cd00479"

jobs:
  print_inputs:
    name: Print inputs
    runs-on: Linux
    steps:
      - name: Print inputs
        run: |
          echo "${{ toJSON(github.event.inputs) }}"

  build:
    name: Test
    runs-on:
      - ${{ inputs.runner_label || 'max1550' }}
    timeout-minutes: 720
    defaults:
      run:
        shell: bash -noprofile --norc -eo pipefail -c "source /home/runner/intel/oneapi/setvars.sh > /dev/null; source {0}"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Load pip cache
        id: pip-cache
        uses: ./.github/actions/load
        with:
          path: $HOME/.cache/pip
          # pip cache per commit id just to minimize network traffic
          key: pip-$PYTHON_VERSION-$GITHUB_SHA

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Python build dependencies
        run: |
          pip install wheel

      - name: Setup PyTorch without IPEX
        uses: ./.github/actions/setup-pytorch
        with:
          repository: ${{ env.PYTORCH_REPO}}
          commit_id: ${{ env.PYTORCH_COMMIT_ID }}
          torch_xpu_ops_commit: ${{ env.PYTORCH_XPU_OPS_COMMIT_ID }}

      - name: Generate Triton cache key
        id: triton-key
        run: |
          COMPOSITE_KEY=$(echo $PYTHON_VERSION $LLVM_COMMIT_ID $GITHUB_SHA | sha256sum - | cut -d\  -f1)
          echo "key=triton-$COMPOSITE_KEY" >> $GITHUB_OUTPUT

      - name: Load Triton wheels from a cache
        id: triton-cache
        uses: ./.github/actions/load
        with:
          path: python/dist
          key: ${{ steps.triton-key.outputs.key }}

      - name: Build Triton wheels
        if: ${{ steps.triton-cache.outputs.status == 'miss' }}
        run: |
          export DEBUG=1
          cd python
          python setup.py bdist_wheel

      - name: Install Triton
        run: |
          pip install python/dist/*.whl

      - name: Save Triton wheels to a cache
        if: ${{ steps.triton-cache.outputs.status == 'miss' }}
        uses: ./.github/actions/save
        with:
          path: ${{ steps.triton-cache.outputs.path }}
          dest: ${{ steps.triton-cache.outputs.dest }}

      - name: Install python test dependencies
        run: |
          pip install pandas scipy tqdm

      - name: Run inductor tests
        run: |
          cd pytorch
          pip install -r .ci/docker/requirements-ci.txt

          export PYTORCH_TESTING_DEVICE_ONLY_FOR="xpu"

          test_cmd="python test/run_test.py --include "
          if [[ "${{ github.event.inputs.suite }}" == "all" ]]; then
            for test in $(ls test/inductor | grep test);
            do
              test_cmd="${test_cmd} inductor/$test";
            done
          else
            test_cmd="${test_cmd} '${{ github.event.inputs.suite }}'"
          fi
          eval $test_cmd

      - name: Report environment details
        if: always()
        run: |
          TIMESTAMP=$(date '+%Y%m%d%H%M%S')
          echo "TIMESTAMP=$TIMESTAMP" >> "${GITHUB_ENV}"

          source ./scripts/capture-hw-details.sh --quiet

          cat <<EOF | tee path: pytorch/test/test-reports/.env
          TIMESTAMP=$TIMESTAMP
          JOB_NAME=${{ join(matrix.*, '-') }}
          GITHUB_RUN_ID=$GITHUB_RUN_ID
          GITHUB_RUN_NUMBER=$GITHUB_RUN_NUMBER
          GITHUB_RUN_ATTEMPT=$GITHUB_RUN_ATTEMPT
          PYTHON_VERSION=$PYTHON_VERSION
          PYTORCH_REPO=$PYTORCH_REPO
          PYTORCH_COMMIT_ID=$PYTORCH_COMMIT_ID
          TRITON_REPO=$GITHUB_REPOSITORY
          TRITON_COMMIT_ID=$GITHUB_SHA
          TORCHVISION_COMMIT_ID=$TORCHVISION_COMMIT_ID
          LIBIGC1_VERSION=$LIBIGC1_VERSION
          LEVEL_ZERO_VERSION=$LEVEL_ZERO_VERSION
          GPU_DEVICE=$GPU_DEVICE
          AGAMA_VERSION=$AGAMA_VERSION
          EOF

      - name: Upload test logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs-${{ env.PYTHON_VERSION }}
          path: pytorch/test/test-reports

      - name: Save pip cache
        if: ${{ steps.pip-cache.outputs.status == 'miss' }}
        uses: ./.github/actions/save
        with:
          path: ${{ steps.pip-cache.outputs.path }}
          dest: ${{ steps.pip-cache.outputs.dest }}
