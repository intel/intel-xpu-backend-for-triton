name: Build and test reusable workflow
run-name: ${{ inputs.run_name }} - ${{ inputs.python_version }} - ${{ inputs.runner_label || 'default'}}

on:
  workflow_call:
    inputs:
      device:
        description: Device
        type: string
        default: max1100
      driver_version:
        description: Driver version
        type: string
        default: rolling
      runner_label:
        description: Runner label, keep empty for default
        type: string
        default: ""
      pytorch_ref:
        description: PyTorch ref, keep empty for default
        type: string
        default: ""
      pytorch_mode:
        description: PyTorch mode, source or wheels
        type: string
        default: "source"
      python_version:
        description: Python version
        type: string
        required: true
      upload_test_reports:
        description: Upload test reports
        type: boolean
        default: false
      ignore_errors:
        description: Ignore test errors
        type: boolean
        default: false
      skip_list:
        description: Skip list
        type: string
        default: ""
      run_name:
        description: Custom run name
        type: string
        default: Build and test
      build_llvm:
        description: Build LLVM
        type: boolean
        default: false
      enable_unskip:
        description: Ignore pytest.skip
        type: boolean
        default: false
      runner_version:
        description: Runner label for version
        type: string
        default: runner-0.0.22
      use_pyenv_python:
        description: Use Python built with pyenv
        type: boolean
        default: false
      use_spirv_backend:
        description: Use SPIR-V backend
        type: boolean
        default: false

permissions: read-all

env:
  TRITON_DISABLE_LINE_INFO: 1
  TEST_UNSKIP: ${{ inputs.enable_unskip }}

jobs:
  integration-tests:
    name: Integration tests
    strategy:
      fail-fast: false
      matrix:
        suite:
          - core
          - rest
    timeout-minutes: 720
    runs-on: ${{ fromJson(inputs.runner_label && format('["linux", "{0}"]', inputs.runner_label) || format('["linux", "{0}", "{1}", "{2}"]', inputs.device, inputs.driver_version, inputs.runner_version)) }}
    defaults:
      run:
        shell: bash -noprofile --norc -eo pipefail -c "source /opt/intel/oneapi/setvars.sh > /dev/null; source {0}"
    steps:
      - name: Print inputs
        run: |
          cat <<EOF
          ${{ toJSON(inputs) }}
          EOF

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Load pip cache
        id: pip-cache
        uses: ./.github/actions/load
        env:
          # Increase this value to reset cache
          CACHE_NUMBER: 1
        with:
          path: $HOME/.cache/pip
          key: pip-${{ inputs.python_version }}-${{ hashFiles('python/pyproject.toml', 'python/setup.py') }}-${{ env.CACHE_NUMBER }}

      - name: Install Python (using actions/setup-python) ${{ inputs.python_version }}
        if: ${{ !inputs.use_pyenv_python }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python_version }}

      - name: Install Python (from pyenv) ${{ inputs.python_version }}
        if: ${{ inputs.use_pyenv_python }}
        uses: ./.github/actions/setup-pyenv-python
        with:
          python-version: ${{ inputs.python_version }}

      - name: Setup PyTorch
        uses: ./.github/actions/setup-pytorch
        with:
          ref: ${{ inputs.pytorch_ref }}
          mode: ${{ inputs.pytorch_mode }}

      - name: Build Proton with XPU support
        if: matrix.suite == 'rest' && inputs.driver_version == 'rolling' && inputs.device == 'max1100'
        run: |
          echo TRITON_BUILD_PROTON_XPU=1 | tee -a $GITHUB_ENV

      - name: Setup Triton
        uses: ./.github/actions/setup-triton
        with:
          build_llvm: ${{ inputs.build_llvm }}
          use_spirv_backend: ${{ inputs.use_spirv_backend }}

      - name: Report environment details
        if: matrix.suite == 'core'
        run: |
          mkdir -p reports
          cat <<EOF | tee reports/.env
          TIMESTAMP=$(date '+%Y%m%d%H%M%S')
          GITHUB_RUN_ID=$GITHUB_RUN_ID
          GITHUB_RUN_NUMBER=$GITHUB_RUN_NUMBER
          GITHUB_RUN_ATTEMPT=$GITHUB_RUN_ATTEMPT
          PYTHON_VERSION=${{ inputs.python_version }}
          PYTORCH_REPO=$PYTORCH_REPO
          PYTORCH_COMMIT_ID=$PYTORCH_COMMIT_ID
          PYTORCH_VERSION=$PYTORCH_VERSION
          TRITON_REPO=$GITHUB_REPOSITORY
          EOF
          ./scripts/capture-hw-details.sh | tee -a reports/.env

      - name: Create test-triton command line
        run: |
          skiplist="$GITHUB_WORKSPACE/scripts/skiplist/default"

          if [[ -n "${{ inputs.skip_list }}" ]]; then
            skiplist="$GITHUB_WORKSPACE/scripts/skiplist/${{ inputs.skip_list }}"
          elif [[ -n "${{ inputs.driver_version }}" ]]; then
            skiplist="$GITHUB_WORKSPACE/scripts/skiplist/${{ inputs.driver_version }}"
          fi

          if [ -d "$skiplist" ]; then
            skiplist="--skip-list $skiplist"
          else
            skiplist="--skip-list $GITHUB_WORKSPACE/scripts/skiplist/default"
          fi

          {
            echo SKIPLIST="$skiplist"
            echo TRITON_TEST_CMD="bash -x scripts/test-triton.sh --skip-pip-install --warning-reports --skip-pytorch-install --reports-dir $GITHUB_WORKSPACE/reports ${{ inputs.ignore_errors && '--ignore-errors' || '' }} $skiplist"
          } | tee -a $GITHUB_ENV

      - name: Install test dependencies
        run: |
          pip install -r scripts/requirements-test.txt git+https://github.com/kwasd/pytest-capturewarnings-ng@v1.2.0

      - name: Run Proton tests
        if: matrix.suite == 'rest' && inputs.driver_version == 'rolling' && inputs.device == 'max1100'
        run: |
          cd third_party/proton/test
          pytest test_api.py test_lib.py test_profile.py test_viewer.py test_record.py -s -v
          cd ..

      - name: Run unit tests
        if: matrix.suite == 'rest'
        run: |
          ${{ env.TRITON_TEST_CMD }} --unit

      - name: Run core tests
        if: matrix.suite == 'core'
        run: |
          ${{ env.TRITON_TEST_CMD }} --core

      - name: Run interpreter tests
        if: matrix.suite == 'rest'
        run: |
          ${{ env.TRITON_TEST_CMD }} --interpreter

      - name: Run Tutorials
        if: matrix.suite == 'rest'
        run: |
          ${{ env.TRITON_TEST_CMD }} --tutorial

      - name: Run instrumentation tests
        if: matrix.suite == 'rest'
        run: |
          ${{ env.TRITON_TEST_CMD }} --instrumentation

      - name: Get transformers version
        if: matrix.suite == 'rest'
        run: |
          cd pytorch
          TRANSFORMERS_VERSION="$(<.ci/docker/ci_commit_pins/huggingface.txt)"
          echo "TRANSFORMERS_VERSION=$TRANSFORMERS_VERSION" | tee -a $GITHUB_ENV

      - name: Install transformers
        if: matrix.suite == 'rest'
        uses: ./.github/actions/install-dependency
        with:
          package: transformers
          repository: huggingface/transformers
          ref: ${{ env.TRANSFORMERS_VERSION }}
          try-tag-prefix: v

      - name: Run E2E test
        if: matrix.suite == 'rest'
        run: |
          ${{ env.TRITON_TEST_CMD }} --inductor

      - name: Save pip cache
        if: ${{ steps.pip-cache.outputs.status == 'miss' }}
        uses: ./.github/actions/save
        with:
          path: ${{ steps.pip-cache.outputs.path }}
          dest: ${{ steps.pip-cache.outputs.dest }}

      - name: Upload test reports
        uses: actions/upload-artifact@v4
        with:
          name: test-reports-${{ matrix.suite }}-${{ inputs.python_version }}-${{ inputs.runner_label || inputs.driver_version }}
          include-hidden-files: true
          path: reports

  reports:
    name: Reports
    runs-on:
      - linux
    needs: integration-tests
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Load pip cache
        id: pip-cache
        uses: ./.github/actions/load
        env:
          # Increase this value to reset cache
          CACHE_NUMBER: 1
        with:
          path: $HOME/.cache/pip
          key: pip-${{ inputs.python_version }}-${{ hashFiles('python/pyproject.toml', 'python/setup.py') }}-${{ env.CACHE_NUMBER }}

      - name: Download test reports
        uses: actions/download-artifact@v4
        with:
          pattern: test-reports-*-${{ inputs.python_version }}-${{ inputs.runner_label || inputs.driver_version }}
          path: reports
          merge-multiple: true

      - name: Install Python (using actions/setup-python) ${{ inputs.python_version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python_version }}

      - name: Install pass_rate dependencies
        run: |
          pip install defusedxml

      - name: Pass rate
        run: |
          ls -la reports
          source ./reports/.env
          python scripts/pass_rate.py --reports reports
          python scripts/pass_rate.py --reports reports --json > pass_rate.json
          python scripts/pass_rate.py --reports reports --suite tutorials --json > pass_rate_tutorials.json

      - name: Upload pass rate report
        # upload reports only for the default branch
        if: github.ref_name == 'main'
        uses: actions/upload-artifact@v4
        with:
          name: pass_rate-${{ inputs.python_version }}-${{ inputs.runner_label || inputs.driver_version }}
          path: pass_rate*.json

      - name: Upload tutorials performance report
        uses: actions/upload-artifact@v4
        with:
          name: tutorials-${{ inputs.python_version }}-${{ inputs.runner_label || inputs.driver_version }}
          if-no-files-found: warn
          include-hidden-files: true
          path: |
            reports/*/*.csv
            reports/.env
