name: Nightly Tests

on:
  workflow_dispatch:
  schedule:
    - cron: "0 14 * * *"

jobs:

  Nightly-Tests:

    runs-on: [self-hosted, PVC]

    steps:

      - name: Create conda environment
        run: |
          source ${HOME}/miniconda3/bin/activate triton-nightly-test
          conda install -y astunparse numpy ninja pyyaml setuptools cmake cffi typing_extensions future six requests dataclasses mkl-include
          conda install -y -f mkl==2021.4.0
          conda install -y -c conda-forge libstdcxx-ng
          python3 -m pip install pytest-xdist
          python3 -m pip install --upgrade pre-commit

      - name: Check Pre-commit
        run: |
          source ${HOME}/miniconda3/bin/activate triton-nightly-test
          cd ${HOME}/triton-nightly
          rm -rf triton_src
          git clone https://github.com/openai/triton triton_src
          cd triton_src
          triton_commit=`git rev-parse HEAD`
          echo "triton_commit: ${triton_commit}" | tee sw_info.log
          git submodule sync
          git submodule update --init --recursive --jobs 0
          cd third_party/intel_xpu_backend
          git checkout main && git pull
          python3 -m pre_commit run --all-files

      - name: Install Dependency
        run: |
          python --version
          source ${HOME}/miniconda3/bin/activate triton-nightly-test
          source ${HOME}/triton-nightly/triton_src/third_party/intel_xpu_backend/.github/ci_pins/version.txt
          python --version
          pip install setuptools cython numpy wheel scikit-build scipy
          pip install psutil cpuid
          cd ${HOME}/triton-nightly
          cp triton_src/third_party/intel_xpu_backend/.github/scripts/env_prepare.sh .
          cp triton_src/third_party/intel_xpu_backend/.github/scripts/env_triton.sh ${HOME}/
          cp -r triton_src/third_party/intel_xpu_backend/.github/patches/ .
          bash env_prepare.sh triton-nightly $torch_repo $torch_branch $torch_commit $ipex_repo $ipex_branch $ipex_commit $oneapi_version
          source ${HOME}/env_triton.sh $oneapi_version
          python -c "import torch;import intel_extension_for_pytorch"
          if [ ${PIPESTATUS[0]} -ne 0 ]; then
              echo -e "[ERROR] Public-torch or IPEX BUILD FAIL"
              exit 1
          fi

      - name: Build Triton
        shell: bash
        run:  |
          source ${HOME}/miniconda3/bin/activate triton-nightly-test
          pip install pybind11
          pip uninstall -y triton
          cd ${HOME}/triton-nightly/triton_src/python
          python setup.py clean
          TRITON_CODEGEN_INTEL_XPU_BACKEND=1 python setup.py bdist_wheel
          pip install dist/*.whl
          cd ${HOME}/triton-nightly
          python -c "import triton"
          if [ ${PIPESTATUS[0]} -ne 0 ]; then
              echo -e "[ERROR] Triton BUILD FAIL"
              exit 1
          fi

      - name: Unit Test for triton on PVC
        run: |
          echo -e "[ INFO ] Run UT test on Node $(hostname)"
          source ${HOME}/miniconda3/bin/activate triton-nightly-test
          source ${HOME}/triton-nightly/triton_src/third_party/intel_xpu_backend/.github/ci_pins/version.txt
          source ${HOME}/env_triton.sh $oneapi_version
          pip install pytest
          rm -rf ~/.triton/cache
          export TRITON_LIBDEVICE_PATH=${HOME}/triton-nightly/triton_src/python/triton/third_party/xpu/lib
          cd ${HOME}/triton-nightly/triton_src/python/test/unit/language
          bash ${HOME}/triton-nightly/triton_src/third_party/intel_xpu_backend/.github/scripts/case_update.sh
          ZE_AFFINITY_MASK=1 pytest -n 32 -v -ra --tb=line . --device=xpu 2>&1 | tee ${HOME}/triton-nightly/triton_src/python/test/unit/ut_raw.log || true
          cd ${HOME}/triton-nightly/triton_src/python/test/unit
          ZE_AFFINITY_MASK=1 pytest -n 32 --ignore=hopper --ignore=language -v -ra --tb=line 2>&1 | tee -a ${HOME}/triton-nightly/triton_src/python/test/unit/ut_raw.log || true
          res=$(cat ut_raw.log | sed -n '7p' |  awk '{print $NF}')
          if [ "$res" == "error" ]; then
            echo -e "[ERROR] IPEX PVC Triton UT FAIL"
            exit 1
          fi

      - name: UT Log Preview
        run: |
          cd ${HOME}/triton-nightly/triton_src/python/test/unit
          echo "============ UT raw log head ============"
          head -n 20 ut_raw.log
          echo "============ UT raw log tail ============"
          tail -n 20 ut_raw.log

      - name: UT Status Overview
        run: |
          cd ${HOME}/triton-nightly/triton_src/python/test/unit
          echo -e "============ UT Status Overview ============" | tee ./ut_summary.log
          grep "^FAILED" ut_raw.log | awk '{print $2}' > ./ut_failed.log
          grep "^SKIPPED" ut_raw.log | awk '{print $2}' | grep -o '[0-9]\+' > ./ut_skipped.log
          grep "^SKIPPED.*Only for cuda" ut_raw.log | awk '{print $2}' | grep -o '[0-9]\+' > ./ut_cuda_only_skipped.log
          grep "PASSED" ut_raw.log | awk '{print $5}' > ./ut_passed.log
          num_failed=$(cat ./ut_failed.log | wc -l)
          num_skipped=$(echo $(echo -n `cat ./ut_skipped.log | awk '{print $1}'`| tr ' ' '+')|bc)
          num_cuda_only_skipped=$(cat ./ut_cuda_only_skipped.log | awk '{print $1}')
          num_passed=$(cat ./ut_passed.log | wc -l)
          num_language=$(grep "items" ut_raw.log | awk '{print $3}' | grep -o '[0-9]\+' | awk 'NR==1')
          num_others=$(grep "items" ut_raw.log | awk '{print $3}' | grep -o '[0-9]\+' | awk 'NR==2')
          let num_total=$num_language+$num_others
          # 3 test_inline_asm* cases
          let num_total_wo_skipped=num_total-num_skipped+num_cuda_only_skipped-3
          total_pass_rate=`awk 'BEGIN{printf "%.2f%%\n",('$num_passed'/'$num_total_wo_skipped')*100}'`
          if [ -z $num_total ]; then num_total=0; fi
          echo "num_language: $num_language" | tee -a ./ut_summary.log
          echo "num_others: $num_others" | tee -a ./ut_summary.log
          echo "num_total: $num_total" | tee -a ./ut_summary.log
          echo "num_skipped: $num_skipped" | tee -a ./ut_summary.log
          echo "num_cuda_only_skipped: $num_cuda_only_skipped" | tee -a ./ut_summary.log
          echo "num_failed: $num_failed" | tee -a ./ut_summary.log
          echo "num_passed: $num_passed" | tee -a ./ut_summary.log
          echo "total_pass_rate: $total_pass_rate" | tee -a ./ut_summary.log

      - name: New Solved Cases
        run: |
          cd ${HOME}/triton-nightly/triton_src/python/test/unit
          awk 'NR==FNR{a[$0]}NR>FNR{ if(!($1 in a)) print $0}' ./ut_failed.log ${HOME}/triton-nightly/triton_src/third_party/intel_xpu_backend/.github/tests/triton_expected_failure_tests.log | tee -a ./new_solved_expected_cases.log
          echo -e "============ New Solved Expected Cases ============"
          cat ./new_solved_expected_cases.log
          num_new_solved_expected_cases=$(cat ./new_solved_expected_cases.log | wc -l)
          echo "num_new_solved_expected_cases: $num_new_solved_expected_cases" | tee -a ./ut_summary.log
          awk 'NR==FNR{a[$0]}NR>FNR{ if(!($1 in a)) print $0}' ./ut_failed.log ${HOME}/triton-nightly/triton_src/third_party/intel_xpu_backend/.github/tests/triton_todo_failure_tests.log | tee -a ./new_solved_todo_cases.log
          echo -e "============ New Solved TODO Cases ============"
          cat ./new_solved_todo_cases.log
          num_new_solved_todo_cases=$(cat ./new_solved_todo_cases.log | wc -l)
          echo "num_new_solved_todo_cases: $num_new_solved_todo_cases" | tee -a ./ut_summary.log

      - name: New Failed Cases
        run: |
          cd ${HOME}/triton-nightly/triton_src/python/test/unit
          awk 'NR==FNR{a[$0]}NR>FNR{ if(!($1 in a)) print $0}' ${HOME}/triton-nightly/triton_src/third_party/intel_xpu_backend/.github/tests/triton_expected_failure_tests.log ./ut_failed.log | tee -a ./new_failed_cases.log
          echo -e "============ New Failed Cases ============"
          cat ./new_failed_cases.log
          echo -e "============ New Failed Not TODO Cases ============"
          awk 'NR==FNR{a[$0]}NR>FNR{ if(!($1 in a)) print $0}' ${HOME}/triton-nightly/triton_src/third_party/intel_xpu_backend/.github/tests/triton_todo_failure_tests.log ./new_failed_cases.log | tee -a ./new_failed_not_todo_cases.log
          cat ./new_failed_not_todo_cases.log
          num_new_failed_cases=$(cat ./new_failed_cases.log | wc -l)
          num_new_failed_not_todo_cases=$(cat ./new_failed_not_todo_cases.log | wc -l)
          echo "num_new_failed_cases: $num_new_failed_cases" | tee -a ./ut_summary.log
          echo "num_new_failed_not_todo_cases: $num_new_failed_not_todo_cases" | tee -a ./ut_summary.log

          if [ "$num_new_failed_not_todo_cases" != "0" ]; then
              echo -e "Triton has new failed cases"
              exit 1
          fi

      - name: UT Status Summary
        run: |
          cd ${HOME}/triton-nightly/triton_src/python/test/unit
          cp ${HOME}/triton-nightly/triton_src/*.log .
          cat ut_summary.log

      - name: Upload Triton PVC nightly Data
        uses: actions/upload-artifact@v3
        with:
          name: Triton-nightly-data
          path: /home/sdp/triton-nightly/triton_src/python/test/unit/*.log

  Tests-Failure-And-Report:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}
    needs: Nightly-Tests
    if: always()
    steps:
      - name: Report github issue when failure detected
        if: ${{ needs.Nightly-Tests.result == 'failure' }}
        run: |
          build_url="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          notification_list="${{ secrets.ISSUE_NOTIFICATION_LIST }}"
          repo="${{ github.repository }}"
          gh --repo $repo issue comment 123  \
              --body "UT Nightly Failed $(date +'%Y-%m-%d'),See: $build_url
                      cc $notification_list"
