name: E2E

on:
  workflow_dispatch:
# FIXME: temporary run this workflow for PRs
  pull_request:
    branches:
      - llvm-target

permissions: read-all

env:
  BASE: /home/runner
  LLVM_SYSPATH: /home/runner/packages/llvm
  BACKEND: XPU
  TRITON_DISABLE_LINE_INFO: 1
  PYTHON_VERSION: "3.10"
  PYTORCH_REPO: https://github.com/Stonepia/pytorch.git
  PYTORCH_BRANCH: dev/triton-test-3.0
  IPEX_REPO: https://github.com/intel/intel-extension-for-pytorch.git
  IPEX_BRANCH: dev/triton-test-3.0
  LLVM_REPO: https://github.com/intel/llvm.git
  LLVM_BRANCH: genx

jobs:
  build:
    name: Build
    runs-on:
      - glados
      - spr
      - cpu
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Identify versions
        run: |
          echo "PYTORCH_COMMIT_ID=$(git ls-remote $PYTORCH_REPO refs/heads/$PYTORCH_BRANCH | cut -f1)" >> "${GITHUB_ENV}"
          echo "IPEX_COMMIT_ID=$(git ls-remote $IPEX_REPO refs/heads/$IPEX_BRANCH | cut -f1)" >> "${GITHUB_ENV}"
          echo "LLVM_COMMIT_ID=$(git ls-remote $LLVM_REPO refs/heads/$LLVM_BRANCH | cut -f1)" >> "${GITHUB_ENV}"
          echo "TORCHVISION_COMMIT_ID=$(git ls-remote https://github.com/pytorch/vision.git refs/heads/main | cut -f1)" >> "${GITHUB_ENV}"
          echo "TORCHTEXT_COMMIT_ID=$(git ls-remote https://github.com/pytorch/text.git refs/heads/main | cut -f1)" >> "${GITHUB_ENV}"
          echo "TORCHAUDIO_COMMIT_ID=$(git ls-remote https://github.com/pytorch/audio.git refs/heads/main | cut -f1)" >> "${GITHUB_ENV}"

      - name: Print versions
        run: |
          echo "PyTorch:     $PYTORCH_COMMIT_ID"
          echo "TorchVision: $TORCHVISION_COMMIT_ID"
          echo "TorchText:   $TORCHTEXT_COMMIT_ID"
          echo "TorchAudio:  $TORCHAUDIO_COMMIT_ID"
          echo "IPEX:        $IPEX_COMMIT_ID"
          echo "LLVM:        $LLVM_COMMIT_ID"
          echo "Triton:      $GITHUB_SHA"

      - name: Create environment file for building PyTorch
        run: |
          cat <<EOF >~/env.sh
          source ~/intel/oneapi/compiler/latest/env/vars.sh
          source ~/intel/oneapi/mkl/latest/env/vars.sh
          export MKL_DPCPP_ROOT=${HOME}/intel/oneapi/mkl/latest
          export LD_LIBRARY_PATH=${MKL_DPCPP_ROOT}/lib:${MKL_DPCPP_ROOT}/lib64:${MKL_DPCPP_ROOT}/lib/intel64:${LD_LIBRARY_PATH}
          export LIBRARY_PATH=${MKL_DPCPP_ROOT}/lib:${MKL_DPCPP_ROOT}/lib64:${MKL_DPCPP_ROOT}/lib/intel64:${LIBRARY_PATH}
          export USE_AOT_DEVLIST='pvc'
          source ~/intel/oneapi/tbb/latest/env/vars.sh
          EOF

      - name: Load PyTorch wheels from a cache
        id: pytorch-cache
        uses: ./.github/actions/load
        with:
          path: $PWD/pytorch/dist
          key: pytorch-$PYTHON_VERSION-$PYTORCH_COMMIT_ID

      - name: Build PyTorch
        if: ${{ steps.pytorch-cache.outputs.status == 'miss' }}
        run: |
          source ~/env.sh
          git clone --single-branch -b $PYTORCH_BRANCH $PYTORCH_REPO
          cd pytorch
          git submodule sync
          git submodule update --init --recursive --jobs 8
          pip install -r requirements.txt
          python setup.py bdist_wheel

      - name: Install PyTorch
        run: |
          pip install pytorch/dist/*.whl
          python -c "import torch;print(torch.__version__)"

      - name: Save PyTorch wheels to a cache
        if: ${{ steps.pytorch-cache.outputs.status == 'miss' }}
        uses: ./.github/actions/save
        with:
          path: ${{ steps.pytorch-cache.outputs.path }}
          dest: ${{ steps.pytorch-cache.outputs.dest }}

      - name: Load IPEX wheels from a cache
        id: ipex-cache
        uses: ./.github/actions/load
        with:
          path: intel-extension-for-pytorch/dist
          key: ipex-$PYTHON_VERSION-$IPEX_COMMIT_ID

      - name: Build IPEX
        if: ${{ steps.ipex-cache.outputs.status == 'miss' }}
        run: |
          source ~/intel/oneapi/setvars.sh
          export USE_AOT_DEVLIST='pvc'
          git clone --single-branch -b $IPEX_BRANCH $IPEX_REPO
          cd intel-extension-for-pytorch
          git submodule sync
          git submodule update --init --recursive --jobs 8
          pip install -r requirements.txt
          python setup.py bdist_wheel

      - name: Install IPEX
        run: |
          source ~/intel/oneapi/setvars.sh
          pip install intel-extension-for-pytorch/dist/*.whl
          python -c "import torch;import intel_extension_for_pytorch as ipex;print(ipex.__version__)"

      - name: Save IPEX wheels to a cache
        if: ${{ steps.ipex-cache.outputs.status == 'miss' }}
        uses: ./.github/actions/save
        with:
          path: ${{ steps.ipex-cache.outputs.path }}
          dest: ${{ steps.ipex-cache.outputs.dest }}

      - name: Generate Triton cache key
        id: triton-key
        run: |
          COMPOSITE_KEY=$(echo $PYTHON_VERSION $LLVM_COMMIT_ID $GITHUB_SHA | sha256sum - | cut -d\  -f1)
          echo "key=triton-$COMPOSITE_KEY" >> $GITHUB_OUTPUT

      - name: Load Triton wheels from a cache
        id: triton-cache
        uses: ./.github/actions/load
        with:
          path: $PWD/python/dist
          key: ${{ steps.triton-key.outputs.key }}

      - name: Generate packages cache key
        if: ${{ steps.triton-cache.outputs.status == 'miss' }}
        id: packages-key
        env:
          # Increase this value to reset cache
          CACHE_NUMBER: 1
        run: |
          COMPOSITE_KEY=$(echo $LLVM_COMMIT_ID ${{ hashFiles('scripts/compile-triton.sh') }} | sha256sum - | cut -d\  -f1)
          echo "key=packages-$COMPOSITE_KEY-$CACHE_NUMBER" >> $GITHUB_OUTPUT

      - name: Load packages from a cache
        if: ${{ steps.triton-cache.outputs.status == 'miss' }}
        id: packages-cache
        uses: ./.github/actions/load
        with:
          path: $HOME/packages
          key: ${{ steps.packages-key.outputs.key }}

      - name: Build packages
        if: ${{ steps.triton-cache.outputs.status == 'miss' && steps.packages-cache.outputs.status == 'miss' }}
        run: |
          ./scripts/compile-triton.sh --skip-triton

      - name: Save packages to a cache
        if: ${{ steps.triton-cache.outputs.status == 'miss' && steps.packages-cache.outputs.status == 'miss' }}
        uses: ./.github/actions/save
        with:
          path: ${{ steps.packages-cache.outputs.path }}
          dest: ${{ steps.packages-cache.outputs.dest }}

      - name: Build Triton wheels
        if: ${{ steps.triton-cache.outputs.status == 'miss' }}
        run: |
          cd python
          python setup.py bdist_wheel

      - name: Install Triton
        run: |
          pip install python/dist/*.whl

      - name: Save Triton wheels to a cache
        if: ${{ steps.triton-cache.outputs.status == 'miss' }}
        uses: ./.github/actions/save
        with:
          path: ${{ steps.triton-cache.outputs.path }}
          dest: ${{ steps.triton-cache.outputs.dest }}
