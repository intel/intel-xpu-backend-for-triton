# Clones PyTorch (or loads from cache) to directory "pytorch".
# Uses the existing Python.
# Sets the following environment variables:
# * PYTORCH_REPO
# * PYTORCH_COMMIT_ID
name: setup-pytorch
description: Build and install PyTorch wheels
inputs:
  oneapi:
    description: Directory with oneAPI BaseKit
    default: ~/intel/oneapi
  repository:
    description: Repository name with owner
    default: Stonepia/pytorch
runs:
  using: "composite"
  steps:
    - name: Identify commit id
      shell: bash
      run: |
        PYTORCH_COMMIT_ID="$(<.github/pins/pytorch.txt)"
        echo "PYTORCH_REPO=${{ inputs.repository }}" >> "$GITHUB_ENV"
        echo "PYTORCH_COMMIT_ID=$PYTORCH_COMMIT_ID" >> "$GITHUB_ENV"

    - name: Identify Python version
      shell: bash
      run: |
        if [[ -z "$PYTHON_VERSION" ]]; then
          PYTHON_VERSION="$(python -c 'import sys; print(f"{sys.version_info[0]}.{ sys.version_info[1]}")')"
          echo "PYTHON_VERSION=$PYTHON_VERSION" >> "$GITHUB_ENV"
        fi

    - name: Load PyTorch from a cache
      id: pytorch-cache
      uses: ./.github/actions/load
      with:
        path: pytorch
        key: pytorch-$PYTHON_VERSION-$PYTORCH_COMMIT_ID

    - name: Clone PyTorch repository
      if: ${{ steps.pytorch-cache.outputs.status == 'miss' }}
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.repository }}
        ref: ${{ env.PYTORCH_COMMIT_ID }}
        submodules: recursive
        path: pytorch

    - name: Build PyTorch
      if: ${{ steps.pytorch-cache.outputs.status == 'miss' }}
      shell: bash
      run: |
        source ${{ inputs.oneapi }}/compiler/latest/env/vars.sh
        source ${{ inputs.oneapi }}/mkl/latest/env/vars.sh
        export MKL_DPCPP_ROOT=${{ inputs.oneapi }}/mkl/latest
        export LD_LIBRARY_PATH=${MKL_DPCPP_ROOT}/lib:${MKL_DPCPP_ROOT}/lib64:${MKL_DPCPP_ROOT}/lib/intel64:${LD_LIBRARY_PATH}
        export LIBRARY_PATH=${MKL_DPCPP_ROOT}/lib:${MKL_DPCPP_ROOT}/lib64:${MKL_DPCPP_ROOT}/lib/intel64:${LIBRARY_PATH}
        source ${{ inputs.oneapi }}/tbb/latest/env/vars.sh

        cd pytorch
        pip install wheel
        pip install -r requirements.txt
        python setup.py bdist_wheel

    - name: Install PyTorch
      shell: bash
      run: |
        pip install pytorch/dist/*.whl
        python -c "import torch;print(torch.__version__)"

    - name: Save PyTorch to a cache
      if: ${{ steps.pytorch-cache.outputs.status == 'miss' }}
      uses: ./.github/actions/save
      with:
        path: ${{ steps.pytorch-cache.outputs.path }}
        dest: ${{ steps.pytorch-cache.outputs.dest }}
