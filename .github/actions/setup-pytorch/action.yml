# Clones PyTorch (or loads from cache) to directory "pytorch".
# Uses the existing Python.
# Sets the following environment variables:
# * PYTORCH_REPO
# * PYTORCH_COMMIT_ID
# * PYTORCH_VERSION
name: setup-pytorch
description: Build and install PyTorch wheels
inputs:
  oneapi:
    description: Directory with oneAPI BaseKit
    default: /opt/intel/oneapi
  repository:
    description: Repository name with owner
    default: Stonepia/pytorch
  ref:
    description: Branch, tag, commit id
    default: ""
  mode:
    description: Source or wheels
    default: source
runs:
  using: "composite"
  steps:
    - name: Set default commit id
      if: inputs.ref == ''
      shell: bash
      run: |
        if [[ "${{ inputs.repository }}" == "Stonepia/pytorch" ]]; then
          PYTORCH_COMMIT_ID="$(<.github/pins/pytorch.txt)"
        else
          PYTORCH_COMMIT_ID="$(<.github/pins/pytorch-upstream.txt)"
        fi
        echo "PYTORCH_REPO=${{ inputs.repository }}" | tee -a "$GITHUB_ENV"
        echo "PYTORCH_COMMIT_ID=$PYTORCH_COMMIT_ID" | tee -a "$GITHUB_ENV"

    - name: Identify commit id
      if: inputs.ref != ''
      id: commit-id
      uses: ./.github/actions/get-commit-id
      with:
        repository: ${{ inputs.repository }}
        branch: ${{ inputs.ref }}

    - name: Set commit id
      if: inputs.ref != ''
      shell: bash
      run: |
        echo "PYTORCH_REPO=${{ inputs.repository }}" | tee -a "$GITHUB_ENV"
        echo "PYTORCH_COMMIT_ID=${{ steps.commit-id.outputs.commit_id }}" | tee -a "$GITHUB_ENV"

    - name: Identify Python version
      shell: bash
      run: |
        if [[ -z "$PYTHON_VERSION" ]]; then
          PYTHON_VERSION="$(python -c 'import sys; print(f"{sys.version_info[0]}.{ sys.version_info[1]}")')"
          echo "PYTHON_VERSION=$PYTHON_VERSION" >> "$GITHUB_ENV"
        fi

    # PyTorch build process expects Intel oneAPI in /opt/intel/oneapi
    # https://github.com/Stonepia/pytorch/blob/c9153c96f547f269581743e7443aa86d7e003505/cmake/Modules/FindMKL.cmake#L44
    - name: Set up oneAPI
      shell: bash
      run: |
        if [[ -d /opt/intel/oneapi ]]; then
          exit 0
        fi
        if [[ -L /opt/intel/oneapi ]]; then
          exit 0
        fi
        sudo mkdir -p /opt/intel
        sudo ln -sfT ${{ inputs.oneapi }} /opt/intel/oneapi

    - name: Generate PyTorch cache key
      shell: bash
      run: |
        ONEAPI_KEY=$(sha256sum /opt/intel/installed.txt 2> /dev/null | cut -d\  -f1 || true)
        PYTORCH_CACHE_KEY=$(echo $PYTHON_VERSION $PYTORCH_COMMIT_ID ${{ hashFiles('scripts/patch-pytorch.sh') }} ${{ inputs.mode }}$ONEAPI_KEY | sha256sum - | cut -d\  -f1)
        echo "PYTORCH_CACHE_KEY=$PYTORCH_CACHE_KEY" | tee -a "$GITHUB_ENV"

    - name: Load PyTorch from a cache
      id: pytorch-cache
      uses: ./.github/actions/load
      env:
        # Increase this value to reset cache
        CACHE_NUMBER: 12
      with:
        path: pytorch
        key: pytorch-$PYTORCH_CACHE_KEY-$CACHE_NUMBER

    - name: Clone PyTorch repository
      if: ${{ steps.pytorch-cache.outputs.status == 'miss' }}
      uses: actions/checkout@v4
      with:
        repository: ${{ env.PYTORCH_REPO }}
        ref: ${{ env.PYTORCH_COMMIT_ID }}
        # To build PyTorch from source we need all submodules, they are not required for benchmarks
        submodules: ${{ inputs.mode == 'source' && 'recursive' || 'false' }}
        path: pytorch

    - name: Apply additional PR patches
      if: ${{ steps.pytorch-cache.outputs.status == 'miss' && inputs.repository == 'pytorch/pytorch' && inputs.mode == 'source' }}
      shell: bash
      run: |
        cd pytorch
        ../scripts/patch-pytorch.sh

    # FIXME: Old PyTorch does not work with numpy==2.0.0
    - name: Install numpy < 2.0.0
      if: ${{ inputs.repository == 'Stonepia/pytorch' }}
      shell: bash
      run: |
        pip install 'numpy<2.0.0'

    - name: Build PyTorch
      if: ${{ steps.pytorch-cache.outputs.status == 'miss' && inputs.mode == 'source' }}
      shell: bash
      run: |
        source ${{ inputs.oneapi }}/setvars.sh
        cd pytorch
        pip install wheel
        pip install -r requirements.txt
        python setup.py bdist_wheel

    - name: Install PyTorch (built from source)
      if: ${{ inputs.mode == 'source' }}
      shell: bash
      run: |
        source ${{ inputs.oneapi }}/setvars.sh
        pip install pytorch/dist/*.whl

    - name: Install PyTorch (from wheels)
      if: ${{ inputs.mode == 'wheels' }}
      shell: bash
      run: |
        source ${{ inputs.oneapi }}/setvars.sh
        pip install torch --index-url https://download.pytorch.org/whl/nightly/xpu

    - name: Get PyTorch version
      shell: bash
      run: |
        source ${{ inputs.oneapi }}/setvars.sh
        PYTORCH_VERSION="$(python -c 'import torch;print(torch.__version__)')"
        echo "PYTORCH_VERSION=$PYTORCH_VERSION" | tee -a "$GITHUB_ENV"

    - name: Save PyTorch to a cache
      if: ${{ steps.pytorch-cache.outputs.status == 'miss' }}
      uses: ./.github/actions/save
      with:
        path: ${{ steps.pytorch-cache.outputs.path }}
        dest: ${{ steps.pytorch-cache.outputs.dest }}
