name: install-dependency
description: Build and install a dependency python package from git repo
inputs:
  package:
    description: Package name
    required: true
  repository:
    description: Repository name with owner
    required: true
  ref:
    description: Commit id or branch name in package repository
    default: ""
  try-tag-prefix:
    description: Try to use a tag with this prefix if commit/branch specified in `ref` doesn't exist
    default: ""
  extra-cache-key:
    description: Cache key suffix
    default: ""
runs:
  using: "composite"
  steps:
    - name: Get package commit id
      id: commit-id
      uses: ./.github/actions/get-commit-id
      with:
        repository: ${{ inputs.repository }}
        branch: ${{ inputs.ref }}
        try-tag-prefix: ${{ inputs.try-tag-prefix }}

    - name: Identify Python version
      shell: bash
      run: |
        if [[ -z "$PYTHON_VERSION" ]]; then
          PYTHON_VERSION="$(python -c 'import sys; print(f"{sys.version_info[0]}.{ sys.version_info[1]}")')"
          echo "PYTHON_VERSION=$PYTHON_VERSION" >> "$GITHUB_ENV"
        fi

    - name: Generate cache key
      shell: bash
      run: |
        DEPENDENCY_CACHE_KEY="${{ inputs.package }}-$PYTHON_VERSION-$(echo ${{ steps.commit-id.outputs.commit_id }} ${{ inputs.extra-cache-key }} | sha256sum - | cut -d\  -f1)"
        echo "DEPENDENCY_CACHE_KEY=$DEPENDENCY_CACHE_KEY" | tee -a "$GITHUB_ENV"

    - name: Try to load package from a cache
      id: cache-load
      uses: ./.github/actions/load
      with:
        path: ${{ inputs.package }}-${{ steps.commit-id.outputs.commit_id }}
        key: ${{ env.DEPENDENCY_CACHE_KEY }}

    - name: Clone package repo
      if: ${{ steps.cache-load.outputs.status == 'miss' }}
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.repository }}
        ref: ${{ steps.commit-id.outputs.commit_id }}
        submodules: recursive
        path: ${{ inputs.package }}-${{ steps.commit-id.outputs.commit_id }}

    - name: Build package wheels
      if: ${{ steps.cache-load.outputs.status == 'miss' }}
      shell: bash
      run: |
        source /opt/intel/oneapi/setvars.sh
        cd ${{ inputs.package }}-${{ steps.commit-id.outputs.commit_id }}
        if [[ -f setup.py ]]; then
          python setup.py bdist_wheel
        elif [[ -f pyproject.toml ]]; then
          pip install build
          python -m build
        else
          echo "Error: setup.py and pyproject.toml not found"
          exit 1
        fi

    - name: Install package wheels
      shell: bash
      run: |
        source /opt/intel/oneapi/setvars.sh
        pip install ${{ inputs.package }}-${{ steps.commit-id.outputs.commit_id }}/dist/*.whl
        python -c "import ${{ inputs.package }}; print(${{ inputs.package }}.__version__)"

    - name: Save package to a cache
      if: ${{ steps.cache-load.outputs.status == 'miss' }}
      uses: ./.github/actions/save
      with:
        path: ${{ steps.cache-load.outputs.path }}
        dest: ${{ steps.cache-load.outputs.dest }}
