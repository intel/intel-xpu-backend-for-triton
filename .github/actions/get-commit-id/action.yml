name: get-commit-id
description: Identify whether a branch exists and get latest commit id. If branch doesn't exist than this action will return branch argument as the commit id assuming that it is individial commit identifier instead of branch name.
inputs:
  repository:
    description: Repository name with owner
  branch:
    description: Branch name
  variable:
    description: Environment variable that will contain commit id
    default: ""
  retries:
    description: Number of retries
    default: "5"
  delay:
    description: Delay before retrying (see "man sleep")
    default: "5s"
  try-tag-prefix:
    description: Try to use a tag with this prefix if commit/branch specified in `ref` doesn't exist
    default: ""
outputs:
  commit_id:
    description: Commit id
    value: ${{ steps.commit_id.outputs.commit_id }}
runs:
  using: "composite"
  steps:
    - name: Get commit id for ${{ inputs.repository }} ${{ inputs.branch }}
      id: commit_id
      shell: bash
      run: |
        set +e
        set -o pipefail
        for ((retry=0; retry<${{ inputs.retries }}; retry++)); do
          echo inputs.branch = ${{ inputs.branch }}
          echo inputs.try-tag-prefix = ${{ inputs.try-tag-prefix }}
          commit_id="$(git ls-remote --exit-code https://github.com/${{ inputs.repository }} refs/heads/${{ inputs.branch }} | cut -f1; exit ${PIPESTATUS[0]})"
          EXIT_CODE=$?

          if [[ $EXIT_CODE -eq 2 && "${{ inputs.try-tag-prefix }}" ]]; then
            commit_id="$(git ls-remote --exit-code https://github.com/${{ inputs.repository }} refs/tags/${{ inputs.try-tag-prefix }}${{ inputs.branch }} | cut -f1; exit ${PIPESTATUS[0]})"
            EXIT_CODE=$?
          fi

          if [[ $EXIT_CODE -eq 0 ]]; then
            if [[ $commit_id ]]; then
              echo "${{ inputs.repository }} ${{ inputs.branch }}: $commit_id"
              echo "commit_id=$commit_id" >> "$GITHUB_OUTPUT"
              if [[ "${{ inputs.variable }}" ]]; then
                echo "${{ inputs.variable }}=$commit_id" >> "$GITHUB_ENV"
              fi
              exit 0
            fi
          elif [[ $EXIT_CODE -eq 2 ]]; then
            # Here it means that ${{ inputs.branch }} is already a commit id, not a branch name or tag name
            echo "commit_id=${{ inputs.branch }}" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          sleep ${{ inputs.delay }}
        done
        echo "Failed after ${{ inputs.retries }} retries."
        exit 1
