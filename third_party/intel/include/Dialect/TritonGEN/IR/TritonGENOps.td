//===-- TritonGENOps.td - TritonGEN op definitions ---------*- tablegen -*-===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This is the TritonGEN IR operation definition file.
//
//===----------------------------------------------------------------------===//

#ifndef TRITONGEN_OPS
#define TRITONGEN_OPS

include "intel/include/Dialect/TritonGEN/IR/TritonGENDialect.td"
include "intel/include/Dialect/TritonGEN/IR/TritonGENAttrDefs.td"
include "mlir/IR/OpBase.td"
include "mlir/IR/EnumAttr.td"
include "mlir/Dialect/LLVMIR/LLVMTypes.td"
include "mlir/Interfaces/SideEffectInterfaces.td"
include "mlir/IR/OpAsmInterface.td"

//===----------------------------------------------------------------------===//
// TritonGEN op definitions
//===----------------------------------------------------------------------===//

class TritonGEN_Op<string mnemonic, list<Trait> traits = []> :
  Op<TritonGEN_Dialect, mnemonic, traits>;

//===----------------------------------------------------------------------===//
// Synchronization
//===----------------------------------------------------------------------===//

def TritonGEN_SubGroupReduceOp : TritonGEN_Op<"sub_group_reduce", [
      AllTypesMatch<["res", "value"]>]>,
  Results<(outs SignlessIntegerOrFloatLike:$res)>,
  Arguments<(ins SignlessIntegerOrFloatLike:$value,
                 TritonGEN_ReduceKindAttr:$kind,
                 I32Attr:$size)> {
  let summary = "Subgroup reduce";

  let description = [{
    The `triton_gen.sub_group_reduce` operation is invoked by all work items in
    a subgroup, each of them providing a $value. The $size argument is used to
    form groups of $size consecutive work items called clusters. Each cluster
    performs the reduction operation identified by $kind. The result of the
    cluster reduction is propagated to the work items belonging to that cluster.
  }];

  let assemblyFormat = [{
    $kind $value ` ` `{` `size` `=` $size `}` attr-dict `:` type($value)
  }];

  let hasVerifier = 1;
}

def TritonGEN_SubGroupScanOp : TritonGEN_Op<"sub_group_scan", [
      AllTypesMatch<["res", "value"]>]>,
  Results<(outs SignlessIntegerOrFloatLike:$res)>,
  Arguments<(ins SignlessIntegerOrFloatLike:$value,
                 TritonGEN_ReduceKindAttr:$reduce_kind,
                 TritonGEN_ScanKindAttr:$scan_kind)> {
  let summary = "Subgroup scan";

  let description = [{
    The `triton_gen.sub_group_scan` operation is invoked by all work items in
    a subgroup, each of them providing a $value. Each work item performs the
    reduction operation identified by $reduce_kind. The $scan_kind attribute
    indicates whether to perform an inclusive or exclusive scan. The result
    of the scan operation is returned for each work item.
    Note: The scan order is defined by increasing sub-group local ID within
    the sub-group.
  }];

  let assemblyFormat = [{
    $reduce_kind $value ` ` `{` `kind` `=` $scan_kind `}` attr-dict `:` type($value)
  }];
}

//===----------------------------------------------------------------------===//
// Matrix operations
//===----------------------------------------------------------------------===//

def TritonGEN_MatrixElemType : AnyTypeOf<[AnyI8, AnyI16, AnyI32, F32, F16, BF16]>;

def TritonGEN_MatrixDPASOp : TritonGEN_Op<"dpas">,
  Results<(outs FixedVectorOf<[TritonGEN_MatrixElemType]>:$d)>,
  Arguments<(ins
    FixedVectorOfRankAndType<[1], [TritonGEN_MatrixElemType]>:$c,
    FixedVectorOfRankAndType<[1], [TritonGEN_MatrixElemType]>:$a,
    FixedVectorOfRankAndType<[1], [TritonGEN_MatrixElemType]>:$b,
    TritonGEN_PrecisionTypeAttr:$pa,
    TritonGEN_PrecisionTypeAttr:$pb,
    I32Attr:$rc
  )> {

  let summary = "Matrix multiply-add";

  let description = [{
    The `triton_gen.dpas` operation is a matrix multiplication plus accumulation:

      D = C + A x B

      where the A, B, C input matrices and the result D have shapes:
        D : MxN
        C : MxN
        A : MxK
        B : KxN

        M : repeat count, must be 1, 2, 4, or 8
        N : fixed execution size, must be 16
        K : depth * OPS_PER_CHAN
            OPS_PER_CHAN
              1 : for TF32
              2 : for 16-bit precision(BF, HF)
              4 : for 8-bit precision (FP8, UB, B)
              8 : for less-then 8 bit precision (U4/S4, U2/S2).

            If depth is 8, K would be 8, 16, 32, or 64 (based on OPS_PER_CHAN).

    $a, $b, $c, $d - matrix A, B, C, D, respectively
    $pa, $pb - precision of matrix A and B resepectively
    $rc - repeat count
  }];

  let assemblyFormat = [{
    operands ` ` `{` `pa` `=` $pa `,` `pb` `=` $pb `,` `rc` `=` $rc `}` attr-dict `:` functional-type(operands, results)
  }];

  let hasVerifier = 1;
}

def TritonGEN_Matrix2DBlockLoadOp : TritonGEN_Op<"2Dblockload">,
  Results<(outs FixedVectorOf<[TritonGEN_MatrixElemType]>:$res)>,
  Arguments<(ins
    Arg<LLVM_AnyPointer, "", [MemRead]>:$ptr,
    I32:$base_width,
    I32:$base_height,
    I32:$base_pitch,
    I32:$x,
    I32:$y,
    I32Attr:$elem_size_in_bits,
    I32Attr:$tile_width,
    I32Attr:$tile_height,
    I32Attr:$v_blocks,
    I1Attr:$transpose,
    I1Attr:$vnni_transform,
    DefaultValuedAttr<TritonGEN_LoadCacheControl, "::mlir::triton::TritonGEN::LoadCacheControl::DEFAULT">:$cache_control
  )> {

  let summary = "2D block load";

  let description = [{
    The `triton_gen.2Dblockload` operation loads a two dimensional matrix tile
    from a larger matrix residing in memory. The parameters are:
      $ptr - the base address of the matrix containing the tile to load
      $base_width, $base_height, $base_pitch - the shape of matrix
      $x, $y, $tile_width, $tile_height - the starting offsets and shape of the tile to load
      $elem_size_in_bits - the size in bits of the matrix element
        - 32 for f32, bf32
        - 16 for f16, int16, bf16
        - 8 for int8, int4, int2
      $v_blocks - number of tiles to load
      $transpose - transpose the tile in registers (useful for 32 bit element type)
      $vnni_transform - transpose and pack the submatrix in registers (useful for < 32 bit element types)
      $cache_control - an enumerator that sets the L1 and L3 cache behaviour

    Notes:
      - the $transpose and $vnni_transform parameters are mutual exclusive
      - transposing the tile loaded is typically used for the B matrix operand of a `gen.tile` operations
        (D = C + A * B), where A has row-major layout in registers and B should have column-major layout.
      - if the tile loaded contains out of bound elements of the matrix, they are filled with 0.
      - coordinate is provided in elements, while width and pitch are provided in bytes.
  }];

  let assemblyFormat = [{
    operands ` ` `{` `elem_size_in_bits` `=` $elem_size_in_bits `,` `tile_width` `=` $tile_width `,`
    `tile_height` `=` $tile_height `,` `v_blocks` `=` $v_blocks `,` `transpose` `=` $transpose `,`
    `vnni_transform` `=` $vnni_transform `,` `cache_control` `=` $cache_control `}` attr-dict `:` functional-type(operands, results)
  }];

  let hasVerifier = 1;
}

def TritonGEN_Matrix2DBlockStoreOp : TritonGEN_Op<"2Dblockstore">,
  Arguments<(ins
    Arg<LLVM_AnyPointer, "", [MemWrite]>:$ptr,
    I32:$base_width,
    I32:$base_height,
    I32:$base_pitch,
    I32:$x,
    I32:$y,
    I32Attr:$elem_size_in_bits,
    I32Attr:$tile_width,
    I32Attr:$tile_height,
    I32Attr:$v_blocks,
    FixedVectorOf<[TritonGEN_MatrixElemType]>:$stored_val,
    DefaultValuedAttr<TritonGEN_StoreCacheControl, "::mlir::triton::TritonGEN::StoreCacheControl::DEFAULT">:$cache_control
  )> {

  let summary = "2D block store";

  let description = [{
    The `triton_gen.2Dblockstore` operation stores a two dimensional tile into a
    larger matrix residing in memory. The parameters are:
      $ptr - the base address of the matrix where to store the tile
      $base_width, $base_height, $base_pitch - the shape of the matrix
      $x, $y, $tile_width, $tile_height - the starting offsets and shape of the tile to store
      $elem_size_in_bits - the size in bits of the matrix element
        - 32 for f32, bf32
        - 16 for f16, int16, bf16
        - 8 for int8, int4, int2
      $v_blocks - number of tiles to store
      $cache_control - an enumerator that sets the L1 and L3 cache behaviour
      $stored_val - the tile to store

    Notes:
      - coordinate is provided in elements, while width and pitch are provided in bytes.
  }];

  let assemblyFormat = [{
    operands ` ` `{` `elem_size_in_bits` `=` $elem_size_in_bits `,` `tile_width` `=` $tile_width `,`
      `tile_height` `=` $tile_height `,` `v_blocks` `=` $v_blocks `,` `cache_control` `=` $cache_control `}`
      attr-dict `:` `(` type(operands) `)`
  }];

  let hasVerifier = 1;
}

def TritonGEN_Matrix2DBlockPrefetchOp : TritonGEN_Op<"2Dblockprefetch">,
  Arguments<(ins
    Arg<LLVM_AnyPointer, "", [MemRead]>:$ptr,
    I32:$base_width,
    I32:$base_height,
    I32:$base_pitch,
    I32:$x,
    I32:$y,
    I32Attr:$elem_size_in_bits,
    I32Attr:$tile_width,
    I32Attr:$tile_height,
    I32Attr:$v_blocks,
    DefaultValuedAttr<TritonGEN_LoadCacheControl, "::mlir::triton::TritonGEN::LoadCacheControl::DEFAULT">:$cache_control
  )> {

  let summary = "2D block prefetch";

  let description = [{
    The `triton_gen.2Dblockprefetch` operation prefetches a two dimensional tile
    from a larger matrix residing in memory. The parameters are:
      $ptr - the base address of the matrix containing the tile to prefetch
      $base_width, $base_height, $base_pitch - the shape of the matrix
    $x, $y, $tile_width, $tile_height - the starting offsets and shape of tile to prefetch
    $elem_size_in_bits - the size in bits of the matrix element
      - 32 for f32, bf32
      - 16 for f16, int16, bf16
      - 8 for int8, int4, int2
    $v_blocks - number of tiles to prefetch
    $cache_control - an enumerator that sets the L1 and L3 cache behaviour

    Notes:
      - coordinate is provided in elements, while width and pitch are provided in bytes.
  }];

  let assemblyFormat = [{
    operands ` ` `{` `elem_size_in_bits` `=` $elem_size_in_bits `,` `tile_width` `=` $tile_width `,`
      `tile_height` `=` $tile_height `,` `v_blocks` `=` $v_blocks `,` `cache_control` `=` $cache_control `}`
      attr-dict `:` `(` type(operands) `)`
  }];

  let hasVerifier = 1;
}

def TritonGEN_SubGroupBlockMemoryAccessElementType
    : AnyTypeOf<[I8, I16, I32, I64],
                "Valid sub-group block memory access element type">;

def TritonGEN_SubGroupBlockMemoryAccessType
    : AnyTypeOf<[TritonGEN_SubGroupBlockMemoryAccessElementType,
                 FixedVectorOfLengthAndType<[2, 4, 8],
                     [TritonGEN_SubGroupBlockMemoryAccessElementType]>,
                 // Vectors of length 16 only allowed for i8 for now.
                 FixedVectorOfLengthAndType<[16], [I8]>],
          "Valid sub-group block memory access type">;

def TritonGEN_SubGroupBlockMemoryAccessPointerType
    : Type<And<[LLVM_AnyPointer.predicate,
                Or<[CPred<"::llvm::cast<::mlir::LLVM::LLVMPointerType>($_self)" #
                          ".getAddressSpace() == " #
                          "static_cast<unsigned>(kCrossWorkgroup)">,
                    CPred<"::llvm::cast<::mlir::LLVM::LLVMPointerType>($_self)" #
                          ".getAddressSpace() == " #
                          "static_cast<unsigned>(kWorkgroup)">]>]>,
          "LLVM pointer in local or global OpenCL address space",
          "::mlir::LLVM::LLVMPointerType">;

def TritonGEN_SubGroupBlockReadOp: TritonGEN_Op<"sub_group_block_read"> {
  let summary = "Sub-group block read.";

  let description = [{
    The `triton_gen.sub_group_block_read` reads a scalar or vector for each
    work-item in the sub-group from pointer `ptr` as a block operation.
    The data is read strided, so the first value is read from:
    ```
    ptr[sub_group_local_id]
    ```
    and the second one is:
    ```
    ptr[sub_group_local_id + sub_group_size]
    ```
    etc.

    `ptr` must be aligned to the size of the element type of `res`.

     Example:
     ```mlir
     %0 = triton_gen.sub_group_block_read %ptr : !llvm.ptr<1> -> vector<4xi32>
     ```
  }];

  let arguments = (ins
      Arg<TritonGEN_SubGroupBlockMemoryAccessPointerType, "", [MemRead]>:$ptr);

  let results = (outs TritonGEN_SubGroupBlockMemoryAccessType:$res);

  let assemblyFormat = [{
    $ptr attr-dict `:` qualified(type($ptr)) `->` type($res)
  }];
}

def TritonGEN_SubGroupBlockWriteOp : TritonGEN_Op<"sub_group_block_write"> {
  let summary = "simd block write";

  let description = [{
    The `triton_gen.sub_group_block_write` writes a scalar or vector for each
    work-item in the sub-group from pointer `ptr` as a block operation.
    The data is read strided, so the first value is written to:
    ```
    ptr[sub_group_local_id]
    ```
    and the second one is:
    ```
    ptr[sub_group_local_id + sub_group_size]
    ```
    etc.

    `ptr` must be aligned to the size of the element type of `res`.

     Example:
     ```mlir
     %0 = triton_gen.sub_group_block_write %ptr, %val : !llvm.ptr<1>, vector<4xi32>
     ```
  }];

  let arguments = (ins
      Arg<TritonGEN_SubGroupBlockMemoryAccessPointerType, "", [MemRead]>:$ptr,
      TritonGEN_SubGroupBlockMemoryAccessType:$val);

  let results = (outs);

  let assemblyFormat = [{
    $ptr `,` $val attr-dict `:` qualified(type($ptr)) `,` type($val)
  }];
}

#endif // TRITONGEN_OPS
